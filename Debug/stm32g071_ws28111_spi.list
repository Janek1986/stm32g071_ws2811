
stm32g071_ws28111_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aca4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800ad60  0800ad60  0001ad60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b05c  0800b05c  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800b05c  0800b05c  0001b05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b064  0800b064  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800b06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000158  0800b1c4  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800b1c4  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b1e  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f32  00000000  00000000  00035c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00038bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ed2  00000000  00000000  0003aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f2a  00000000  00000000  000548ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b0c9  00000000  00000000  00068814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001038dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b8  00000000  00000000  00103930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000158 	.word	0x20000158
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ad48 	.word	0x0800ad48

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000015c 	.word	0x2000015c
 8000100:	0800ad48 	.word	0x0800ad48

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	1c08      	adds	r0, r1, #0
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f82e 	bl	8000494 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_lmul>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	0415      	lsls	r5, r2, #16
 8000448:	0c2d      	lsrs	r5, r5, #16
 800044a:	000f      	movs	r7, r1
 800044c:	0001      	movs	r1, r0
 800044e:	002e      	movs	r6, r5
 8000450:	46c6      	mov	lr, r8
 8000452:	4684      	mov	ip, r0
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	0c14      	lsrs	r4, r2, #16
 8000458:	0c00      	lsrs	r0, r0, #16
 800045a:	0c09      	lsrs	r1, r1, #16
 800045c:	4346      	muls	r6, r0
 800045e:	434d      	muls	r5, r1
 8000460:	4360      	muls	r0, r4
 8000462:	4361      	muls	r1, r4
 8000464:	1940      	adds	r0, r0, r5
 8000466:	0c34      	lsrs	r4, r6, #16
 8000468:	1824      	adds	r4, r4, r0
 800046a:	b500      	push	{lr}
 800046c:	42a5      	cmp	r5, r4
 800046e:	d903      	bls.n	8000478 <__aeabi_lmul+0x34>
 8000470:	2080      	movs	r0, #128	; 0x80
 8000472:	0240      	lsls	r0, r0, #9
 8000474:	4680      	mov	r8, r0
 8000476:	4441      	add	r1, r8
 8000478:	0c25      	lsrs	r5, r4, #16
 800047a:	186d      	adds	r5, r5, r1
 800047c:	4661      	mov	r1, ip
 800047e:	4359      	muls	r1, r3
 8000480:	437a      	muls	r2, r7
 8000482:	0430      	lsls	r0, r6, #16
 8000484:	1949      	adds	r1, r1, r5
 8000486:	0424      	lsls	r4, r4, #16
 8000488:	0c00      	lsrs	r0, r0, #16
 800048a:	1820      	adds	r0, r4, r0
 800048c:	1889      	adds	r1, r1, r2
 800048e:	bc80      	pop	{r7}
 8000490:	46b8      	mov	r8, r7
 8000492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000494 <__udivmoddi4>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	0004      	movs	r4, r0
 80004a2:	000d      	movs	r5, r1
 80004a4:	4692      	mov	sl, r2
 80004a6:	4699      	mov	r9, r3
 80004a8:	b083      	sub	sp, #12
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d830      	bhi.n	8000510 <__udivmoddi4+0x7c>
 80004ae:	d02d      	beq.n	800050c <__udivmoddi4+0x78>
 80004b0:	4649      	mov	r1, r9
 80004b2:	4650      	mov	r0, sl
 80004b4:	f000 f8ba 	bl	800062c <__clzdi2>
 80004b8:	0029      	movs	r1, r5
 80004ba:	0006      	movs	r6, r0
 80004bc:	0020      	movs	r0, r4
 80004be:	f000 f8b5 	bl	800062c <__clzdi2>
 80004c2:	1a33      	subs	r3, r6, r0
 80004c4:	4698      	mov	r8, r3
 80004c6:	3b20      	subs	r3, #32
 80004c8:	469b      	mov	fp, r3
 80004ca:	d433      	bmi.n	8000534 <__udivmoddi4+0xa0>
 80004cc:	465a      	mov	r2, fp
 80004ce:	4653      	mov	r3, sl
 80004d0:	4093      	lsls	r3, r2
 80004d2:	4642      	mov	r2, r8
 80004d4:	001f      	movs	r7, r3
 80004d6:	4653      	mov	r3, sl
 80004d8:	4093      	lsls	r3, r2
 80004da:	001e      	movs	r6, r3
 80004dc:	42af      	cmp	r7, r5
 80004de:	d83a      	bhi.n	8000556 <__udivmoddi4+0xc2>
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d100      	bne.n	80004e6 <__udivmoddi4+0x52>
 80004e4:	e078      	b.n	80005d8 <__udivmoddi4+0x144>
 80004e6:	465b      	mov	r3, fp
 80004e8:	1ba4      	subs	r4, r4, r6
 80004ea:	41bd      	sbcs	r5, r7
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	da00      	bge.n	80004f2 <__udivmoddi4+0x5e>
 80004f0:	e075      	b.n	80005de <__udivmoddi4+0x14a>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	465a      	mov	r2, fp
 80004fe:	4093      	lsls	r3, r2
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	4642      	mov	r2, r8
 8000506:	4093      	lsls	r3, r2
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	e028      	b.n	800055e <__udivmoddi4+0xca>
 800050c:	4282      	cmp	r2, r0
 800050e:	d9cf      	bls.n	80004b0 <__udivmoddi4+0x1c>
 8000510:	2200      	movs	r2, #0
 8000512:	2300      	movs	r3, #0
 8000514:	9200      	str	r2, [sp, #0]
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <__udivmoddi4+0x8e>
 800051e:	601c      	str	r4, [r3, #0]
 8000520:	605d      	str	r5, [r3, #4]
 8000522:	9800      	ldr	r0, [sp, #0]
 8000524:	9901      	ldr	r1, [sp, #4]
 8000526:	b003      	add	sp, #12
 8000528:	bcf0      	pop	{r4, r5, r6, r7}
 800052a:	46bb      	mov	fp, r7
 800052c:	46b2      	mov	sl, r6
 800052e:	46a9      	mov	r9, r5
 8000530:	46a0      	mov	r8, r4
 8000532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000534:	4642      	mov	r2, r8
 8000536:	2320      	movs	r3, #32
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	4652      	mov	r2, sl
 800053c:	40da      	lsrs	r2, r3
 800053e:	4641      	mov	r1, r8
 8000540:	0013      	movs	r3, r2
 8000542:	464a      	mov	r2, r9
 8000544:	408a      	lsls	r2, r1
 8000546:	0017      	movs	r7, r2
 8000548:	4642      	mov	r2, r8
 800054a:	431f      	orrs	r7, r3
 800054c:	4653      	mov	r3, sl
 800054e:	4093      	lsls	r3, r2
 8000550:	001e      	movs	r6, r3
 8000552:	42af      	cmp	r7, r5
 8000554:	d9c4      	bls.n	80004e0 <__udivmoddi4+0x4c>
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	4643      	mov	r3, r8
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0d9      	beq.n	8000518 <__udivmoddi4+0x84>
 8000564:	07fb      	lsls	r3, r7, #31
 8000566:	0872      	lsrs	r2, r6, #1
 8000568:	431a      	orrs	r2, r3
 800056a:	4646      	mov	r6, r8
 800056c:	087b      	lsrs	r3, r7, #1
 800056e:	e00e      	b.n	800058e <__udivmoddi4+0xfa>
 8000570:	42ab      	cmp	r3, r5
 8000572:	d101      	bne.n	8000578 <__udivmoddi4+0xe4>
 8000574:	42a2      	cmp	r2, r4
 8000576:	d80c      	bhi.n	8000592 <__udivmoddi4+0xfe>
 8000578:	1aa4      	subs	r4, r4, r2
 800057a:	419d      	sbcs	r5, r3
 800057c:	2001      	movs	r0, #1
 800057e:	1924      	adds	r4, r4, r4
 8000580:	416d      	adcs	r5, r5
 8000582:	2100      	movs	r1, #0
 8000584:	3e01      	subs	r6, #1
 8000586:	1824      	adds	r4, r4, r0
 8000588:	414d      	adcs	r5, r1
 800058a:	2e00      	cmp	r6, #0
 800058c:	d006      	beq.n	800059c <__udivmoddi4+0x108>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d9ee      	bls.n	8000570 <__udivmoddi4+0xdc>
 8000592:	3e01      	subs	r6, #1
 8000594:	1924      	adds	r4, r4, r4
 8000596:	416d      	adcs	r5, r5
 8000598:	2e00      	cmp	r6, #0
 800059a:	d1f8      	bne.n	800058e <__udivmoddi4+0xfa>
 800059c:	9800      	ldr	r0, [sp, #0]
 800059e:	9901      	ldr	r1, [sp, #4]
 80005a0:	465b      	mov	r3, fp
 80005a2:	1900      	adds	r0, r0, r4
 80005a4:	4169      	adcs	r1, r5
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db24      	blt.n	80005f4 <__udivmoddi4+0x160>
 80005aa:	002b      	movs	r3, r5
 80005ac:	465a      	mov	r2, fp
 80005ae:	4644      	mov	r4, r8
 80005b0:	40d3      	lsrs	r3, r2
 80005b2:	002a      	movs	r2, r5
 80005b4:	40e2      	lsrs	r2, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	465b      	mov	r3, fp
 80005ba:	0015      	movs	r5, r2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db2a      	blt.n	8000616 <__udivmoddi4+0x182>
 80005c0:	0026      	movs	r6, r4
 80005c2:	409e      	lsls	r6, r3
 80005c4:	0033      	movs	r3, r6
 80005c6:	0026      	movs	r6, r4
 80005c8:	4647      	mov	r7, r8
 80005ca:	40be      	lsls	r6, r7
 80005cc:	0032      	movs	r2, r6
 80005ce:	1a80      	subs	r0, r0, r2
 80005d0:	4199      	sbcs	r1, r3
 80005d2:	9000      	str	r0, [sp, #0]
 80005d4:	9101      	str	r1, [sp, #4]
 80005d6:	e79f      	b.n	8000518 <__udivmoddi4+0x84>
 80005d8:	42a3      	cmp	r3, r4
 80005da:	d8bc      	bhi.n	8000556 <__udivmoddi4+0xc2>
 80005dc:	e783      	b.n	80004e6 <__udivmoddi4+0x52>
 80005de:	4642      	mov	r2, r8
 80005e0:	2320      	movs	r3, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	2200      	movs	r2, #0
 80005e8:	9100      	str	r1, [sp, #0]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	2201      	movs	r2, #1
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	9201      	str	r2, [sp, #4]
 80005f2:	e786      	b.n	8000502 <__udivmoddi4+0x6e>
 80005f4:	4642      	mov	r2, r8
 80005f6:	2320      	movs	r3, #32
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	002a      	movs	r2, r5
 80005fc:	4646      	mov	r6, r8
 80005fe:	409a      	lsls	r2, r3
 8000600:	0023      	movs	r3, r4
 8000602:	40f3      	lsrs	r3, r6
 8000604:	4644      	mov	r4, r8
 8000606:	4313      	orrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	dad4      	bge.n	80005c0 <__udivmoddi4+0x12c>
 8000616:	4642      	mov	r2, r8
 8000618:	002f      	movs	r7, r5
 800061a:	2320      	movs	r3, #32
 800061c:	0026      	movs	r6, r4
 800061e:	4097      	lsls	r7, r2
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	40de      	lsrs	r6, r3
 8000624:	003b      	movs	r3, r7
 8000626:	4333      	orrs	r3, r6
 8000628:	e7cd      	b.n	80005c6 <__udivmoddi4+0x132>
 800062a:	46c0      	nop			; (mov r8, r8)

0800062c <__clzdi2>:
 800062c:	b510      	push	{r4, lr}
 800062e:	2900      	cmp	r1, #0
 8000630:	d103      	bne.n	800063a <__clzdi2+0xe>
 8000632:	f000 f807 	bl	8000644 <__clzsi2>
 8000636:	3020      	adds	r0, #32
 8000638:	e002      	b.n	8000640 <__clzdi2+0x14>
 800063a:	1c08      	adds	r0, r1, #0
 800063c:	f000 f802 	bl	8000644 <__clzsi2>
 8000640:	bd10      	pop	{r4, pc}
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <__clzsi2>:
 8000644:	211c      	movs	r1, #28
 8000646:	2301      	movs	r3, #1
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	4298      	cmp	r0, r3
 800064c:	d301      	bcc.n	8000652 <__clzsi2+0xe>
 800064e:	0c00      	lsrs	r0, r0, #16
 8000650:	3910      	subs	r1, #16
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	4298      	cmp	r0, r3
 8000656:	d301      	bcc.n	800065c <__clzsi2+0x18>
 8000658:	0a00      	lsrs	r0, r0, #8
 800065a:	3908      	subs	r1, #8
 800065c:	091b      	lsrs	r3, r3, #4
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0x22>
 8000662:	0900      	lsrs	r0, r0, #4
 8000664:	3904      	subs	r1, #4
 8000666:	a202      	add	r2, pc, #8	; (adr r2, 8000670 <__clzsi2+0x2c>)
 8000668:	5c10      	ldrb	r0, [r2, r0]
 800066a:	1840      	adds	r0, r0, r1
 800066c:	4770      	bx	lr
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	02020304 	.word	0x02020304
 8000674:	01010101 	.word	0x01010101
	...

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_DMA_Init+0x38>)
 8000688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_DMA_Init+0x38>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	639a      	str	r2, [r3, #56]	; 0x38
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_DMA_Init+0x38>)
 8000694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000696:	2201      	movs	r2, #1
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2009      	movs	r0, #9
 80006a4:	f006 fd42 	bl	800712c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006a8:	2009      	movs	r0, #9
 80006aa:	f006 fd54 	bl	8007156 <HAL_NVIC_EnableIRQ>

}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40021000 	.word	0x40021000

080006bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b08b      	sub	sp, #44	; 0x2c
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	2414      	movs	r4, #20
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2314      	movs	r3, #20
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f009 fae2 	bl	8009c96 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_GPIO_Init+0xb4>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_GPIO_Init+0xb4>)
 80006d8:	2104      	movs	r1, #4
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
 80006de:	4b24      	ldr	r3, [pc, #144]	; (8000770 <MX_GPIO_Init+0xb4>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e2:	2204      	movs	r2, #4
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ea:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_GPIO_Init+0xb4>)
 80006ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_GPIO_Init+0xb4>)
 80006f0:	2120      	movs	r1, #32
 80006f2:	430a      	orrs	r2, r1
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_GPIO_Init+0xb4>)
 80006f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fa:	2220      	movs	r2, #32
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_GPIO_Init+0xb4>)
 8000704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_GPIO_Init+0xb4>)
 8000708:	2101      	movs	r1, #1
 800070a:	430a      	orrs	r2, r1
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_GPIO_Init+0xb4>)
 8000710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000712:	2201      	movs	r2, #1
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_GPIO_Init+0xb4>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_GPIO_Init+0xb4>)
 8000720:	2102      	movs	r1, #2
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_GPIO_Init+0xb4>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072a:	2202      	movs	r2, #2
 800072c:	4013      	ands	r3, r2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	2200      	movs	r2, #0
 8000738:	2120      	movs	r1, #32
 800073a:	0018      	movs	r0, r3
 800073c:	f007 f94c 	bl	80079d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000740:	0021      	movs	r1, r4
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2220      	movs	r2, #32
 8000746:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2201      	movs	r2, #1
 800074c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2202      	movs	r2, #2
 8000758:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800075a:	187a      	adds	r2, r7, r1
 800075c:	23a0      	movs	r3, #160	; 0xa0
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	0011      	movs	r1, r2
 8000762:	0018      	movs	r0, r3
 8000764:	f006 ffd4 	bl	8007710 <HAL_GPIO_Init>

}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b00b      	add	sp, #44	; 0x2c
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	40021000 	.word	0x40021000

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f006 fb6c 	bl	8006e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f834 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000780:	f7ff ff9c 	bl	80006bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000784:	f000 faa0 	bl	8000cc8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000788:	f7ff ff7a 	bl	8000680 <MX_DMA_Init>
  MX_SPI2_Init();
 800078c:	f000 f8ae 	bl	80008ec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  WS2811_Init(&hspi2);
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <main+0x70>)
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fb30 	bl	8000df8 <WS2811_Init>

  WS2811FX_Init(1);	// Start 3 segments
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fd53 	bl	8001244 <WS2811FX_Init>

  WS2811FX_SetSpeed(0, 250);	// Speed of segment 0
 800079e:	21fa      	movs	r1, #250	; 0xfa
 80007a0:	2000      	movs	r0, #0
 80007a2:	f001 fcd3 	bl	800214c <WS2811FX_SetSpeed>
//  WS2811FX_SetColorRGB(0, 16,64,0);
//  WS2811FX_SetColorRGB(1, 0,32,64);
//  WS2811FX_SetColorRGB(2, 64,0,0);
//  WS2811FX_SetMode(0, FX_MODE_BLACK_TO_COLOR);	// Set mode segment 1

  WS2811FX_SetColorRGB(0, 16,64,0);
 80007a6:	2300      	movs	r3, #0
 80007a8:	2240      	movs	r2, #64	; 0x40
 80007aa:	2110      	movs	r1, #16
 80007ac:	2000      	movs	r0, #0
 80007ae:	f001 f9cb 	bl	8001b48 <WS2811FX_SetColorRGB>
  WS2811FX_SetColorRGB(1, 0,32,64);
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	2001      	movs	r0, #1
 80007ba:	f001 f9c5 	bl	8001b48 <WS2811FX_SetColorRGB>
  WS2811FX_SetColorRGB(2, 64,0,0);
 80007be:	2300      	movs	r3, #0
 80007c0:	2200      	movs	r2, #0
 80007c2:	2140      	movs	r1, #64	; 0x40
 80007c4:	2002      	movs	r0, #2
 80007c6:	f001 f9bf 	bl	8001b48 <WS2811FX_SetColorRGB>
  WS2811FX_SetMode(0, FX_MODE_COLOR_WIPE); 	// Set mode segment 2
 80007ca:	2108      	movs	r1, #8
 80007cc:	2000      	movs	r0, #0
 80007ce:	f001 f8ab 	bl	8001928 <WS2811FX_SetMode>

  WS2811FX_Start(0);	// Start segment 0
 80007d2:	2000      	movs	r0, #0
 80007d4:	f001 f96e 	bl	8001ab4 <WS2811FX_Start>
//  WS2811FX_Start(1);	// Start segment 1
//  WS2811FX_Start(2);	// Start segment 2
  HAL_Delay(200);
 80007d8:	20c8      	movs	r0, #200	; 0xc8
 80007da:	f006 fbc1 	bl	8006f60 <HAL_Delay>
//		  break;
//	  }


//	  WS2811FX_Start(0);	// Start segment 0
	  WS2811FX_Callback();	// FX effects calllback
 80007de:	f001 f835 	bl	800184c <WS2811FX_Callback>
 80007e2:	e7fc      	b.n	80007de <main+0x6a>
 80007e4:	2000058c 	.word	0x2000058c

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b0a1      	sub	sp, #132	; 0x84
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	2448      	movs	r4, #72	; 0x48
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2338      	movs	r3, #56	; 0x38
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f009 fa4c 	bl	8009c96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fe:	2338      	movs	r3, #56	; 0x38
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	2310      	movs	r3, #16
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f009 fa44 	bl	8009c96 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	0018      	movs	r0, r3
 8000812:	2334      	movs	r3, #52	; 0x34
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f009 fa3d 	bl	8009c96 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	0018      	movs	r0, r3
 8000822:	f007 f8f7 	bl	8007a14 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2202      	movs	r2, #2
 800082a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000834:	0021      	movs	r1, r4
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2240      	movs	r2, #64	; 0x40
 8000840:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2202      	movs	r2, #2
 8000846:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2202      	movs	r2, #2
 800084c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2208      	movs	r2, #8
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	0292      	lsls	r2, r2, #10
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	0492      	lsls	r2, r2, #18
 8000868:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	0592      	lsls	r2, r2, #22
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	187b      	adds	r3, r7, r1
 8000874:	0018      	movs	r0, r3
 8000876:	f007 f919 	bl	8007aac <HAL_RCC_OscConfig>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800087e:	f000 f82f 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	2138      	movs	r1, #56	; 0x38
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2207      	movs	r2, #7
 8000888:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2202      	movs	r2, #2
 800088e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2102      	movs	r1, #2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f007 fc23 	bl	80080ec <HAL_RCC_ClockConfig>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008aa:	f000 f819 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2202      	movs	r2, #2
 80008b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	0018      	movs	r0, r3
 80008be:	f007 fdbf 	bl	8008440 <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008c6:	f000 f80b 	bl	80008e0 <Error_Handler>
  }
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b021      	add	sp, #132	; 0x84
 80008d0:	bd90      	pop	{r4, r7, pc}

080008d2 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
	WS2811FX_SysTickCallback();	// FX effects software timers
 80008d6:	f000 ff85 	bl	80017e4 <WS2811FX_SysTickCallback>
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_SPI2_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <MX_SPI2_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_SPI2_Init+0x74>)
 80008f8:	2282      	movs	r2, #130	; 0x82
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_SPI2_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_SPI2_Init+0x74>)
 8000906:	22e0      	movs	r2, #224	; 0xe0
 8000908:	00d2      	lsls	r2, r2, #3
 800090a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_SPI2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_SPI2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_SPI2_Init+0x74>)
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_SPI2_Init+0x74>)
 8000922:	2210      	movs	r2, #16
 8000924:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_SPI2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_SPI2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_SPI2_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_SPI2_Init+0x74>)
 800093a:	2207      	movs	r2, #7
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_SPI2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_SPI2_Init+0x74>)
 8000946:	2208      	movs	r2, #8
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <MX_SPI2_Init+0x74>)
 800094c:	0018      	movs	r0, r3
 800094e:	f007 ff2f 	bl	80087b0 <HAL_SPI_Init>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000956:	f7ff ffc3 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000058c 	.word	0x2000058c
 8000964:	40003800 	.word	0x40003800

08000968 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b08b      	sub	sp, #44	; 0x2c
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	2414      	movs	r4, #20
 8000972:	193b      	adds	r3, r7, r4
 8000974:	0018      	movs	r0, r3
 8000976:	2314      	movs	r3, #20
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f009 f98b 	bl	8009c96 <memset>
  if(spiHandle->Instance==SPI2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a42      	ldr	r2, [pc, #264]	; (8000a90 <HAL_SPI_MspInit+0x128>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d000      	beq.n	800098c <HAL_SPI_MspInit+0x24>
 800098a:	e07d      	b.n	8000a88 <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800098c:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <HAL_SPI_MspInit+0x12c>)
 800098e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000990:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <HAL_SPI_MspInit+0x12c>)
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	01c9      	lsls	r1, r1, #7
 8000996:	430a      	orrs	r2, r1
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c
 800099a:	4b3e      	ldr	r3, [pc, #248]	; (8000a94 <HAL_SPI_MspInit+0x12c>)
 800099c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	01db      	lsls	r3, r3, #7
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <HAL_SPI_MspInit+0x12c>)
 80009aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ac:	4b39      	ldr	r3, [pc, #228]	; (8000a94 <HAL_SPI_MspInit+0x12c>)
 80009ae:	2102      	movs	r1, #2
 80009b0:	430a      	orrs	r2, r1
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34
 80009b4:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <HAL_SPI_MspInit+0x12c>)
 80009b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b8:	2202      	movs	r2, #2
 80009ba:	4013      	ands	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <HAL_SPI_MspInit+0x12c>)
 80009c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <HAL_SPI_MspInit+0x12c>)
 80009c6:	2101      	movs	r1, #1
 80009c8:	430a      	orrs	r2, r1
 80009ca:	635a      	str	r2, [r3, #52]	; 0x34
 80009cc:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <HAL_SPI_MspInit+0x12c>)
 80009ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d0:	2201      	movs	r2, #1
 80009d2:	4013      	ands	r3, r2
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PA10     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	00d2      	lsls	r2, r2, #3
 80009de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2202      	movs	r2, #2
 80009e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2205      	movs	r2, #5
 80009f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <HAL_SPI_MspInit+0x130>)
 80009fc:	0019      	movs	r1, r3
 80009fe:	0010      	movs	r0, r2
 8000a00:	f006 fe86 	bl	8007710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WSout_Pin;
 8000a04:	0021      	movs	r1, r4
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	00d2      	lsls	r2, r2, #3
 8000a0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2202      	movs	r2, #2
 8000a12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WSout_GPIO_Port, &GPIO_InitStruct);
 8000a26:	187a      	adds	r2, r7, r1
 8000a28:	23a0      	movs	r3, #160	; 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f006 fe6e 	bl	8007710 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a36:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <HAL_SPI_MspInit+0x138>)
 8000a38:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a3c:	2213      	movs	r2, #19
 8000a3e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a40:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a66:	22c0      	movs	r2, #192	; 0xc0
 8000a68:	0192      	lsls	r2, r2, #6
 8000a6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f006 fb8e 	bl	8007190 <HAL_DMA_Init>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8000a78:	f7ff ff32 	bl	80008e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a80:	655a      	str	r2, [r3, #84]	; 0x54
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_SPI_MspInit+0x134>)
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b00b      	add	sp, #44	; 0x2c
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	40003800 	.word	0x40003800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	50000400 	.word	0x50000400
 8000a9c:	200005f0 	.word	0x200005f0
 8000aa0:	40020008 	.word	0x40020008

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_MspInit+0x4c>)
 8000aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	2201      	movs	r2, #1
 8000abc:	4013      	ands	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0549      	lsls	r1, r1, #21
 8000acc:	430a      	orrs	r2, r1
 8000ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	055b      	lsls	r3, r3, #21
 8000ad8:	4013      	ands	r3, r2
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000ade:	23c0      	movs	r3, #192	; 0xc0
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f006 fa60 	bl	8006fa8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f006 fa06 	bl	8006f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8000b1c:	f7ff fed9 	bl	80008d2 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <DMA1_Channel1_IRQHandler+0x14>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f006 fca0 	bl	8007474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	200005f0 	.word	0x200005f0

08000b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	return 1;
 8000b44:	2301      	movs	r3, #1
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_kill>:

int _kill(int pid, int sig)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b56:	f009 f857 	bl	8009c08 <__errno>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	2216      	movs	r2, #22
 8000b5e:	601a      	str	r2, [r3, #0]
	return -1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	425b      	negs	r3, r3
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_exit>:

void _exit (int status)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b74:	2301      	movs	r3, #1
 8000b76:	425a      	negs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff ffe5 	bl	8000b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b82:	e7fe      	b.n	8000b82 <_exit+0x16>

08000b84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e00a      	b.n	8000bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b96:	e000      	b.n	8000b9a <_read+0x16>
 8000b98:	bf00      	nop
 8000b9a:	0001      	movs	r1, r0
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	b2ca      	uxtb	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf0      	blt.n	8000b96 <_read+0x12>
	}

return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b006      	add	sp, #24
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	e009      	b.n	8000be4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	e000      	b.n	8000bde <_write+0x20>
 8000bdc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbf1      	blt.n	8000bd0 <_write+0x12>
	}
	return len;
 8000bec:	687b      	ldr	r3, [r7, #4]
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b006      	add	sp, #24
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_close>:

int _close(int file)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	425b      	negs	r3, r3
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	0192      	lsls	r2, r2, #6
 8000c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_isatty>:

int _isatty(int file)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b004      	add	sp, #16
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f008 ffc2 	bl	8009c08 <__errno>
 8000c84:	0003      	movs	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	18d2      	adds	r2, r2, r3
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <_sbrk+0x64>)
 8000ca0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b006      	add	sp, #24
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20009000 	.word	0x20009000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	20000174 	.word	0x20000174
 8000cb8:	20000778 	.word	0x20000778

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ccc:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000cce:	4a24      	ldr	r2, [pc, #144]	; (8000d60 <MX_USART2_UART_Init+0x98>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000cd4:	22e1      	movs	r2, #225	; 0xe1
 8000cd6:	0252      	lsls	r2, r2, #9
 8000cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f008 f95a 	bl	8008fcc <HAL_UART_Init>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d1c:	f7ff fde0 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000d22:	2100      	movs	r1, #0
 8000d24:	0018      	movs	r0, r3
 8000d26:	f008 fe85 	bl	8009a34 <HAL_UARTEx_SetTxFifoThreshold>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d2e:	f7ff fdd7 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000d34:	2100      	movs	r1, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f008 febc 	bl	8009ab4 <HAL_UARTEx_SetRxFifoThreshold>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f7ff fdce 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <MX_USART2_UART_Init+0x94>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f008 fe3a 	bl	80099c0 <HAL_UARTEx_DisableFifoMode>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d50:	f7ff fdc6 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	2000064c 	.word	0x2000064c
 8000d60:	40004400 	.word	0x40004400

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b08b      	sub	sp, #44	; 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	2414      	movs	r4, #20
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f008 ff8d 	bl	8009c96 <memset>
  if(uartHandle->Instance==USART2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <HAL_UART_MspInit+0x8c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d130      	bne.n	8000de8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0289      	lsls	r1, r1, #10
 8000d90:	430a      	orrs	r2, r1
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000da8:	2101      	movs	r1, #1
 8000daa:	430a      	orrs	r2, r1
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x90>)
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	2201      	movs	r2, #1
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000dba:	0021      	movs	r1, r4
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2201      	movs	r2, #1
 8000dcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	187a      	adds	r2, r7, r1
 8000ddc:	23a0      	movs	r3, #160	; 0xa0
 8000dde:	05db      	lsls	r3, r3, #23
 8000de0:	0011      	movs	r1, r2
 8000de2:	0018      	movs	r0, r3
 8000de4:	f006 fc94 	bl	8007710 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b00b      	add	sp, #44	; 0x2c
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	40004400 	.word	0x40004400
 8000df4:	40021000 	.word	0x40021000

08000df8 <WS2811_Init>:
static uint8_t buffer[1024];
static uint16_t CurrentLed;
static uint8_t ResetSignal;

void WS2811_Init(SPI_HandleTypeDef * spi_handler)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	hspi_ws2811 = spi_handler;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <WS2811_Init+0x18>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	2000073c 	.word	0x2000073c

08000e14 <WS2811_SetDiodeColor>:

void WS2811_SetDiodeColor(int16_t diode_id, uint32_t color)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	1dbb      	adds	r3, r7, #6
 8000e20:	801a      	strh	r2, [r3, #0]
	if(diode_id >= WS2811_LEDS || diode_id < 0) return;
 8000e22:	1dbb      	adds	r3, r7, #6
 8000e24:	2200      	movs	r2, #0
 8000e26:	5e9b      	ldrsh	r3, [r3, r2]
 8000e28:	2b1f      	cmp	r3, #31
 8000e2a:	dc2c      	bgt.n	8000e86 <WS2811_SetDiodeColor+0x72>
 8000e2c:	1dbb      	adds	r3, r7, #6
 8000e2e:	2200      	movs	r2, #0
 8000e30:	5e9b      	ldrsh	r3, [r3, r2]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db27      	blt.n	8000e86 <WS2811_SetDiodeColor+0x72>
	ws2811_array[diode_id].red = ((color>>16)&0x000000FF);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	0c19      	lsrs	r1, r3, #16
 8000e3a:	1dbb      	adds	r3, r7, #6
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	5e9a      	ldrsh	r2, [r3, r2]
 8000e40:	b2c8      	uxtb	r0, r1
 8000e42:	4913      	ldr	r1, [pc, #76]	; (8000e90 <WS2811_SetDiodeColor+0x7c>)
 8000e44:	0013      	movs	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	189b      	adds	r3, r3, r2
 8000e4a:	1c02      	adds	r2, r0, #0
 8000e4c:	545a      	strb	r2, [r3, r1]
	ws2811_array[diode_id].green = ((color>>8)&0x000000FF);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	0a19      	lsrs	r1, r3, #8
 8000e52:	1dbb      	adds	r3, r7, #6
 8000e54:	2200      	movs	r2, #0
 8000e56:	5e9a      	ldrsh	r2, [r3, r2]
 8000e58:	b2c8      	uxtb	r0, r1
 8000e5a:	490d      	ldr	r1, [pc, #52]	; (8000e90 <WS2811_SetDiodeColor+0x7c>)
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	189b      	adds	r3, r3, r2
 8000e62:	18cb      	adds	r3, r1, r3
 8000e64:	3301      	adds	r3, #1
 8000e66:	1c02      	adds	r2, r0, #0
 8000e68:	701a      	strb	r2, [r3, #0]
	ws2811_array[diode_id].blue = (color&0x000000FF);
 8000e6a:	1dbb      	adds	r3, r7, #6
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	5e9a      	ldrsh	r2, [r3, r2]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2d8      	uxtb	r0, r3
 8000e74:	4906      	ldr	r1, [pc, #24]	; (8000e90 <WS2811_SetDiodeColor+0x7c>)
 8000e76:	0013      	movs	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	189b      	adds	r3, r3, r2
 8000e7c:	18cb      	adds	r3, r1, r3
 8000e7e:	3302      	adds	r3, #2
 8000e80:	1c02      	adds	r2, r0, #0
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e000      	b.n	8000e88 <WS2811_SetDiodeColor+0x74>
	if(diode_id >= WS2811_LEDS || diode_id < 0) return;
 8000e86:	46c0      	nop			; (mov r8, r8)
}
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	200006dc 	.word	0x200006dc

08000e94 <WS2811_SetDiodeColorStruct>:

void WS2811_SetDiodeColorStruct(int16_t diode_id, ws2811_color color)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	003b      	movs	r3, r7
 8000e9e:	6019      	str	r1, [r3, #0]
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	801a      	strh	r2, [r3, #0]
	if(diode_id >= WS2811_LEDS || diode_id < 0) return;
 8000ea4:	1dbb      	adds	r3, r7, #6
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	5e9b      	ldrsh	r3, [r3, r2]
 8000eaa:	2b1f      	cmp	r3, #31
 8000eac:	dc13      	bgt.n	8000ed6 <WS2811_SetDiodeColorStruct+0x42>
 8000eae:	1dbb      	adds	r3, r7, #6
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	5e9b      	ldrsh	r3, [r3, r2]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0e      	blt.n	8000ed6 <WS2811_SetDiodeColorStruct+0x42>
	ws2811_array[diode_id] = color;
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	2200      	movs	r2, #0
 8000ebc:	5e9a      	ldrsh	r2, [r3, r2]
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <WS2811_SetDiodeColorStruct+0x4c>)
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	189b      	adds	r3, r3, r2
 8000ec6:	003a      	movs	r2, r7
 8000ec8:	18cb      	adds	r3, r1, r3
 8000eca:	0011      	movs	r1, r2
 8000ecc:	2203      	movs	r2, #3
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f008 fed8 	bl	8009c84 <memcpy>
 8000ed4:	e000      	b.n	8000ed8 <WS2811_SetDiodeColorStruct+0x44>
	if(diode_id >= WS2811_LEDS || diode_id < 0) return;
 8000ed6:	46c0      	nop			; (mov r8, r8)
}
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	200006dc 	.word	0x200006dc

08000ee4 <WS2811_SetDiodeRGB>:

void WS2811_SetDiodeRGB(int16_t diode_id, uint8_t R, uint8_t G, uint8_t B)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	0005      	movs	r5, r0
 8000eec:	000c      	movs	r4, r1
 8000eee:	0010      	movs	r0, r2
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	1dbb      	adds	r3, r7, #6
 8000ef4:	1c2a      	adds	r2, r5, #0
 8000ef6:	801a      	strh	r2, [r3, #0]
 8000ef8:	1d7b      	adds	r3, r7, #5
 8000efa:	1c22      	adds	r2, r4, #0
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	1c02      	adds	r2, r0, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	1cfb      	adds	r3, r7, #3
 8000f06:	1c0a      	adds	r2, r1, #0
 8000f08:	701a      	strb	r2, [r3, #0]
	if(diode_id >= WS2811_LEDS || diode_id < 0) return;
 8000f0a:	1dbb      	adds	r3, r7, #6
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	5e9b      	ldrsh	r3, [r3, r2]
 8000f10:	2b1f      	cmp	r3, #31
 8000f12:	dc27      	bgt.n	8000f64 <WS2811_SetDiodeRGB+0x80>
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	2200      	movs	r2, #0
 8000f18:	5e9b      	ldrsh	r3, [r3, r2]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db22      	blt.n	8000f64 <WS2811_SetDiodeRGB+0x80>
	ws2811_array[diode_id].red = R;
 8000f1e:	1dbb      	adds	r3, r7, #6
 8000f20:	2200      	movs	r2, #0
 8000f22:	5e9a      	ldrsh	r2, [r3, r2]
 8000f24:	4911      	ldr	r1, [pc, #68]	; (8000f6c <WS2811_SetDiodeRGB+0x88>)
 8000f26:	0013      	movs	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	189b      	adds	r3, r3, r2
 8000f2c:	1d7a      	adds	r2, r7, #5
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	545a      	strb	r2, [r3, r1]
	ws2811_array[diode_id].green = G;
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	2200      	movs	r2, #0
 8000f36:	5e9a      	ldrsh	r2, [r3, r2]
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <WS2811_SetDiodeRGB+0x88>)
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	18cb      	adds	r3, r1, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	1d3a      	adds	r2, r7, #4
 8000f46:	7812      	ldrb	r2, [r2, #0]
 8000f48:	701a      	strb	r2, [r3, #0]
	ws2811_array[diode_id].blue = B;
 8000f4a:	1dbb      	adds	r3, r7, #6
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	5e9a      	ldrsh	r2, [r3, r2]
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <WS2811_SetDiodeRGB+0x88>)
 8000f52:	0013      	movs	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	18cb      	adds	r3, r1, r3
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	1cfa      	adds	r2, r7, #3
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	e000      	b.n	8000f66 <WS2811_SetDiodeRGB+0x82>
	if(diode_id >= WS2811_LEDS || diode_id < 0) return;
 8000f64:	46c0      	nop			; (mov r8, r8)
}
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f6c:	200006dc 	.word	0x200006dc

08000f70 <WS2811_GetColor>:

uint32_t WS2811_GetColor(int16_t diode_id)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	801a      	strh	r2, [r3, #0]
	uint32_t color = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
	color |= ((ws2811_array[diode_id].red&0xFF)<<16);
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	2200      	movs	r2, #0
 8000f84:	5e9a      	ldrsh	r2, [r3, r2]
 8000f86:	4916      	ldr	r1, [pc, #88]	; (8000fe0 <WS2811_GetColor+0x70>)
 8000f88:	0013      	movs	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	189b      	adds	r3, r3, r2
 8000f8e:	5c5b      	ldrb	r3, [r3, r1]
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	001a      	movs	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
	color |= ((ws2811_array[diode_id].green&0xFF)<<8);
 8000f9a:	1dbb      	adds	r3, r7, #6
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	5e9a      	ldrsh	r2, [r3, r2]
 8000fa0:	490f      	ldr	r1, [pc, #60]	; (8000fe0 <WS2811_GetColor+0x70>)
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	189b      	adds	r3, r3, r2
 8000fa8:	18cb      	adds	r3, r1, r3
 8000faa:	3301      	adds	r3, #1
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
	color |= (ws2811_array[diode_id].blue&0xFF);
 8000fb8:	1dbb      	adds	r3, r7, #6
 8000fba:	2200      	movs	r2, #0
 8000fbc:	5e9a      	ldrsh	r2, [r3, r2]
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <WS2811_GetColor+0x70>)
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	189b      	adds	r3, r3, r2
 8000fc6:	18cb      	adds	r3, r1, r3
 8000fc8:	3302      	adds	r3, #2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
	return color;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b004      	add	sp, #16
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	200006dc 	.word	0x200006dc

08000fe4 <WS2811_GetPixels>:

uint8_t* WS2811_GetPixels(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	return (uint8_t*)ws2811_array;
 8000fe8:	4b01      	ldr	r3, [pc, #4]	; (8000ff0 <WS2811_GetPixels+0xc>)
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200006dc 	.word	0x200006dc

08000ff4 <WS2811_Refresh>:
		}
	}
}

void WS2811_Refresh()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	CurrentLed = 0;
 8000ffa:	4b7b      	ldr	r3, [pc, #492]	; (80011e8 <WS2811_Refresh+0x1f4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	801a      	strh	r2, [r3, #0]
	ResetSignal = 0;
 8001000:	4b7a      	ldr	r3, [pc, #488]	; (80011ec <WS2811_Refresh+0x1f8>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]

	//for(uint8_t i = 0; i < 180; i++) buffer[i] = 0x00;

	for(CurrentLed = 0; CurrentLed < 32; CurrentLed++){
 8001006:	4b78      	ldr	r3, [pc, #480]	; (80011e8 <WS2811_Refresh+0x1f4>)
 8001008:	2200      	movs	r2, #0
 800100a:	801a      	strh	r2, [r3, #0]
 800100c:	e0cf      	b.n	80011ae <WS2811_Refresh+0x1ba>
		//GREEN
		for(int8_t k=7; k>=0; k--)
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	2207      	movs	r2, #7
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e03b      	b.n	800108e <WS2811_Refresh+0x9a>
		{
			if((ws2811_array[CurrentLed].green & (1<<k)) == 0) {
 8001016:	4b74      	ldr	r3, [pc, #464]	; (80011e8 <WS2811_Refresh+0x1f4>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	0019      	movs	r1, r3
 800101c:	4a74      	ldr	r2, [pc, #464]	; (80011f0 <WS2811_Refresh+0x1fc>)
 800101e:	000b      	movs	r3, r1
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	185b      	adds	r3, r3, r1
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	3301      	adds	r3, #1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	001a      	movs	r2, r3
 800102c:	1dfb      	adds	r3, r7, #7
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	411a      	asrs	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	2201      	movs	r2, #1
 8001038:	4013      	ands	r3, r2
 800103a:	d110      	bne.n	800105e <WS2811_Refresh+0x6a>
				buffer[240+k+(CurrentLed*24)] = zero;
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	33f0      	adds	r3, #240	; 0xf0
 8001044:	001a      	movs	r2, r3
 8001046:	4b68      	ldr	r3, [pc, #416]	; (80011e8 <WS2811_Refresh+0x1f4>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	0019      	movs	r1, r3
 800104c:	000b      	movs	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	185b      	adds	r3, r3, r1
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	4a67      	ldr	r2, [pc, #412]	; (80011f4 <WS2811_Refresh+0x200>)
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	54d1      	strb	r1, [r2, r3]
 800105c:	e00f      	b.n	800107e <WS2811_Refresh+0x8a>
			}
			else
				buffer[240+k+(CurrentLed*24)] = one;
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25b      	sxtb	r3, r3
 8001064:	33f0      	adds	r3, #240	; 0xf0
 8001066:	001a      	movs	r2, r3
 8001068:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <WS2811_Refresh+0x1f4>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	0019      	movs	r1, r3
 800106e:	000b      	movs	r3, r1
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	185b      	adds	r3, r3, r1
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	18d3      	adds	r3, r2, r3
 8001078:	4a5e      	ldr	r2, [pc, #376]	; (80011f4 <WS2811_Refresh+0x200>)
 800107a:	21fc      	movs	r1, #252	; 0xfc
 800107c:	54d1      	strb	r1, [r2, r3]
		for(int8_t k=7; k>=0; k--)
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3b01      	subs	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b7f      	cmp	r3, #127	; 0x7f
 8001094:	d9bf      	bls.n	8001016 <WS2811_Refresh+0x22>
		}

		//RED
		for(int8_t k=7; k>=0; k--)
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	2207      	movs	r2, #7
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e039      	b.n	8001112 <WS2811_Refresh+0x11e>
		{
			if((ws2811_array[CurrentLed].red & (1<<k)) == 0) {
 800109e:	4b52      	ldr	r3, [pc, #328]	; (80011e8 <WS2811_Refresh+0x1f4>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	0019      	movs	r1, r3
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <WS2811_Refresh+0x1fc>)
 80010a6:	000b      	movs	r3, r1
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	185b      	adds	r3, r3, r1
 80010ac:	5c9b      	ldrb	r3, [r3, r2]
 80010ae:	001a      	movs	r2, r3
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	411a      	asrs	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	d110      	bne.n	80010e2 <WS2811_Refresh+0xee>
				buffer[240+8+k+(CurrentLed*24)] = zero;
 80010c0:	1dbb      	adds	r3, r7, #6
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	33f8      	adds	r3, #248	; 0xf8
 80010c8:	001a      	movs	r2, r3
 80010ca:	4b47      	ldr	r3, [pc, #284]	; (80011e8 <WS2811_Refresh+0x1f4>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	0019      	movs	r1, r3
 80010d0:	000b      	movs	r3, r1
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	185b      	adds	r3, r3, r1
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	18d3      	adds	r3, r2, r3
 80010da:	4a46      	ldr	r2, [pc, #280]	; (80011f4 <WS2811_Refresh+0x200>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	54d1      	strb	r1, [r2, r3]
 80010e0:	e00f      	b.n	8001102 <WS2811_Refresh+0x10e>
			}
			else
				buffer[240+8+k+(CurrentLed*24)] = one;
 80010e2:	1dbb      	adds	r3, r7, #6
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	33f8      	adds	r3, #248	; 0xf8
 80010ea:	001a      	movs	r2, r3
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <WS2811_Refresh+0x1f4>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	0019      	movs	r1, r3
 80010f2:	000b      	movs	r3, r1
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	185b      	adds	r3, r3, r1
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	18d3      	adds	r3, r2, r3
 80010fc:	4a3d      	ldr	r2, [pc, #244]	; (80011f4 <WS2811_Refresh+0x200>)
 80010fe:	21fc      	movs	r1, #252	; 0xfc
 8001100:	54d1      	strb	r1, [r2, r3]
		for(int8_t k=7; k>=0; k--)
 8001102:	1dbb      	adds	r3, r7, #6
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	3b01      	subs	r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	1dbb      	adds	r3, r7, #6
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	1dbb      	adds	r3, r7, #6
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b7f      	cmp	r3, #127	; 0x7f
 8001118:	d9c1      	bls.n	800109e <WS2811_Refresh+0xaa>
		}

		//BLUE
		for(int8_t k=7; k>=0; k--)
 800111a:	1d7b      	adds	r3, r7, #5
 800111c:	2207      	movs	r2, #7
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e03b      	b.n	800119a <WS2811_Refresh+0x1a6>
		{
			if((ws2811_array[CurrentLed].blue & (1<<k)) == 0) {
 8001122:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <WS2811_Refresh+0x1f4>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	0019      	movs	r1, r3
 8001128:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <WS2811_Refresh+0x1fc>)
 800112a:	000b      	movs	r3, r1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	185b      	adds	r3, r3, r1
 8001130:	18d3      	adds	r3, r2, r3
 8001132:	3302      	adds	r3, #2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	001a      	movs	r2, r3
 8001138:	1d7b      	adds	r3, r7, #5
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	411a      	asrs	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	d110      	bne.n	800116a <WS2811_Refresh+0x176>
				buffer[240+16+k+(CurrentLed*24)] = zero;
 8001148:	1d7b      	adds	r3, r7, #5
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b25b      	sxtb	r3, r3
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	32ff      	adds	r2, #255	; 0xff
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <WS2811_Refresh+0x1f4>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	0019      	movs	r1, r3
 8001158:	000b      	movs	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	185b      	adds	r3, r3, r1
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <WS2811_Refresh+0x200>)
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	54d1      	strb	r1, [r2, r3]
 8001168:	e00f      	b.n	800118a <WS2811_Refresh+0x196>
			}
			else
				buffer[240+16+k+(CurrentLed*24)] = one;
 800116a:	1d7b      	adds	r3, r7, #5
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b25b      	sxtb	r3, r3
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	32ff      	adds	r2, #255	; 0xff
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <WS2811_Refresh+0x1f4>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	0019      	movs	r1, r3
 800117a:	000b      	movs	r3, r1
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	185b      	adds	r3, r3, r1
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	18d3      	adds	r3, r2, r3
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <WS2811_Refresh+0x200>)
 8001186:	21fc      	movs	r1, #252	; 0xfc
 8001188:	54d1      	strb	r1, [r2, r3]
		for(int8_t k=7; k>=0; k--)
 800118a:	1d7b      	adds	r3, r7, #5
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	1d7b      	adds	r3, r7, #5
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	1d7b      	adds	r3, r7, #5
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b7f      	cmp	r3, #127	; 0x7f
 80011a0:	d9bf      	bls.n	8001122 <WS2811_Refresh+0x12e>
	for(CurrentLed = 0; CurrentLed < 32; CurrentLed++){
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <WS2811_Refresh+0x1f4>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <WS2811_Refresh+0x1f4>)
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <WS2811_Refresh+0x1f4>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	2b1f      	cmp	r3, #31
 80011b4:	d800      	bhi.n	80011b8 <WS2811_Refresh+0x1c4>
 80011b6:	e72a      	b.n	800100e <WS2811_Refresh+0x1a>
		}
	}

	HAL_SPI_Transmit_DMA(hspi_ws2811, buffer, 240+32*3*8); // Additional 3 for reset signal
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <WS2811_Refresh+0x204>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	22fc      	movs	r2, #252	; 0xfc
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <WS2811_Refresh+0x200>)
 80011c2:	0018      	movs	r0, r3
 80011c4:	f007 fbac 	bl	8008920 <HAL_SPI_Transmit_DMA>
	while(HAL_DMA_STATE_READY != HAL_DMA_GetState(hspi_ws2811->hdmatx));
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <WS2811_Refresh+0x204>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	0018      	movs	r0, r3
 80011d2:	f006 fa01 	bl	80075d8 <HAL_DMA_GetState>
 80011d6:	0003      	movs	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d1f6      	bne.n	80011ca <WS2811_Refresh+0x1d6>
	//for(uint8_t i = 0; i < 48; i++) buffer[i] = 0x00;

	//HAL_SPI_Transmit_DMA(hspi_ws2811, buffer, 96); // Additional 3 for reset signal
	//while(HAL_DMA_STATE_READY != HAL_DMA_GetState(hspi_ws2811->hdmatx));

}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	20000578 	.word	0x20000578
 80011ec:	2000057a 	.word	0x2000057a
 80011f0:	200006dc 	.word	0x200006dc
 80011f4:	20000178 	.word	0x20000178
 80011f8:	2000073c 	.word	0x2000073c

080011fc <HAL_SPI_TxCpltCallback>:
//		}
//	}
//}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	if(hspi == hspi_ws2811)
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_SPI_TxCpltCallback+0x24>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	429a      	cmp	r2, r3
 800120c:	d104      	bne.n	8001218 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_SPI_DMAStop(hspi_ws2811);
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_SPI_TxCpltCallback+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	0018      	movs	r0, r3
 8001214:	f007 fc8a 	bl	8008b2c <HAL_SPI_DMAStop>
//				}
//				CurrentLed++;
//			}
		}

}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000073c 	.word	0x2000073c

08001224 <sine8>:
  150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
  182,184,186,188,191,193,195,197,199,202,204,206,209,211,213,215,
  218,220,223,225,227,230,232,235,237,240,242,245,247,250,252,255};

uint8_t sine8(uint8_t x)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	0002      	movs	r2, r0
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	701a      	strb	r2, [r3, #0]
	return _sineTable[x];
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4a02      	ldr	r2, [pc, #8]	; (8001240 <sine8+0x1c>)
 8001236:	5cd3      	ldrb	r3, [r2, r3]
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}
 8001240:	0800adc0 	.word	0x0800adc0

08001244 <WS2811FX_Init>:
    mode_tricolor_chase,
    mode_icu
};

FX_STATUS WS2811FX_Init(uint16_t Segments)
{
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	0002      	movs	r2, r0
 800124c:	1dbb      	adds	r3, r7, #6
 800124e:	801a      	strh	r2, [r3, #0]
	if(Segments == 0) return FX_ERROR;
 8001250:	1dbb      	adds	r3, r7, #6
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <WS2811FX_Init+0x18>
 8001258:	2301      	movs	r3, #1
 800125a:	e2ba      	b.n	80017d2 <WS2811FX_Init+0x58e>
	if(Segments > (WS2811_LEDS / 2))
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	2b10      	cmp	r3, #16
 8001262:	d905      	bls.n	8001270 <WS2811FX_Init+0x2c>
	{
		if(Segments > WS2811_LEDS)
 8001264:	1dbb      	adds	r3, r7, #6
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	2b20      	cmp	r3, #32
 800126a:	d901      	bls.n	8001270 <WS2811FX_Init+0x2c>
		{
			return FX_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e2b0      	b.n	80017d2 <WS2811FX_Init+0x58e>
		}
	}

	uint16_t div = 0;
 8001270:	2316      	movs	r3, #22
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	2200      	movs	r2, #0
 8001276:	801a      	strh	r2, [r3, #0]
	ws2811fx_s *SegmentsTmp = NULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]

	SegmentsTmp = calloc(Segments, sizeof(ws2811fx_s));	// Assign the space for new segments
 800127c:	1dbb      	adds	r3, r7, #6
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	2138      	movs	r1, #56	; 0x38
 8001282:	0018      	movs	r0, r3
 8001284:	f008 fcb6 	bl	8009bf4 <calloc>
 8001288:	0003      	movs	r3, r0
 800128a:	60fb      	str	r3, [r7, #12]

	if(SegmentsTmp == NULL) return FX_ERROR;	// If assigning failed
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <WS2811FX_Init+0x52>
 8001292:	2301      	movs	r3, #1
 8001294:	e29d      	b.n	80017d2 <WS2811FX_Init+0x58e>

	if(Ws28b11_Segments == NULL)
 8001296:	4bb9      	ldr	r3, [pc, #740]	; (800157c <WS2811FX_Init+0x338>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d000      	beq.n	80012a0 <WS2811FX_Init+0x5c>
 800129e:	e075      	b.n	800138c <WS2811FX_Init+0x148>
	{
		mSegments = Segments;
 80012a0:	4bb7      	ldr	r3, [pc, #732]	; (8001580 <WS2811FX_Init+0x33c>)
 80012a2:	1dba      	adds	r2, r7, #6
 80012a4:	8812      	ldrh	r2, [r2, #0]
 80012a6:	801a      	strh	r2, [r3, #0]

		for(uint16_t i = 0; i < mSegments; i++)
 80012a8:	2314      	movs	r3, #20
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]
 80012b0:	e064      	b.n	800137c <WS2811FX_Init+0x138>
		{
			SegmentsTmp[i].Speed = DEFAULT_SPEED;
 80012b2:	2414      	movs	r4, #20
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	881a      	ldrh	r2, [r3, #0]
 80012b8:	0013      	movs	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	001a      	movs	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	189b      	adds	r3, r3, r2
 80012c6:	2296      	movs	r2, #150	; 0x96
 80012c8:	829a      	strh	r2, [r3, #20]
			SegmentsTmp[i].Running = DEFAULT_MODE;
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	881a      	ldrh	r2, [r3, #0]
 80012ce:	0013      	movs	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	001a      	movs	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	189b      	adds	r3, r3, r2
 80012dc:	7a1a      	ldrb	r2, [r3, #8]
 80012de:	2101      	movs	r1, #1
 80012e0:	438a      	bics	r2, r1
 80012e2:	721a      	strb	r2, [r3, #8]

			SegmentsTmp[i].IdStart = div;
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	881a      	ldrh	r2, [r3, #0]
 80012e8:	0013      	movs	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	001a      	movs	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	189b      	adds	r3, r3, r2
 80012f6:	2516      	movs	r5, #22
 80012f8:	197a      	adds	r2, r7, r5
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	809a      	strh	r2, [r3, #4]
			div += ((WS2811_LEDS + 1) / Segments) - 1;
 80012fe:	1dbb      	adds	r3, r7, #6
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	0019      	movs	r1, r3
 8001304:	2021      	movs	r0, #33	; 0x21
 8001306:	f7fe ff91 	bl	800022c <__divsi3>
 800130a:	0003      	movs	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	0029      	movs	r1, r5
 8001310:	187b      	adds	r3, r7, r1
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	b29a      	uxth	r2, r3
 8001318:	187b      	adds	r3, r7, r1
 800131a:	3a01      	subs	r2, #1
 800131c:	801a      	strh	r2, [r3, #0]
			SegmentsTmp[i].IdStop = div;
 800131e:	193b      	adds	r3, r7, r4
 8001320:	881a      	ldrh	r2, [r3, #0]
 8001322:	0013      	movs	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	001a      	movs	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	189b      	adds	r3, r3, r2
 8001330:	187a      	adds	r2, r7, r1
 8001332:	8812      	ldrh	r2, [r2, #0]
 8001334:	80da      	strh	r2, [r3, #6]
			if(SegmentsTmp[i].IdStop >= WS2811_LEDS) SegmentsTmp[i].IdStop = WS2811_LEDS - 1;
 8001336:	193b      	adds	r3, r7, r4
 8001338:	881a      	ldrh	r2, [r3, #0]
 800133a:	0013      	movs	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	001a      	movs	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	189b      	adds	r3, r3, r2
 8001348:	88db      	ldrh	r3, [r3, #6]
 800134a:	2b1f      	cmp	r3, #31
 800134c:	d90a      	bls.n	8001364 <WS2811FX_Init+0x120>
 800134e:	193b      	adds	r3, r7, r4
 8001350:	881a      	ldrh	r2, [r3, #0]
 8001352:	0013      	movs	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	001a      	movs	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	189b      	adds	r3, r3, r2
 8001360:	221f      	movs	r2, #31
 8001362:	80da      	strh	r2, [r3, #6]
			div++;
 8001364:	2116      	movs	r1, #22
 8001366:	187b      	adds	r3, r7, r1
 8001368:	881a      	ldrh	r2, [r3, #0]
 800136a:	187b      	adds	r3, r7, r1
 800136c:	3201      	adds	r2, #1
 800136e:	801a      	strh	r2, [r3, #0]
		for(uint16_t i = 0; i < mSegments; i++)
 8001370:	2114      	movs	r1, #20
 8001372:	187b      	adds	r3, r7, r1
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	187b      	adds	r3, r7, r1
 8001378:	3201      	adds	r2, #1
 800137a:	801a      	strh	r2, [r3, #0]
 800137c:	4b80      	ldr	r3, [pc, #512]	; (8001580 <WS2811FX_Init+0x33c>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	2214      	movs	r2, #20
 8001382:	18ba      	adds	r2, r7, r2
 8001384:	8812      	ldrh	r2, [r2, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d393      	bcc.n	80012b2 <WS2811FX_Init+0x6e>
 800138a:	e219      	b.n	80017c0 <WS2811FX_Init+0x57c>
		}
	}
	else	// Ws28b11_Segments was before initialized
	{
		for(uint16_t i = 0; i < (Segments>mSegments?mSegments:Segments); i++)
 800138c:	2312      	movs	r3, #18
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	2200      	movs	r2, #0
 8001392:	801a      	strh	r2, [r3, #0]
 8001394:	e1af      	b.n	80016f6 <WS2811FX_Init+0x4b2>
		{
			SegmentsTmp[i].ModeDelay = Ws28b11_Segments[i].ModeDelay;
 8001396:	4b79      	ldr	r3, [pc, #484]	; (800157c <WS2811FX_Init+0x338>)
 8001398:	6819      	ldr	r1, [r3, #0]
 800139a:	2412      	movs	r4, #18
 800139c:	193b      	adds	r3, r7, r4
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	0013      	movs	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	1a9b      	subs	r3, r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	18ca      	adds	r2, r1, r3
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	8819      	ldrh	r1, [r3, #0]
 80013ae:	000b      	movs	r3, r1
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	1a5b      	subs	r3, r3, r1
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	0019      	movs	r1, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	185b      	adds	r3, r3, r1
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	601a      	str	r2, [r3, #0]

			SegmentsTmp[i].IdStart = div;
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	881a      	ldrh	r2, [r3, #0]
 80013c4:	0013      	movs	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	001a      	movs	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	189b      	adds	r3, r3, r2
 80013d2:	2516      	movs	r5, #22
 80013d4:	197a      	adds	r2, r7, r5
 80013d6:	8812      	ldrh	r2, [r2, #0]
 80013d8:	809a      	strh	r2, [r3, #4]
			div += ((WS2811_LEDS + 1) / Segments) - 1;
 80013da:	1dbb      	adds	r3, r7, #6
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	0019      	movs	r1, r3
 80013e0:	2021      	movs	r0, #33	; 0x21
 80013e2:	f7fe ff23 	bl	800022c <__divsi3>
 80013e6:	0003      	movs	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	0029      	movs	r1, r5
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	18d3      	adds	r3, r2, r3
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	3a01      	subs	r2, #1
 80013f8:	801a      	strh	r2, [r3, #0]
			SegmentsTmp[i].IdStop = div;
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	881a      	ldrh	r2, [r3, #0]
 80013fe:	0013      	movs	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	001a      	movs	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	189b      	adds	r3, r3, r2
 800140c:	187a      	adds	r2, r7, r1
 800140e:	8812      	ldrh	r2, [r2, #0]
 8001410:	80da      	strh	r2, [r3, #6]
			if(SegmentsTmp[i].IdStop >= WS2811_LEDS) Ws28b11_Segments[i].IdStop = WS2811_LEDS - 1;
 8001412:	193b      	adds	r3, r7, r4
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	0013      	movs	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	1a9b      	subs	r3, r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	001a      	movs	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	189b      	adds	r3, r3, r2
 8001424:	88db      	ldrh	r3, [r3, #6]
 8001426:	2b1f      	cmp	r3, #31
 8001428:	d90a      	bls.n	8001440 <WS2811FX_Init+0x1fc>
 800142a:	4b54      	ldr	r3, [pc, #336]	; (800157c <WS2811FX_Init+0x338>)
 800142c:	6819      	ldr	r1, [r3, #0]
 800142e:	193b      	adds	r3, r7, r4
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	0013      	movs	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	18cb      	adds	r3, r1, r3
 800143c:	221f      	movs	r2, #31
 800143e:	80da      	strh	r2, [r3, #6]
			div++;
 8001440:	2116      	movs	r1, #22
 8001442:	187b      	adds	r3, r7, r1
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	187b      	adds	r3, r7, r1
 8001448:	3201      	adds	r2, #1
 800144a:	801a      	strh	r2, [r3, #0]

			SegmentsTmp[i].Running = Ws28b11_Segments[i].Running;
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <WS2811FX_Init+0x338>)
 800144e:	6819      	ldr	r1, [r3, #0]
 8001450:	2412      	movs	r4, #18
 8001452:	193b      	adds	r3, r7, r4
 8001454:	881a      	ldrh	r2, [r3, #0]
 8001456:	0013      	movs	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	18c9      	adds	r1, r1, r3
 8001460:	193b      	adds	r3, r7, r4
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	0013      	movs	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	001a      	movs	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	189b      	adds	r3, r3, r2
 8001472:	7a0a      	ldrb	r2, [r1, #8]
 8001474:	07d2      	lsls	r2, r2, #31
 8001476:	0fd2      	lsrs	r2, r2, #31
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	2101      	movs	r1, #1
 800147c:	400a      	ands	r2, r1
 800147e:	0010      	movs	r0, r2
 8001480:	7a1a      	ldrb	r2, [r3, #8]
 8001482:	2101      	movs	r1, #1
 8001484:	438a      	bics	r2, r1
 8001486:	1c11      	adds	r1, r2, #0
 8001488:	1c02      	adds	r2, r0, #0
 800148a:	430a      	orrs	r2, r1
 800148c:	721a      	strb	r2, [r3, #8]
			SegmentsTmp[i].ActualMode = Ws28b11_Segments[i].ActualMode;
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <WS2811FX_Init+0x338>)
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	193b      	adds	r3, r7, r4
 8001494:	881a      	ldrh	r2, [r3, #0]
 8001496:	0013      	movs	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	18c9      	adds	r1, r1, r3
 80014a0:	193b      	adds	r3, r7, r4
 80014a2:	881a      	ldrh	r2, [r3, #0]
 80014a4:	0013      	movs	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	001a      	movs	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	189b      	adds	r3, r3, r2
 80014b2:	7a4a      	ldrb	r2, [r1, #9]
 80014b4:	725a      	strb	r2, [r3, #9]
			SegmentsTmp[i].Reverse = Ws28b11_Segments[i].Reverse;
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <WS2811FX_Init+0x338>)
 80014b8:	6819      	ldr	r1, [r3, #0]
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	0013      	movs	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	18c9      	adds	r1, r1, r3
 80014c8:	193b      	adds	r3, r7, r4
 80014ca:	881a      	ldrh	r2, [r3, #0]
 80014cc:	0013      	movs	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	001a      	movs	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	189b      	adds	r3, r3, r2
 80014da:	7a8a      	ldrb	r2, [r1, #10]
 80014dc:	07d2      	lsls	r2, r2, #31
 80014de:	0fd2      	lsrs	r2, r2, #31
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	2101      	movs	r1, #1
 80014e4:	400a      	ands	r2, r1
 80014e6:	0010      	movs	r0, r2
 80014e8:	7a9a      	ldrb	r2, [r3, #10]
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	1c11      	adds	r1, r2, #0
 80014f0:	1c02      	adds	r2, r0, #0
 80014f2:	430a      	orrs	r2, r1
 80014f4:	729a      	strb	r2, [r3, #10]
			SegmentsTmp[i].CounterModeCall = Ws28b11_Segments[i].CounterModeCall;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <WS2811FX_Init+0x338>)
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	0020      	movs	r0, r4
 80014fc:	183b      	adds	r3, r7, r0
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	0013      	movs	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	18ca      	adds	r2, r1, r3
 800150a:	183b      	adds	r3, r7, r0
 800150c:	8819      	ldrh	r1, [r3, #0]
 800150e:	000b      	movs	r3, r1
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a5b      	subs	r3, r3, r1
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	0019      	movs	r1, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	185b      	adds	r3, r3, r1
 800151c:	68d2      	ldr	r2, [r2, #12]
 800151e:	60da      	str	r2, [r3, #12]
			SegmentsTmp[i].CounterModeStep = Ws28b11_Segments[i].CounterModeStep;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <WS2811FX_Init+0x338>)
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	183b      	adds	r3, r7, r0
 8001526:	881a      	ldrh	r2, [r3, #0]
 8001528:	0013      	movs	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	18ca      	adds	r2, r1, r3
 8001532:	183b      	adds	r3, r7, r0
 8001534:	8819      	ldrh	r1, [r3, #0]
 8001536:	000b      	movs	r3, r1
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	1a5b      	subs	r3, r3, r1
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	0019      	movs	r1, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	185b      	adds	r3, r3, r1
 8001544:	6912      	ldr	r2, [r2, #16]
 8001546:	611a      	str	r2, [r3, #16]
			SegmentsTmp[i].Speed = Ws28b11_Segments[i].Speed;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <WS2811FX_Init+0x338>)
 800154a:	6819      	ldr	r1, [r3, #0]
 800154c:	183b      	adds	r3, r7, r0
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	0013      	movs	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	18c9      	adds	r1, r1, r3
 800155a:	183b      	adds	r3, r7, r0
 800155c:	881a      	ldrh	r2, [r3, #0]
 800155e:	0013      	movs	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	001a      	movs	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	189b      	adds	r3, r3, r2
 800156c:	8a8a      	ldrh	r2, [r1, #20]
 800156e:	829a      	strh	r2, [r3, #20]
			for(uint8_t j = 0; j < NUM_COLORS; j++)
 8001570:	2311      	movs	r3, #17
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e052      	b.n	8001620 <WS2811FX_Init+0x3dc>
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	2000057c 	.word	0x2000057c
 8001580:	20000740 	.word	0x20000740
			{
				SegmentsTmp[i].ModeColor[j] = Ws28b11_Segments[i].ModeColor[j];
 8001584:	4b95      	ldr	r3, [pc, #596]	; (80017dc <WS2811FX_Init+0x598>)
 8001586:	6819      	ldr	r1, [r3, #0]
 8001588:	2512      	movs	r5, #18
 800158a:	197b      	adds	r3, r7, r5
 800158c:	881a      	ldrh	r2, [r3, #0]
 800158e:	0013      	movs	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	18c9      	adds	r1, r1, r3
 8001598:	2411      	movs	r4, #17
 800159a:	193b      	adds	r3, r7, r4
 800159c:	7818      	ldrb	r0, [r3, #0]
 800159e:	197b      	adds	r3, r7, r5
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	0013      	movs	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	001a      	movs	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	189b      	adds	r3, r3, r2
 80015b0:	193a      	adds	r2, r7, r4
 80015b2:	7812      	ldrb	r2, [r2, #0]
 80015b4:	3006      	adds	r0, #6
 80015b6:	0080      	lsls	r0, r0, #2
 80015b8:	5841      	ldr	r1, [r0, r1]
 80015ba:	3206      	adds	r2, #6
 80015bc:	0092      	lsls	r2, r2, #2
 80015be:	50d1      	str	r1, [r2, r3]
				SegmentsTmp[i].ModeColor_w[j] = Ws28b11_Segments[i].ModeColor_w[j];
 80015c0:	4b86      	ldr	r3, [pc, #536]	; (80017dc <WS2811FX_Init+0x598>)
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	002e      	movs	r6, r5
 80015c6:	197b      	adds	r3, r7, r5
 80015c8:	881a      	ldrh	r2, [r3, #0]
 80015ca:	0013      	movs	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	18c8      	adds	r0, r1, r3
 80015d4:	0025      	movs	r5, r4
 80015d6:	193b      	adds	r3, r7, r4
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	19bb      	adds	r3, r7, r6
 80015dc:	8819      	ldrh	r1, [r3, #0]
 80015de:	000b      	movs	r3, r1
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	1a5b      	subs	r3, r3, r1
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	0019      	movs	r1, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	185c      	adds	r4, r3, r1
 80015ec:	002e      	movs	r6, r5
 80015ee:	197b      	adds	r3, r7, r5
 80015f0:	7819      	ldrb	r1, [r3, #0]
 80015f2:	2520      	movs	r5, #32
 80015f4:	000b      	movs	r3, r1
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	185b      	adds	r3, r3, r1
 80015fa:	18e3      	adds	r3, r4, r3
 80015fc:	1959      	adds	r1, r3, r5
 80015fe:	2420      	movs	r4, #32
 8001600:	0013      	movs	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	189b      	adds	r3, r3, r2
 8001606:	18c3      	adds	r3, r0, r3
 8001608:	191b      	adds	r3, r3, r4
 800160a:	1d08      	adds	r0, r1, #4
 800160c:	3304      	adds	r3, #4
 800160e:	2203      	movs	r2, #3
 8001610:	0019      	movs	r1, r3
 8001612:	f008 fb37 	bl	8009c84 <memcpy>
			for(uint8_t j = 0; j < NUM_COLORS; j++)
 8001616:	19bb      	adds	r3, r7, r6
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	19bb      	adds	r3, r7, r6
 800161c:	3201      	adds	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	2311      	movs	r3, #17
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d9ac      	bls.n	8001584 <WS2811FX_Init+0x340>
			}
			SegmentsTmp[i].AuxParam = Ws28b11_Segments[i].AuxParam;
 800162a:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <WS2811FX_Init+0x598>)
 800162c:	6819      	ldr	r1, [r3, #0]
 800162e:	2512      	movs	r5, #18
 8001630:	197b      	adds	r3, r7, r5
 8001632:	881a      	ldrh	r2, [r3, #0]
 8001634:	0013      	movs	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	18c9      	adds	r1, r1, r3
 800163e:	197b      	adds	r3, r7, r5
 8001640:	881a      	ldrh	r2, [r3, #0]
 8001642:	0013      	movs	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	001a      	movs	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	189b      	adds	r3, r3, r2
 8001650:	222d      	movs	r2, #45	; 0x2d
 8001652:	5c89      	ldrb	r1, [r1, r2]
 8001654:	222d      	movs	r2, #45	; 0x2d
 8001656:	5499      	strb	r1, [r3, r2]
			SegmentsTmp[i].AuxParam16b = Ws28b11_Segments[i].AuxParam16b;
 8001658:	4b60      	ldr	r3, [pc, #384]	; (80017dc <WS2811FX_Init+0x598>)
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	197b      	adds	r3, r7, r5
 800165e:	881a      	ldrh	r2, [r3, #0]
 8001660:	0013      	movs	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	18c9      	adds	r1, r1, r3
 800166a:	197b      	adds	r3, r7, r5
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	0013      	movs	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	001a      	movs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	189b      	adds	r3, r3, r2
 800167c:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 800167e:	85da      	strh	r2, [r3, #46]	; 0x2e
			SegmentsTmp[i].Cycle = Ws28b11_Segments[i].Cycle;
 8001680:	4b56      	ldr	r3, [pc, #344]	; (80017dc <WS2811FX_Init+0x598>)
 8001682:	6819      	ldr	r1, [r3, #0]
 8001684:	197b      	adds	r3, r7, r5
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	0013      	movs	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	18c9      	adds	r1, r1, r3
 8001692:	197b      	adds	r3, r7, r5
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	0013      	movs	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	001a      	movs	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	2230      	movs	r2, #48	; 0x30
 80016a6:	5c8a      	ldrb	r2, [r1, r2]
 80016a8:	07d2      	lsls	r2, r2, #31
 80016aa:	0fd2      	lsrs	r2, r2, #31
 80016ac:	b2d1      	uxtb	r1, r2
 80016ae:	2230      	movs	r2, #48	; 0x30
 80016b0:	2001      	movs	r0, #1
 80016b2:	4001      	ands	r1, r0
 80016b4:	000c      	movs	r4, r1
 80016b6:	5c99      	ldrb	r1, [r3, r2]
 80016b8:	2001      	movs	r0, #1
 80016ba:	4381      	bics	r1, r0
 80016bc:	1c08      	adds	r0, r1, #0
 80016be:	1c21      	adds	r1, r4, #0
 80016c0:	4301      	orrs	r1, r0
 80016c2:	5499      	strb	r1, [r3, r2]
			SegmentsTmp[i].mModeCallback = Ws28b11_Segments[i].mModeCallback;
 80016c4:	4b45      	ldr	r3, [pc, #276]	; (80017dc <WS2811FX_Init+0x598>)
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	197b      	adds	r3, r7, r5
 80016ca:	881a      	ldrh	r2, [r3, #0]
 80016cc:	0013      	movs	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	18ca      	adds	r2, r1, r3
 80016d6:	197b      	adds	r3, r7, r5
 80016d8:	8819      	ldrh	r1, [r3, #0]
 80016da:	000b      	movs	r3, r1
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	1a5b      	subs	r3, r3, r1
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	0019      	movs	r1, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	185b      	adds	r3, r3, r1
 80016e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
		for(uint16_t i = 0; i < (Segments>mSegments?mSegments:Segments); i++)
 80016ec:	197b      	adds	r3, r7, r5
 80016ee:	881a      	ldrh	r2, [r3, #0]
 80016f0:	197b      	adds	r3, r7, r5
 80016f2:	3201      	adds	r2, #1
 80016f4:	801a      	strh	r2, [r3, #0]
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <WS2811FX_Init+0x59c>)
 80016f8:	881a      	ldrh	r2, [r3, #0]
 80016fa:	1dbb      	adds	r3, r7, #6
 80016fc:	1c10      	adds	r0, r2, #0
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	b299      	uxth	r1, r3
 8001702:	b282      	uxth	r2, r0
 8001704:	4291      	cmp	r1, r2
 8001706:	d900      	bls.n	800170a <WS2811FX_Init+0x4c6>
 8001708:	1c03      	adds	r3, r0, #0
 800170a:	b29b      	uxth	r3, r3
 800170c:	2212      	movs	r2, #18
 800170e:	18ba      	adds	r2, r7, r2
 8001710:	8812      	ldrh	r2, [r2, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d200      	bcs.n	8001718 <WS2811FX_Init+0x4d4>
 8001716:	e63e      	b.n	8001396 <WS2811FX_Init+0x152>
		}

		if(Segments > mSegments) // Add new Segment
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <WS2811FX_Init+0x59c>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	1dba      	adds	r2, r7, #6
 800171e:	8812      	ldrh	r2, [r2, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d949      	bls.n	80017b8 <WS2811FX_Init+0x574>
		{
			SegmentsTmp[Segments - 1].Speed = DEFAULT_SPEED;
 8001724:	1dbb      	adds	r3, r7, #6
 8001726:	881a      	ldrh	r2, [r3, #0]
 8001728:	0013      	movs	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	3b38      	subs	r3, #56	; 0x38
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	18d3      	adds	r3, r2, r3
 8001736:	2296      	movs	r2, #150	; 0x96
 8001738:	829a      	strh	r2, [r3, #20]
			SegmentsTmp[Segments - 1].ActualMode = DEFAULT_MODE;
 800173a:	1dbb      	adds	r3, r7, #6
 800173c:	881a      	ldrh	r2, [r3, #0]
 800173e:	0013      	movs	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	1a9b      	subs	r3, r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	3b38      	subs	r3, #56	; 0x38
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	18d3      	adds	r3, r2, r3
 800174c:	2200      	movs	r2, #0
 800174e:	725a      	strb	r2, [r3, #9]
			SegmentsTmp[Segments - 1].Running = 0; // Sany new segment is stopped by default
 8001750:	1dbb      	adds	r3, r7, #6
 8001752:	881a      	ldrh	r2, [r3, #0]
 8001754:	0013      	movs	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	3b38      	subs	r3, #56	; 0x38
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	18d3      	adds	r3, r2, r3
 8001762:	7a1a      	ldrb	r2, [r3, #8]
 8001764:	2101      	movs	r1, #1
 8001766:	438a      	bics	r2, r1
 8001768:	721a      	strb	r2, [r3, #8]

			SegmentsTmp[Segments - 1].IdStart = div;
 800176a:	1dbb      	adds	r3, r7, #6
 800176c:	881a      	ldrh	r2, [r3, #0]
 800176e:	0013      	movs	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	3b38      	subs	r3, #56	; 0x38
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	18d3      	adds	r3, r2, r3
 800177c:	2416      	movs	r4, #22
 800177e:	193a      	adds	r2, r7, r4
 8001780:	8812      	ldrh	r2, [r2, #0]
 8001782:	809a      	strh	r2, [r3, #4]
			div += ((WS2811_LEDS + 1) / Segments) - 1;
 8001784:	1dbb      	adds	r3, r7, #6
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	0019      	movs	r1, r3
 800178a:	2021      	movs	r0, #33	; 0x21
 800178c:	f7fe fd4e 	bl	800022c <__divsi3>
 8001790:	0003      	movs	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	193b      	adds	r3, r7, r4
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	18d3      	adds	r3, r2, r3
 800179a:	b29a      	uxth	r2, r3
 800179c:	193b      	adds	r3, r7, r4
 800179e:	3a01      	subs	r2, #1
 80017a0:	801a      	strh	r2, [r3, #0]
			SegmentsTmp[Segments - 1].IdStop = WS2811_LEDS - 1;
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	881a      	ldrh	r2, [r3, #0]
 80017a6:	0013      	movs	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	3b38      	subs	r3, #56	; 0x38
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	18d3      	adds	r3, r2, r3
 80017b4:	221f      	movs	r2, #31
 80017b6:	80da      	strh	r2, [r3, #6]
		}

		mSegments = Segments;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <WS2811FX_Init+0x59c>)
 80017ba:	1dba      	adds	r2, r7, #6
 80017bc:	8812      	ldrh	r2, [r2, #0]
 80017be:	801a      	strh	r2, [r3, #0]
	}

	free(Ws28b11_Segments);	// Free previous array if reinit
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <WS2811FX_Init+0x598>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0018      	movs	r0, r3
 80017c6:	f008 fa53 	bl	8009c70 <free>
	Ws28b11_Segments = SegmentsTmp;
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <WS2811FX_Init+0x598>)
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	601a      	str	r2, [r3, #0]
	return FX_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b007      	add	sp, #28
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	2000057c 	.word	0x2000057c
 80017e0:	20000740 	.word	0x20000740

080017e4 <WS2811FX_SysTickCallback>:
	}
	return FX_ERROR;
}

void WS2811FX_SysTickCallback(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i < mSegments; i++)
 80017ea:	1dbb      	adds	r3, r7, #6
 80017ec:	2200      	movs	r2, #0
 80017ee:	801a      	strh	r2, [r3, #0]
 80017f0:	e01c      	b.n	800182c <WS2811FX_SysTickCallback+0x48>
		if(Ws28b11_Segments[i].ModeDelay > 0) Ws28b11_Segments[i].ModeDelay--;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <WS2811FX_SysTickCallback+0x60>)
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	1dbb      	adds	r3, r7, #6
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	0013      	movs	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	18cb      	adds	r3, r1, r3
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <WS2811FX_SysTickCallback+0x3e>
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <WS2811FX_SysTickCallback+0x60>)
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	1dbb      	adds	r3, r7, #6
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	0013      	movs	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	18cb      	adds	r3, r1, r3
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	3a01      	subs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < mSegments; i++)
 8001822:	1dbb      	adds	r3, r7, #6
 8001824:	881a      	ldrh	r2, [r3, #0]
 8001826:	1dbb      	adds	r3, r7, #6
 8001828:	3201      	adds	r2, #1
 800182a:	801a      	strh	r2, [r3, #0]
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <WS2811FX_SysTickCallback+0x64>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	1dba      	adds	r2, r7, #6
 8001832:	8812      	ldrh	r2, [r2, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d3dc      	bcc.n	80017f2 <WS2811FX_SysTickCallback+0xe>
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	2000057c 	.word	0x2000057c
 8001848:	20000740 	.word	0x20000740

0800184c <WS2811FX_Callback>:

void WS2811FX_Callback()
 {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	static uint8_t trig = 0;;
  if(mRunning || mTriggered)
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <WS2811FX_Callback+0xc4>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <WS2811FX_Callback+0x16>
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <WS2811FX_Callback+0xc8>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d051      	beq.n	8001906 <WS2811FX_Callback+0xba>
  {
	  for(uint16_t i = 0; i < mSegments; i++)
 8001862:	1dbb      	adds	r3, r7, #6
 8001864:	2200      	movs	r2, #0
 8001866:	801a      	strh	r2, [r3, #0]
 8001868:	e03e      	b.n	80018e8 <WS2811FX_Callback+0x9c>
	  {
		  if(Ws28b11_Segments[i].ModeDelay == 0)
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <WS2811FX_Callback+0xcc>)
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	1dbb      	adds	r3, r7, #6
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	0013      	movs	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	18cb      	adds	r3, r1, r3
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d12d      	bne.n	80018de <WS2811FX_Callback+0x92>
		  {
			  if(Ws28b11_Segments[i].Running)
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <WS2811FX_Callback+0xcc>)
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	1dbb      	adds	r3, r7, #6
 8001888:	881a      	ldrh	r2, [r3, #0]
 800188a:	0013      	movs	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	18cb      	adds	r3, r1, r3
 8001894:	7a1b      	ldrb	r3, [r3, #8]
 8001896:	2201      	movs	r2, #1
 8001898:	4013      	ands	r3, r2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01e      	beq.n	80018de <WS2811FX_Callback+0x92>
			  {
				  mActualSegment = i;
 80018a0:	1dbb      	adds	r3, r7, #6
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <WS2811FX_Callback+0xd0>)
 80018a8:	701a      	strb	r2, [r3, #0]
				  Ws28b11_Segments[i].mModeCallback();
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <WS2811FX_Callback+0xcc>)
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	1dbb      	adds	r3, r7, #6
 80018b0:	881a      	ldrh	r2, [r3, #0]
 80018b2:	0013      	movs	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	18cb      	adds	r3, r1, r3
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	4798      	blx	r3
				  Ws28b11_Segments[i].CounterModeCall++;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <WS2811FX_Callback+0xcc>)
 80018c2:	6819      	ldr	r1, [r3, #0]
 80018c4:	1dbb      	adds	r3, r7, #6
 80018c6:	881a      	ldrh	r2, [r3, #0]
 80018c8:	0013      	movs	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	18cb      	adds	r3, r1, r3
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	3201      	adds	r2, #1
 80018d6:	60da      	str	r2, [r3, #12]
				  trig = 1;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <WS2811FX_Callback+0xd4>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
	  for(uint16_t i = 0; i < mSegments; i++)
 80018de:	1dbb      	adds	r3, r7, #6
 80018e0:	881a      	ldrh	r2, [r3, #0]
 80018e2:	1dbb      	adds	r3, r7, #6
 80018e4:	3201      	adds	r2, #1
 80018e6:	801a      	strh	r2, [r3, #0]
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <WS2811FX_Callback+0xd8>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	1dba      	adds	r2, r7, #6
 80018ee:	8812      	ldrh	r2, [r2, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d3ba      	bcc.n	800186a <WS2811FX_Callback+0x1e>
			  }
		  }
	  }
	  if(trig)
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <WS2811FX_Callback+0xd4>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <WS2811FX_Callback+0xba>
	  {
		  WS2811_Refresh();
 80018fc:	f7ff fb7a 	bl	8000ff4 <WS2811_Refresh>
		  trig = 0;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <WS2811FX_Callback+0xd4>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
	  }
  }
}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	20000742 	.word	0x20000742
 8001914:	20000761 	.word	0x20000761
 8001918:	2000057c 	.word	0x2000057c
 800191c:	20000754 	.word	0x20000754
 8001920:	20000580 	.word	0x20000580
 8001924:	20000740 	.word	0x20000740

08001928 <WS2811FX_SetMode>:

FX_STATUS WS2811FX_SetMode(uint16_t Segment, fx_mode Mode)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	0002      	movs	r2, r0
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	801a      	strh	r2, [r3, #0]
 8001934:	1d7b      	adds	r3, r7, #5
 8001936:	1c0a      	adds	r2, r1, #0
 8001938:	701a      	strb	r2, [r3, #0]
	if(Segment >= mSegments) return FX_ERROR;
 800193a:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <WS2811FX_SetMode+0x178>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	1dba      	adds	r2, r7, #6
 8001940:	8812      	ldrh	r2, [r2, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d301      	bcc.n	800194a <WS2811FX_SetMode+0x22>
 8001946:	2301      	movs	r3, #1
 8001948:	e0a6      	b.n	8001a98 <WS2811FX_SetMode+0x170>
	Ws28b11_Segments[Segment].CounterModeCall = 0;
 800194a:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <WS2811FX_SetMode+0x17c>)
 800194c:	6819      	ldr	r1, [r3, #0]
 800194e:	1dbb      	adds	r3, r7, #6
 8001950:	881a      	ldrh	r2, [r3, #0]
 8001952:	0013      	movs	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	18cb      	adds	r3, r1, r3
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
	Ws28b11_Segments[Segment].CounterModeStep = 0;
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <WS2811FX_SetMode+0x17c>)
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	1dbb      	adds	r3, r7, #6
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	0013      	movs	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	18cb      	adds	r3, r1, r3
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
	Ws28b11_Segments[Segment].ActualMode = Mode;
 8001976:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <WS2811FX_SetMode+0x17c>)
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	1dbb      	adds	r3, r7, #6
 800197c:	881a      	ldrh	r2, [r3, #0]
 800197e:	0013      	movs	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	18cb      	adds	r3, r1, r3
 8001988:	1d7a      	adds	r2, r7, #5
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	725a      	strb	r2, [r3, #9]
	Ws28b11_Segments[Segment].mModeCallback = mMode[Mode];
 800198e:	1d7b      	adds	r3, r7, #5
 8001990:	7819      	ldrb	r1, [r3, #0]
 8001992:	4b44      	ldr	r3, [pc, #272]	; (8001aa4 <WS2811FX_SetMode+0x17c>)
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	1dbb      	adds	r3, r7, #6
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	0013      	movs	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	18c3      	adds	r3, r0, r3
 80019a4:	4a40      	ldr	r2, [pc, #256]	; (8001aa8 <WS2811FX_SetMode+0x180>)
 80019a6:	0089      	lsls	r1, r1, #2
 80019a8:	588a      	ldr	r2, [r1, r2]
 80019aa:	635a      	str	r2, [r3, #52]	; 0x34
	for(uint8_t i = 0; i < NUM_COLORS; i++)
 80019ac:	230f      	movs	r3, #15
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	e06a      	b.n	8001a8c <WS2811FX_SetMode+0x164>
	{
		Ws28b11_Segments[Segment].ModeColor[i] = mColor[i];
 80019b6:	250f      	movs	r5, #15
 80019b8:	197b      	adds	r3, r7, r5
 80019ba:	7818      	ldrb	r0, [r3, #0]
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <WS2811FX_SetMode+0x17c>)
 80019be:	6819      	ldr	r1, [r3, #0]
 80019c0:	1dbb      	adds	r3, r7, #6
 80019c2:	881a      	ldrh	r2, [r3, #0]
 80019c4:	0013      	movs	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	18cb      	adds	r3, r1, r3
 80019ce:	197a      	adds	r2, r7, r5
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	4936      	ldr	r1, [pc, #216]	; (8001aac <WS2811FX_SetMode+0x184>)
 80019d4:	0080      	lsls	r0, r0, #2
 80019d6:	5841      	ldr	r1, [r0, r1]
 80019d8:	3206      	adds	r2, #6
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	50d1      	str	r1, [r2, r3]
		Ws28b11_Segments[Segment].ModeColor_w[i].red = mColor_w[i].red;
 80019de:	197b      	adds	r3, r7, r5
 80019e0:	7819      	ldrb	r1, [r3, #0]
 80019e2:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <WS2811FX_SetMode+0x17c>)
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	1dbb      	adds	r3, r7, #6
 80019e8:	881a      	ldrh	r2, [r3, #0]
 80019ea:	0013      	movs	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	18c0      	adds	r0, r0, r3
 80019f4:	197b      	adds	r3, r7, r5
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	4c2d      	ldr	r4, [pc, #180]	; (8001ab0 <WS2811FX_SetMode+0x188>)
 80019fa:	000b      	movs	r3, r1
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	185b      	adds	r3, r3, r1
 8001a00:	5d1c      	ldrb	r4, [r3, r4]
 8001a02:	2124      	movs	r1, #36	; 0x24
 8001a04:	0013      	movs	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	18c3      	adds	r3, r0, r3
 8001a0c:	185b      	adds	r3, r3, r1
 8001a0e:	1c22      	adds	r2, r4, #0
 8001a10:	701a      	strb	r2, [r3, #0]
		Ws28b11_Segments[Segment].ModeColor_w[i].green = mColor_w[i].green;
 8001a12:	197b      	adds	r3, r7, r5
 8001a14:	7819      	ldrb	r1, [r3, #0]
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <WS2811FX_SetMode+0x17c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	1dbb      	adds	r3, r7, #6
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	0013      	movs	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	18c0      	adds	r0, r0, r3
 8001a28:	197b      	adds	r3, r7, r5
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	4c20      	ldr	r4, [pc, #128]	; (8001ab0 <WS2811FX_SetMode+0x188>)
 8001a2e:	000b      	movs	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	185b      	adds	r3, r3, r1
 8001a34:	18e3      	adds	r3, r4, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	781c      	ldrb	r4, [r3, #0]
 8001a3a:	2125      	movs	r1, #37	; 0x25
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	189b      	adds	r3, r3, r2
 8001a42:	18c3      	adds	r3, r0, r3
 8001a44:	185b      	adds	r3, r3, r1
 8001a46:	1c22      	adds	r2, r4, #0
 8001a48:	701a      	strb	r2, [r3, #0]
		Ws28b11_Segments[Segment].ModeColor_w[i].blue = mColor_w[i].blue;
 8001a4a:	197b      	adds	r3, r7, r5
 8001a4c:	7819      	ldrb	r1, [r3, #0]
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <WS2811FX_SetMode+0x17c>)
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	1dbb      	adds	r3, r7, #6
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	0013      	movs	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	18c0      	adds	r0, r0, r3
 8001a60:	197b      	adds	r3, r7, r5
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	4c12      	ldr	r4, [pc, #72]	; (8001ab0 <WS2811FX_SetMode+0x188>)
 8001a66:	000b      	movs	r3, r1
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	185b      	adds	r3, r3, r1
 8001a6c:	18e3      	adds	r3, r4, r3
 8001a6e:	3302      	adds	r3, #2
 8001a70:	781c      	ldrb	r4, [r3, #0]
 8001a72:	2126      	movs	r1, #38	; 0x26
 8001a74:	0013      	movs	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	189b      	adds	r3, r3, r2
 8001a7a:	18c3      	adds	r3, r0, r3
 8001a7c:	185b      	adds	r3, r3, r1
 8001a7e:	1c22      	adds	r2, r4, #0
 8001a80:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_COLORS; i++)
 8001a82:	197b      	adds	r3, r7, r5
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	197b      	adds	r3, r7, r5
 8001a88:	3201      	adds	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d98f      	bls.n	80019b6 <WS2811FX_SetMode+0x8e>
	}
	return FX_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b004      	add	sp, #16
 8001a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa0:	20000740 	.word	0x20000740
 8001aa4:	2000057c 	.word	0x2000057c
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	20000744 	.word	0x20000744
 8001ab0:	20000758 	.word	0x20000758

08001ab4 <WS2811FX_Start>:
	*Stop = Ws28b11_Segments[Segment].IdStop;
	return FX_OK;
}

FX_STATUS WS2811FX_Start(uint16_t Segment)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	0002      	movs	r2, r0
 8001abc:	1dbb      	adds	r3, r7, #6
 8001abe:	801a      	strh	r2, [r3, #0]
	if(Segment >= mSegments) return FX_ERROR;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <WS2811FX_Start+0x88>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	1dba      	adds	r2, r7, #6
 8001ac6:	8812      	ldrh	r2, [r2, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d301      	bcc.n	8001ad0 <WS2811FX_Start+0x1c>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e031      	b.n	8001b34 <WS2811FX_Start+0x80>
	Ws28b11_Segments[Segment].CounterModeCall = 0;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <WS2811FX_Start+0x8c>)
 8001ad2:	6819      	ldr	r1, [r3, #0]
 8001ad4:	1dbb      	adds	r3, r7, #6
 8001ad6:	881a      	ldrh	r2, [r3, #0]
 8001ad8:	0013      	movs	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	18cb      	adds	r3, r1, r3
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
	Ws28b11_Segments[Segment].CounterModeStep = 0;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <WS2811FX_Start+0x8c>)
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	1dbb      	adds	r3, r7, #6
 8001aec:	881a      	ldrh	r2, [r3, #0]
 8001aee:	0013      	movs	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	18cb      	adds	r3, r1, r3
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
	Ws28b11_Segments[Segment].ModeDelay = 0;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <WS2811FX_Start+0x8c>)
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	1dbb      	adds	r3, r7, #6
 8001b02:	881a      	ldrh	r2, [r3, #0]
 8001b04:	0013      	movs	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	18cb      	adds	r3, r1, r3
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
	Ws28b11_Segments[Segment].Running = 1;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <WS2811FX_Start+0x8c>)
 8001b14:	6819      	ldr	r1, [r3, #0]
 8001b16:	1dbb      	adds	r3, r7, #6
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	18cb      	adds	r3, r1, r3
 8001b24:	7a1a      	ldrb	r2, [r3, #8]
 8001b26:	2101      	movs	r1, #1
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	721a      	strb	r2, [r3, #8]
	mRunning = 1;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <WS2811FX_Start+0x90>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
	return FX_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000740 	.word	0x20000740
 8001b40:	2000057c 	.word	0x2000057c
 8001b44:	20000742 	.word	0x20000742

08001b48 <WS2811FX_SetColorRGB>:
	mColor_w[id].green = c.green;
	mColor_w[id].blue = c.blue;
}

void WS2811FX_SetColorRGB(uint8_t id, uint8_t r, uint8_t g, uint8_t b)
{
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	0005      	movs	r5, r0
 8001b50:	000c      	movs	r4, r1
 8001b52:	0010      	movs	r0, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	1c2a      	adds	r2, r5, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	1dbb      	adds	r3, r7, #6
 8001b5e:	1c22      	adds	r2, r4, #0
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	1d7b      	adds	r3, r7, #5
 8001b64:	1c02      	adds	r2, r0, #0
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	1c0a      	adds	r2, r1, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
	mColor[id] = ((r<<16)|(g<<8)|b);
 8001b6e:	1dbb      	adds	r3, r7, #6
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	1d7b      	adds	r3, r7, #5
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	0011      	movs	r1, r2
 8001b84:	1dfb      	adds	r3, r7, #7
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <WS2811FX_SetColorRGB+0x8c>)
 8001b8a:	0092      	lsls	r2, r2, #2
 8001b8c:	50d1      	str	r1, [r2, r3]
	mColor_w[id].red = r;
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	4911      	ldr	r1, [pc, #68]	; (8001bd8 <WS2811FX_SetColorRGB+0x90>)
 8001b94:	0013      	movs	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	189b      	adds	r3, r3, r2
 8001b9a:	1dba      	adds	r2, r7, #6
 8001b9c:	7812      	ldrb	r2, [r2, #0]
 8001b9e:	545a      	strb	r2, [r3, r1]
	mColor_w[id].green = g;
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <WS2811FX_SetColorRGB+0x90>)
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	189b      	adds	r3, r3, r2
 8001bac:	18cb      	adds	r3, r1, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	1d7a      	adds	r2, r7, #5
 8001bb2:	7812      	ldrb	r2, [r2, #0]
 8001bb4:	701a      	strb	r2, [r3, #0]
	mColor_w[id].blue = b;
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <WS2811FX_SetColorRGB+0x90>)
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	189b      	adds	r3, r3, r2
 8001bc2:	18cb      	adds	r3, r1, r3
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	1d3a      	adds	r2, r7, #4
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	701a      	strb	r2, [r3, #0]

}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b002      	add	sp, #8
 8001bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd4:	20000744 	.word	0x20000744
 8001bd8:	20000758 	.word	0x20000758

08001bdc <WS2811FX_RGBtoHSV>:
	*b = mColor_w[id].blue;
	return FX_OK;
}

void WS2811FX_RGBtoHSV(uint8_t r, uint8_t g, uint8_t b, uint16_t *h, uint8_t *s, uint8_t *v)
{
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	0004      	movs	r4, r0
 8001be4:	0008      	movs	r0, r1
 8001be6:	0011      	movs	r1, r2
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	1c22      	adds	r2, r4, #0
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	1dbb      	adds	r3, r7, #6
 8001bf2:	1c02      	adds	r2, r0, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	1d7b      	adds	r3, r7, #5
 8001bf8:	1c0a      	adds	r2, r1, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
    uint16_t min, max, delta;
    int16_t h_tmp = *h;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	881a      	ldrh	r2, [r3, #0]
 8001c00:	230e      	movs	r3, #14
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	801a      	strh	r2, [r3, #0]

    min = r < g ? r : g;
 8001c06:	1dbb      	adds	r3, r7, #6
 8001c08:	1dfa      	adds	r2, r7, #7
 8001c0a:	7810      	ldrb	r0, [r2, #0]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2d9      	uxtb	r1, r3
 8001c10:	b2c2      	uxtb	r2, r0
 8001c12:	4291      	cmp	r1, r2
 8001c14:	d900      	bls.n	8001c18 <WS2811FX_RGBtoHSV+0x3c>
 8001c16:	1c03      	adds	r3, r0, #0
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	200c      	movs	r0, #12
 8001c1c:	183b      	adds	r3, r7, r0
 8001c1e:	801a      	strh	r2, [r3, #0]
    min = min  < b ? min : b;
 8001c20:	1d7b      	adds	r3, r7, #5
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b299      	uxth	r1, r3
 8001c26:	183a      	adds	r2, r7, r0
 8001c28:	183b      	adds	r3, r7, r0
 8001c2a:	1c0c      	adds	r4, r1, #0
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b298      	uxth	r0, r3
 8001c30:	b2a1      	uxth	r1, r4
 8001c32:	4288      	cmp	r0, r1
 8001c34:	d900      	bls.n	8001c38 <WS2811FX_RGBtoHSV+0x5c>
 8001c36:	1c23      	adds	r3, r4, #0
 8001c38:	8013      	strh	r3, [r2, #0]

    max = r > g ? r : g;
 8001c3a:	1dbb      	adds	r3, r7, #6
 8001c3c:	1dfa      	adds	r2, r7, #7
 8001c3e:	7810      	ldrb	r0, [r2, #0]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2d9      	uxtb	r1, r3
 8001c44:	b2c2      	uxtb	r2, r0
 8001c46:	4291      	cmp	r1, r2
 8001c48:	d200      	bcs.n	8001c4c <WS2811FX_RGBtoHSV+0x70>
 8001c4a:	1c03      	adds	r3, r0, #0
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	200a      	movs	r0, #10
 8001c50:	183b      	adds	r3, r7, r0
 8001c52:	801a      	strh	r2, [r3, #0]
    max = max  > b ? max : b;
 8001c54:	1d7b      	adds	r3, r7, #5
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b299      	uxth	r1, r3
 8001c5a:	183a      	adds	r2, r7, r0
 8001c5c:	183b      	adds	r3, r7, r0
 8001c5e:	1c0c      	adds	r4, r1, #0
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b298      	uxth	r0, r3
 8001c64:	b2a1      	uxth	r1, r4
 8001c66:	4288      	cmp	r0, r1
 8001c68:	d200      	bcs.n	8001c6c <WS2811FX_RGBtoHSV+0x90>
 8001c6a:	1c23      	adds	r3, r4, #0
 8001c6c:	8013      	strh	r3, [r2, #0]

    *v = max;	// v
 8001c6e:	210a      	movs	r1, #10
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	701a      	strb	r2, [r3, #0]
    delta = max - min;
 8001c7a:	2008      	movs	r0, #8
 8001c7c:	183b      	adds	r3, r7, r0
 8001c7e:	1879      	adds	r1, r7, r1
 8001c80:	220c      	movs	r2, #12
 8001c82:	18ba      	adds	r2, r7, r2
 8001c84:	8809      	ldrh	r1, [r1, #0]
 8001c86:	8812      	ldrh	r2, [r2, #0]
 8001c88:	1a8a      	subs	r2, r1, r2
 8001c8a:	801a      	strh	r2, [r3, #0]
    if (delta < 1)
 8001c8c:	183b      	adds	r3, r7, r0
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d106      	bne.n	8001ca2 <WS2811FX_RGBtoHSV+0xc6>
    {
        *s = 0;
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
        *h = 0; // undefined, maybe nan?
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	801a      	strh	r2, [r3, #0]
        return;
 8001ca0:	e09c      	b.n	8001ddc <WS2811FX_RGBtoHSV+0x200>
    }
    if( max > 0 )
 8001ca2:	240a      	movs	r4, #10
 8001ca4:	193b      	adds	r3, r7, r4
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01f      	beq.n	8001cec <WS2811FX_RGBtoHSV+0x110>
    { // NOTE: if Max is == 0, this divide would cause a crash
        *s = (((delta * 100) / max) * 255) / 100; // s
 8001cac:	2308      	movs	r3, #8
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	2264      	movs	r2, #100	; 0x64
 8001cb4:	435a      	muls	r2, r3
 8001cb6:	193b      	adds	r3, r7, r4
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	0019      	movs	r1, r3
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	f7fe fab5 	bl	800022c <__divsi3>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	001a      	movs	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	2164      	movs	r1, #100	; 0x64
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7fe faac 	bl	800022c <__divsi3>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	701a      	strb	r2, [r3, #0]
        *s = 0;
        *h = 0;                            // its now undefined
        return;
    }

    if( r == max )
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	193a      	adds	r2, r7, r4
 8001ce4:	8812      	ldrh	r2, [r2, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d11b      	bne.n	8001d22 <WS2811FX_RGBtoHSV+0x146>
 8001cea:	e006      	b.n	8001cfa <WS2811FX_RGBtoHSV+0x11e>
        *s = 0;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
        *h = 0;                            // its now undefined
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	801a      	strh	r2, [r3, #0]
        return;
 8001cf8:	e070      	b.n	8001ddc <WS2811FX_RGBtoHSV+0x200>
    {
    	h_tmp = (( g - b )*100) / delta;        // between yellow & magenta
 8001cfa:	1dbb      	adds	r3, r7, #6
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	1d7b      	adds	r3, r7, #5
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2264      	movs	r2, #100	; 0x64
 8001d06:	435a      	muls	r2, r3
 8001d08:	2308      	movs	r3, #8
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	0019      	movs	r1, r3
 8001d10:	0010      	movs	r0, r2
 8001d12:	f7fe fa8b 	bl	800022c <__divsi3>
 8001d16:	0003      	movs	r3, r0
 8001d18:	001a      	movs	r2, r3
 8001d1a:	230e      	movs	r3, #14
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	801a      	strh	r2, [r3, #0]
 8001d20:	e038      	b.n	8001d94 <WS2811FX_RGBtoHSV+0x1b8>
    											// *100 to avoid fracts
    }
    else
    {
		if( g == max )
 8001d22:	1dbb      	adds	r3, r7, #6
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	220a      	movs	r2, #10
 8001d2a:	18ba      	adds	r2, r7, r2
 8001d2c:	8812      	ldrh	r2, [r2, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d118      	bne.n	8001d64 <WS2811FX_RGBtoHSV+0x188>
		{
			h_tmp = 720 + (( b - r )*100) / delta;  // between cyan & yellow
 8001d32:	1d7b      	adds	r3, r7, #5
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2264      	movs	r2, #100	; 0x64
 8001d3e:	435a      	muls	r2, r3
 8001d40:	2308      	movs	r3, #8
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	0019      	movs	r1, r3
 8001d48:	0010      	movs	r0, r2
 8001d4a:	f7fe fa6f 	bl	800022c <__divsi3>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	22b4      	movs	r2, #180	; 0xb4
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	4694      	mov	ip, r2
 8001d58:	4463      	add	r3, ip
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	230e      	movs	r3, #14
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	e017      	b.n	8001d94 <WS2811FX_RGBtoHSV+0x1b8>
		}
		else
		{
			h_tmp = 1440 + (( r - g )*100) / delta;  // between magenta & cyan
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	1dbb      	adds	r3, r7, #6
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2264      	movs	r2, #100	; 0x64
 8001d70:	435a      	muls	r2, r3
 8001d72:	2308      	movs	r3, #8
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	0019      	movs	r1, r3
 8001d7a:	0010      	movs	r0, r2
 8001d7c:	f7fe fa56 	bl	800022c <__divsi3>
 8001d80:	0003      	movs	r3, r0
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	22b4      	movs	r2, #180	; 0xb4
 8001d86:	00d2      	lsls	r2, r2, #3
 8001d88:	4694      	mov	ip, r2
 8001d8a:	4463      	add	r3, ip
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	230e      	movs	r3, #14
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	801a      	strh	r2, [r3, #0]
		}
    }
    h_tmp *= 60; // Degrees
 8001d94:	250e      	movs	r5, #14
 8001d96:	197b      	adds	r3, r7, r5
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	223c      	movs	r2, #60	; 0x3c
 8001d9c:	4353      	muls	r3, r2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	197b      	adds	r3, r7, r5
 8001da2:	801a      	strh	r2, [r3, #0]
    h_tmp /= 100; // Back from fracts
 8001da4:	197c      	adds	r4, r7, r5
 8001da6:	197b      	adds	r3, r7, r5
 8001da8:	2200      	movs	r2, #0
 8001daa:	5e9b      	ldrsh	r3, [r3, r2]
 8001dac:	2164      	movs	r1, #100	; 0x64
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7fe fa3c 	bl	800022c <__divsi3>
 8001db4:	0003      	movs	r3, r0
 8001db6:	8023      	strh	r3, [r4, #0]

    if( h_tmp < 0.0 )
 8001db8:	0029      	movs	r1, r5
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	5e9b      	ldrsh	r3, [r3, r2]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da06      	bge.n	8001dd2 <WS2811FX_RGBtoHSV+0x1f6>
    	h_tmp += 360;
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	3369      	adds	r3, #105	; 0x69
 8001dca:	33ff      	adds	r3, #255	; 0xff
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	801a      	strh	r2, [r3, #0]

    *h = h_tmp;
 8001dd2:	230e      	movs	r3, #14
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	881a      	ldrh	r2, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	801a      	strh	r2, [r3, #0]
}
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001de4 <WS2811FX_HSVtoRGB>:

void WS2811FX_HSVtoRGB(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	0004      	movs	r4, r0
 8001dec:	0008      	movs	r0, r1
 8001dee:	0011      	movs	r1, r2
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	1dbb      	adds	r3, r7, #6
 8001df4:	1c22      	adds	r2, r4, #0
 8001df6:	801a      	strh	r2, [r3, #0]
 8001df8:	1d7b      	adds	r3, r7, #5
 8001dfa:	1c02      	adds	r2, r0, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	1c0a      	adds	r2, r1, #0
 8001e02:	701a      	strb	r2, [r3, #0]
	uint16_t Sector, Fracts, p, q, t;

	if(s == 0)
 8001e04:	1d7b      	adds	r3, r7, #5
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10c      	bne.n	8001e26 <WS2811FX_HSVtoRGB+0x42>
	{

		*r = v;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	1d3a      	adds	r2, r7, #4
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	701a      	strb	r2, [r3, #0]
		*g = v;
 8001e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e16:	1d3a      	adds	r2, r7, #4
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	701a      	strb	r2, [r3, #0]
		*b = v;
 8001e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1e:	1d3a      	adds	r2, r7, #4
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	701a      	strb	r2, [r3, #0]
			*g = (uint8_t)p;
			*b = (uint8_t)q;
			break;
		}
	}
}
 8001e24:	e0ce      	b.n	8001fc4 <WS2811FX_HSVtoRGB+0x1e0>
		if(h >= 360) h = 359;
 8001e26:	1dbb      	adds	r3, r7, #6
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	23b4      	movs	r3, #180	; 0xb4
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d303      	bcc.n	8001e3a <WS2811FX_HSVtoRGB+0x56>
 8001e32:	1dbb      	adds	r3, r7, #6
 8001e34:	2268      	movs	r2, #104	; 0x68
 8001e36:	32ff      	adds	r2, #255	; 0xff
 8001e38:	801a      	strh	r2, [r3, #0]
		Sector = h / 60; // Sector 0 to 5
 8001e3a:	2316      	movs	r3, #22
 8001e3c:	18fc      	adds	r4, r7, r3
 8001e3e:	1dbb      	adds	r3, r7, #6
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	213c      	movs	r1, #60	; 0x3c
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7fe f967 	bl	8000118 <__udivsi3>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	8023      	strh	r3, [r4, #0]
		Fracts = h % 60;
 8001e4e:	2314      	movs	r3, #20
 8001e50:	18fc      	adds	r4, r7, r3
 8001e52:	1dbb      	adds	r3, r7, #6
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	213c      	movs	r1, #60	; 0x3c
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7fe f9e3 	bl	8000224 <__aeabi_uidivmod>
 8001e5e:	000b      	movs	r3, r1
 8001e60:	8023      	strh	r3, [r4, #0]
		p = (v * (255 - s)) / 256;
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	1d7a      	adds	r2, r7, #5
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	21ff      	movs	r1, #255	; 0xff
 8001e6c:	1a8a      	subs	r2, r1, r2
 8001e6e:	4353      	muls	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da00      	bge.n	8001e76 <WS2811FX_HSVtoRGB+0x92>
 8001e74:	33ff      	adds	r3, #255	; 0xff
 8001e76:	121b      	asrs	r3, r3, #8
 8001e78:	001a      	movs	r2, r3
 8001e7a:	2312      	movs	r3, #18
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	801a      	strh	r2, [r3, #0]
		q = (v * (255 - (s * Fracts)/60)) / 256;
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	781c      	ldrb	r4, [r3, #0]
 8001e84:	1d7b      	adds	r3, r7, #5
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2214      	movs	r2, #20
 8001e8a:	18ba      	adds	r2, r7, r2
 8001e8c:	8812      	ldrh	r2, [r2, #0]
 8001e8e:	4353      	muls	r3, r2
 8001e90:	223c      	movs	r2, #60	; 0x3c
 8001e92:	4251      	negs	r1, r2
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7fe f9c9 	bl	800022c <__divsi3>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	33ff      	adds	r3, #255	; 0xff
 8001e9e:	4363      	muls	r3, r4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da00      	bge.n	8001ea6 <WS2811FX_HSVtoRGB+0xc2>
 8001ea4:	33ff      	adds	r3, #255	; 0xff
 8001ea6:	121b      	asrs	r3, r3, #8
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	2310      	movs	r3, #16
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	801a      	strh	r2, [r3, #0]
		t = (v * (255 - (s * (59 - Fracts))/60)) / 256;
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	781c      	ldrb	r4, [r3, #0]
 8001eb4:	1d7b      	adds	r3, r7, #5
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2214      	movs	r2, #20
 8001eba:	18ba      	adds	r2, r7, r2
 8001ebc:	8812      	ldrh	r2, [r2, #0]
 8001ebe:	213b      	movs	r1, #59	; 0x3b
 8001ec0:	1a8a      	subs	r2, r1, r2
 8001ec2:	4353      	muls	r3, r2
 8001ec4:	223c      	movs	r2, #60	; 0x3c
 8001ec6:	4251      	negs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7fe f9af 	bl	800022c <__divsi3>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	33ff      	adds	r3, #255	; 0xff
 8001ed2:	4363      	muls	r3, r4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da00      	bge.n	8001eda <WS2811FX_HSVtoRGB+0xf6>
 8001ed8:	33ff      	adds	r3, #255	; 0xff
 8001eda:	121b      	asrs	r3, r3, #8
 8001edc:	001a      	movs	r2, r3
 8001ede:	230e      	movs	r3, #14
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	801a      	strh	r2, [r3, #0]
		switch(Sector)
 8001ee4:	2316      	movs	r3, #22
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d859      	bhi.n	8001fa2 <WS2811FX_HSVtoRGB+0x1be>
 8001eee:	009a      	lsls	r2, r3, #2
 8001ef0:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <WS2811FX_HSVtoRGB+0x1e8>)
 8001ef2:	18d3      	adds	r3, r2, r3
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	469f      	mov	pc, r3
			*r = v;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	1d3a      	adds	r2, r7, #4
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	701a      	strb	r2, [r3, #0]
			*g = (uint8_t)t;
 8001f00:	230e      	movs	r3, #14
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	701a      	strb	r2, [r3, #0]
			*b = (uint8_t)p;
 8001f0c:	2312      	movs	r3, #18
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	701a      	strb	r2, [r3, #0]
			break;
 8001f18:	e054      	b.n	8001fc4 <WS2811FX_HSVtoRGB+0x1e0>
			*r = (uint8_t)q;
 8001f1a:	2310      	movs	r3, #16
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	701a      	strb	r2, [r3, #0]
			*g = v;
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	1d3a      	adds	r2, r7, #4
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	701a      	strb	r2, [r3, #0]
			*b = (uint8_t)p;
 8001f2e:	2312      	movs	r3, #18
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	701a      	strb	r2, [r3, #0]
			break;
 8001f3a:	e043      	b.n	8001fc4 <WS2811FX_HSVtoRGB+0x1e0>
			*r = (uint8_t)p;
 8001f3c:	2312      	movs	r3, #18
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	701a      	strb	r2, [r3, #0]
			*g = v;
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	1d3a      	adds	r2, r7, #4
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	701a      	strb	r2, [r3, #0]
			*b = (uint8_t)t;
 8001f50:	230e      	movs	r3, #14
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	701a      	strb	r2, [r3, #0]
			break;
 8001f5c:	e032      	b.n	8001fc4 <WS2811FX_HSVtoRGB+0x1e0>
			*r = (uint8_t)p;
 8001f5e:	2312      	movs	r3, #18
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	701a      	strb	r2, [r3, #0]
			*g = (uint8_t)q;
 8001f6a:	2310      	movs	r3, #16
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	701a      	strb	r2, [r3, #0]
			*b = v;
 8001f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f78:	1d3a      	adds	r2, r7, #4
 8001f7a:	7812      	ldrb	r2, [r2, #0]
 8001f7c:	701a      	strb	r2, [r3, #0]
			break;
 8001f7e:	e021      	b.n	8001fc4 <WS2811FX_HSVtoRGB+0x1e0>
			*r = (uint8_t)t;
 8001f80:	230e      	movs	r3, #14
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	701a      	strb	r2, [r3, #0]
			*g = (uint8_t)p;
 8001f8c:	2312      	movs	r3, #18
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	701a      	strb	r2, [r3, #0]
			*b = v;
 8001f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9a:	1d3a      	adds	r2, r7, #4
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	701a      	strb	r2, [r3, #0]
			break;
 8001fa0:	e010      	b.n	8001fc4 <WS2811FX_HSVtoRGB+0x1e0>
			*r = v;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	1d3a      	adds	r2, r7, #4
 8001fa6:	7812      	ldrb	r2, [r2, #0]
 8001fa8:	701a      	strb	r2, [r3, #0]
			*g = (uint8_t)p;
 8001faa:	2312      	movs	r3, #18
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb4:	701a      	strb	r2, [r3, #0]
			*b = (uint8_t)q;
 8001fb6:	2310      	movs	r3, #16
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc0:	701a      	strb	r2, [r3, #0]
			break;
 8001fc2:	46c0      	nop			; (mov r8, r8)
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b007      	add	sp, #28
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	0800aec0 	.word	0x0800aec0

08001fd0 <WS2811FX_SetAll>:
	mColor_w[id].green = ((c>>8)&0x000000FF);
	mColor_w[id].blue = (c&0x000000FF);
}

FX_STATUS WS2811FX_SetAll(uint16_t Segment, uint32_t c)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	1dbb      	adds	r3, r7, #6
 8001fdc:	801a      	strh	r2, [r3, #0]
	if(Segment >= mSegments) return FX_ERROR;
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <WS2811FX_SetAll+0xa8>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	1dba      	adds	r2, r7, #6
 8001fe4:	8812      	ldrh	r2, [r2, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d301      	bcc.n	8001fee <WS2811FX_SetAll+0x1e>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e03f      	b.n	800206e <WS2811FX_SetAll+0x9e>
	for(uint16_t i = 0; i < (Ws28b11_Segments[Segment].IdStop - Ws28b11_Segments[Segment].IdStart + 1); i++)
 8001fee:	230e      	movs	r3, #14
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	801a      	strh	r2, [r3, #0]
 8001ff6:	e01e      	b.n	8002036 <WS2811FX_SetAll+0x66>
	{
		WS2811_SetDiodeRGB(Ws28b11_Segments[Segment].IdStart + i, ((c>>16)&0xFF), ((c>>8)&0xFF), (c&0xFF));
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <WS2811FX_SetAll+0xac>)
 8001ffa:	6819      	ldr	r1, [r3, #0]
 8001ffc:	1dbb      	adds	r3, r7, #6
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	0013      	movs	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	18cb      	adds	r3, r1, r3
 800200a:	889a      	ldrh	r2, [r3, #4]
 800200c:	240e      	movs	r4, #14
 800200e:	193b      	adds	r3, r7, r4
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	18d3      	adds	r3, r2, r3
 8002014:	b29b      	uxth	r3, r3
 8002016:	b218      	sxth	r0, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	0c1b      	lsrs	r3, r3, #16
 800201c:	b2d9      	uxtb	r1, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b2da      	uxtb	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f7fe ff5c 	bl	8000ee4 <WS2811_SetDiodeRGB>
	for(uint16_t i = 0; i < (Ws28b11_Segments[Segment].IdStop - Ws28b11_Segments[Segment].IdStart + 1); i++)
 800202c:	193b      	adds	r3, r7, r4
 800202e:	881a      	ldrh	r2, [r3, #0]
 8002030:	193b      	adds	r3, r7, r4
 8002032:	3201      	adds	r2, #1
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <WS2811FX_SetAll+0xac>)
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	1dbb      	adds	r3, r7, #6
 800203c:	881a      	ldrh	r2, [r3, #0]
 800203e:	0013      	movs	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	18cb      	adds	r3, r1, r3
 8002048:	88db      	ldrh	r3, [r3, #6]
 800204a:	0018      	movs	r0, r3
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <WS2811FX_SetAll+0xac>)
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	1dbb      	adds	r3, r7, #6
 8002052:	881a      	ldrh	r2, [r3, #0]
 8002054:	0013      	movs	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	18cb      	adds	r3, r1, r3
 800205e:	889b      	ldrh	r3, [r3, #4]
 8002060:	1ac2      	subs	r2, r0, r3
 8002062:	230e      	movs	r3, #14
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	dac5      	bge.n	8001ff8 <WS2811FX_SetAll+0x28>
	}
	return FX_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b005      	add	sp, #20
 8002074:	bd90      	pop	{r4, r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	20000740 	.word	0x20000740
 800207c:	2000057c 	.word	0x2000057c

08002080 <WS2811FX_SetAllRGB>:

FX_STATUS WS2811FX_SetAllRGB(uint16_t Segment, uint8_t r, uint8_t g, uint8_t b)
{
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	0005      	movs	r5, r0
 8002088:	000c      	movs	r4, r1
 800208a:	0010      	movs	r0, r2
 800208c:	0019      	movs	r1, r3
 800208e:	1dbb      	adds	r3, r7, #6
 8002090:	1c2a      	adds	r2, r5, #0
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	1d7b      	adds	r3, r7, #5
 8002096:	1c22      	adds	r2, r4, #0
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	1c02      	adds	r2, r0, #0
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	1cfb      	adds	r3, r7, #3
 80020a2:	1c0a      	adds	r2, r1, #0
 80020a4:	701a      	strb	r2, [r3, #0]
	if(Segment >= mSegments) return FX_ERROR;
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <WS2811FX_SetAllRGB+0xc0>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	1dba      	adds	r2, r7, #6
 80020ac:	8812      	ldrh	r2, [r2, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d301      	bcc.n	80020b6 <WS2811FX_SetAllRGB+0x36>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e040      	b.n	8002138 <WS2811FX_SetAllRGB+0xb8>
	for(uint16_t i = 0; i < SEGMENT_LENGTH; i++)
 80020b6:	230e      	movs	r3, #14
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	2200      	movs	r2, #0
 80020bc:	801a      	strh	r2, [r3, #0]
 80020be:	e01d      	b.n	80020fc <WS2811FX_SetAllRGB+0x7c>
	{
		WS2811_SetDiodeRGB(Ws28b11_Segments[Segment].IdStart + i, r, g, b);
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <WS2811FX_SetAllRGB+0xc4>)
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	881a      	ldrh	r2, [r3, #0]
 80020c8:	0013      	movs	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	18cb      	adds	r3, r1, r3
 80020d2:	889a      	ldrh	r2, [r3, #4]
 80020d4:	250e      	movs	r5, #14
 80020d6:	197b      	adds	r3, r7, r5
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	18d3      	adds	r3, r2, r3
 80020dc:	b29b      	uxth	r3, r3
 80020de:	b218      	sxth	r0, r3
 80020e0:	1cfb      	adds	r3, r7, #3
 80020e2:	781c      	ldrb	r4, [r3, #0]
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	1d7b      	adds	r3, r7, #5
 80020ea:	7819      	ldrb	r1, [r3, #0]
 80020ec:	0023      	movs	r3, r4
 80020ee:	f7fe fef9 	bl	8000ee4 <WS2811_SetDiodeRGB>
	for(uint16_t i = 0; i < SEGMENT_LENGTH; i++)
 80020f2:	197b      	adds	r3, r7, r5
 80020f4:	881a      	ldrh	r2, [r3, #0]
 80020f6:	197b      	adds	r3, r7, r5
 80020f8:	3201      	adds	r2, #1
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <WS2811FX_SetAllRGB+0xc4>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <WS2811FX_SetAllRGB+0xc8>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	0019      	movs	r1, r3
 8002106:	000b      	movs	r3, r1
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	1a5b      	subs	r3, r3, r1
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	18d3      	adds	r3, r2, r3
 8002110:	88db      	ldrh	r3, [r3, #6]
 8002112:	0018      	movs	r0, r3
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <WS2811FX_SetAllRGB+0xc4>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <WS2811FX_SetAllRGB+0xc8>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	0019      	movs	r1, r3
 800211e:	000b      	movs	r3, r1
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	1a5b      	subs	r3, r3, r1
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	18d3      	adds	r3, r2, r3
 8002128:	889b      	ldrh	r3, [r3, #4]
 800212a:	1ac2      	subs	r2, r0, r3
 800212c:	230e      	movs	r3, #14
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	dac4      	bge.n	80020c0 <WS2811FX_SetAllRGB+0x40>
	}
	return FX_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b004      	add	sp, #16
 800213e:	bdb0      	pop	{r4, r5, r7, pc}
 8002140:	20000740 	.word	0x20000740
 8002144:	2000057c 	.word	0x2000057c
 8002148:	20000754 	.word	0x20000754

0800214c <WS2811FX_SetSpeed>:

FX_STATUS WS2811FX_SetSpeed(uint16_t Segment, uint16_t Speed)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	0002      	movs	r2, r0
 8002154:	1dbb      	adds	r3, r7, #6
 8002156:	801a      	strh	r2, [r3, #0]
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	1c0a      	adds	r2, r1, #0
 800215c:	801a      	strh	r2, [r3, #0]
	if(Segment >= mSegments) return FX_ERROR;
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <WS2811FX_SetSpeed+0x54>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	1dba      	adds	r2, r7, #6
 8002164:	8812      	ldrh	r2, [r2, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d301      	bcc.n	800216e <WS2811FX_SetSpeed+0x22>
 800216a:	2301      	movs	r3, #1
 800216c:	e013      	b.n	8002196 <WS2811FX_SetSpeed+0x4a>
	if(Speed < SPEED_MIN) Speed = SPEED_MIN;
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	2b09      	cmp	r3, #9
 8002174:	d802      	bhi.n	800217c <WS2811FX_SetSpeed+0x30>
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	220a      	movs	r2, #10
 800217a:	801a      	strh	r2, [r3, #0]
	if(Speed > SPEED_MAX) Speed = SPEED_MAX;

	Ws28b11_Segments[Segment].Speed = Speed;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <WS2811FX_SetSpeed+0x58>)
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	1dbb      	adds	r3, r7, #6
 8002182:	881a      	ldrh	r2, [r3, #0]
 8002184:	0013      	movs	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	18cb      	adds	r3, r1, r3
 800218e:	1d3a      	adds	r2, r7, #4
 8002190:	8812      	ldrh	r2, [r2, #0]
 8002192:	829a      	strh	r2, [r3, #20]
	return FX_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b002      	add	sp, #8
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	20000740 	.word	0x20000740
 80021a4:	2000057c 	.word	0x2000057c

080021a8 <color_wheel>:
/*
 * Put a value 0 to 255 in to get a color value.
 * The colours are a transition r -> g -> b -> back to r
 * Inspired by the Adafruit examples.
 */
uint32_t color_wheel(uint8_t pos) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	0002      	movs	r2, r0
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	701a      	strb	r2, [r3, #0]
  pos = 255 - pos;
 80021b4:	1dfb      	adds	r3, r7, #7
 80021b6:	1dfa      	adds	r2, r7, #7
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	43d2      	mvns	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]
  if(pos < 85) {
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b54      	cmp	r3, #84	; 0x54
 80021c4:	d80d      	bhi.n	80021e2 <color_wheel+0x3a>
    return ((uint32_t)(255 - pos * 3) << 16) | ((uint32_t)(0) << 8) | (pos * 3);
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	001a      	movs	r2, r3
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	33ff      	adds	r3, #255	; 0xff
 80021d2:	0419      	lsls	r1, r3, #16
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	0013      	movs	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	189b      	adds	r3, r3, r2
 80021de:	430b      	orrs	r3, r1
 80021e0:	e029      	b.n	8002236 <color_wheel+0x8e>
  } else if(pos < 170) {
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2ba9      	cmp	r3, #169	; 0xa9
 80021e8:	d812      	bhi.n	8002210 <color_wheel+0x68>
    pos -= 85;
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	1dfa      	adds	r2, r7, #7
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	3a55      	subs	r2, #85	; 0x55
 80021f2:	701a      	strb	r2, [r3, #0]
    return ((uint32_t)(0) << 16) | ((uint32_t)(pos * 3) << 8) | (255 - pos * 3);
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	0013      	movs	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	189b      	adds	r3, r3, r2
 80021fe:	021a      	lsls	r2, r3, #8
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	0019      	movs	r1, r3
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	1acb      	subs	r3, r1, r3
 800220a:	33ff      	adds	r3, #255	; 0xff
 800220c:	4313      	orrs	r3, r2
 800220e:	e012      	b.n	8002236 <color_wheel+0x8e>
  } else {
    pos -= 170;
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	1dfa      	adds	r2, r7, #7
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	3256      	adds	r2, #86	; 0x56
 8002218:	701a      	strb	r2, [r3, #0]
    return ((uint32_t)(pos * 3) << 16) | ((uint32_t)(255 - pos * 3) << 8) | (0);
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	0013      	movs	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	189b      	adds	r3, r3, r2
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	0019      	movs	r1, r3
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	1acb      	subs	r3, r1, r3
 8002230:	33ff      	adds	r3, #255	; 0xff
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	4313      	orrs	r3, r2
  }
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b002      	add	sp, #8
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <get_random_wheel_index>:

/*
 * Returns a new, random wheel index with a minimum distance of 42 from pos.
 */
uint8_t get_random_wheel_index(uint8_t pos) {
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	0002      	movs	r2, r0
 8002248:	1dfb      	adds	r3, r7, #7
 800224a:	701a      	strb	r2, [r3, #0]
  uint8_t r = 0;
 800224c:	230f      	movs	r3, #15
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
  uint8_t x = 0;
 8002254:	230d      	movs	r3, #13
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
  uint8_t y = 0;
 800225c:	230c      	movs	r3, #12
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
  uint8_t d = 0;
 8002264:	230e      	movs	r3, #14
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]

  while(d < 42) {
 800226c:	e02a      	b.n	80022c4 <get_random_wheel_index+0x84>
    r = rand()%256;
 800226e:	f007 fdd1 	bl	8009e14 <rand>
 8002272:	0003      	movs	r3, r0
 8002274:	4a19      	ldr	r2, [pc, #100]	; (80022dc <get_random_wheel_index+0x9c>)
 8002276:	4013      	ands	r3, r2
 8002278:	d503      	bpl.n	8002282 <get_random_wheel_index+0x42>
 800227a:	3b01      	subs	r3, #1
 800227c:	4a18      	ldr	r2, [pc, #96]	; (80022e0 <get_random_wheel_index+0xa0>)
 800227e:	4313      	orrs	r3, r2
 8002280:	3301      	adds	r3, #1
 8002282:	001a      	movs	r2, r3
 8002284:	210f      	movs	r1, #15
 8002286:	187b      	adds	r3, r7, r1
 8002288:	701a      	strb	r2, [r3, #0]
    x = abs(pos - r);
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	187b      	adds	r3, r7, r1
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	17d9      	asrs	r1, r3, #31
 8002296:	185a      	adds	r2, r3, r1
 8002298:	404a      	eors	r2, r1
 800229a:	210d      	movs	r1, #13
 800229c:	187b      	adds	r3, r7, r1
 800229e:	701a      	strb	r2, [r3, #0]
    y = 255 - x;
 80022a0:	200c      	movs	r0, #12
 80022a2:	183b      	adds	r3, r7, r0
 80022a4:	187a      	adds	r2, r7, r1
 80022a6:	7812      	ldrb	r2, [r2, #0]
 80022a8:	43d2      	mvns	r2, r2
 80022aa:	701a      	strb	r2, [r3, #0]
    d = MIN(x, y);
 80022ac:	230e      	movs	r3, #14
 80022ae:	18fa      	adds	r2, r7, r3
 80022b0:	183b      	adds	r3, r7, r0
 80022b2:	1879      	adds	r1, r7, r1
 80022b4:	780c      	ldrb	r4, [r1, #0]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2d8      	uxtb	r0, r3
 80022ba:	b2e1      	uxtb	r1, r4
 80022bc:	4288      	cmp	r0, r1
 80022be:	d900      	bls.n	80022c2 <get_random_wheel_index+0x82>
 80022c0:	1c23      	adds	r3, r4, #0
 80022c2:	7013      	strb	r3, [r2, #0]
  while(d < 42) {
 80022c4:	230e      	movs	r3, #14
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b29      	cmp	r3, #41	; 0x29
 80022cc:	d9cf      	bls.n	800226e <get_random_wheel_index+0x2e>
  }

  return r;
 80022ce:	230f      	movs	r3, #15
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	781b      	ldrb	r3, [r3, #0]
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b005      	add	sp, #20
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	800000ff 	.word	0x800000ff
 80022e0:	ffffff00 	.word	0xffffff00

080022e4 <fade_out>:

/*
 * fade out function
 */
void fade_out() {
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b08d      	sub	sp, #52	; 0x34
 80022e8:	af00      	add	r7, sp, #0
  static const uint8_t rateMapH[] = {0, 1, 1, 1, 2, 3, 4, 6};
  static const uint8_t rateMapL[] = {0, 2, 3, 8, 8, 8, 8, 8};

  uint8_t rate  = FADE_RATE;
 80022ea:	202d      	movs	r0, #45	; 0x2d
 80022ec:	183b      	adds	r3, r7, r0
 80022ee:	2202      	movs	r2, #2
 80022f0:	701a      	strb	r2, [r3, #0]
  uint8_t rateH = rateMapH[rate];
 80022f2:	183b      	adds	r3, r7, r0
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	232c      	movs	r3, #44	; 0x2c
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	496f      	ldr	r1, [pc, #444]	; (80024b8 <fade_out+0x1d4>)
 80022fc:	5c8a      	ldrb	r2, [r1, r2]
 80022fe:	701a      	strb	r2, [r3, #0]
  uint8_t rateL = rateMapL[rate];
 8002300:	183b      	adds	r3, r7, r0
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	232b      	movs	r3, #43	; 0x2b
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	496c      	ldr	r1, [pc, #432]	; (80024bc <fade_out+0x1d8>)
 800230a:	5c8a      	ldrb	r2, [r1, r2]
 800230c:	701a      	strb	r2, [r3, #0]

  uint32_t color = Ws28b11_Segments[mActualSegment].ModeColor[1]; // target color
 800230e:	4b6c      	ldr	r3, [pc, #432]	; (80024c0 <fade_out+0x1dc>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <fade_out+0x1e0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	0019      	movs	r1, r3
 8002318:	000b      	movs	r3, r1
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a5b      	subs	r3, r3, r1
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	18d3      	adds	r3, r2, r3
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	627b      	str	r3, [r7, #36]	; 0x24

  int r2 = (color >> 16) & 0xff;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	001a      	movs	r2, r3
 800232c:	23ff      	movs	r3, #255	; 0xff
 800232e:	4013      	ands	r3, r2
 8002330:	623b      	str	r3, [r7, #32]
  int g2 = (color >>  8) & 0xff;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	001a      	movs	r2, r3
 8002338:	23ff      	movs	r3, #255	; 0xff
 800233a:	4013      	ands	r3, r2
 800233c:	61fb      	str	r3, [r7, #28]
  int b2 =  color        & 0xff;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	22ff      	movs	r2, #255	; 0xff
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]

  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++) {
 8002346:	4b5e      	ldr	r3, [pc, #376]	; (80024c0 <fade_out+0x1dc>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <fade_out+0x1e0>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	0019      	movs	r1, r3
 8002350:	000b      	movs	r3, r1
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a5b      	subs	r3, r3, r1
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	18d2      	adds	r2, r2, r3
 800235a:	232e      	movs	r3, #46	; 0x2e
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	8892      	ldrh	r2, [r2, #4]
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	e093      	b.n	800248c <fade_out+0x1a8>

    color = WS2811_GetColor(i);
 8002364:	242e      	movs	r4, #46	; 0x2e
 8002366:	193b      	adds	r3, r7, r4
 8002368:	2200      	movs	r2, #0
 800236a:	5e9b      	ldrsh	r3, [r3, r2]
 800236c:	0018      	movs	r0, r3
 800236e:	f7fe fdff 	bl	8000f70 <WS2811_GetColor>
 8002372:	0003      	movs	r3, r0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    if(rate == 0) { // old fade-to-black algorithm
 8002376:	232d      	movs	r3, #45	; 0x2d
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <fade_out+0xb4>
    	WS2811_SetDiodeColor(i, (color >> 1) & 0x7F7F7F7F);
 8002380:	193b      	adds	r3, r7, r4
 8002382:	2200      	movs	r2, #0
 8002384:	5e9a      	ldrsh	r2, [r3, r2]
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	085b      	lsrs	r3, r3, #1
 800238a:	494f      	ldr	r1, [pc, #316]	; (80024c8 <fade_out+0x1e4>)
 800238c:	400b      	ands	r3, r1
 800238e:	0019      	movs	r1, r3
 8002390:	0010      	movs	r0, r2
 8002392:	f7fe fd3f 	bl	8000e14 <WS2811_SetDiodeColor>
 8002396:	e073      	b.n	8002480 <fade_out+0x19c>
    } else { // new fade-to-color algorithm
      int r1 = (color >> 16) & 0xff;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	0c1b      	lsrs	r3, r3, #16
 800239c:	001a      	movs	r2, r3
 800239e:	23ff      	movs	r3, #255	; 0xff
 80023a0:	4013      	ands	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
      int g1 = (color >>  8) & 0xff;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	001a      	movs	r2, r3
 80023aa:	23ff      	movs	r3, #255	; 0xff
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      int b1 =  color        & 0xff;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

      // calculate the color differences between the current and target colors
      int rdelta = r2 - r1;
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	60bb      	str	r3, [r7, #8]
      int gdelta = g2 - g1;
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	607b      	str	r3, [r7, #4]
      int bdelta = b2 - b1;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	603b      	str	r3, [r7, #0]

      // if the current and target colors are almost the same, jump right to the target color,
      // otherwise calculate an intermediate color. (fixes rounding issues)
      rdelta = abs(rdelta) < 3 ? rdelta : (rdelta >> rateH) + (rdelta >> rateL);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	3302      	adds	r3, #2
 80023d4:	db02      	blt.n	80023dc <fade_out+0xf8>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	dd0c      	ble.n	80023f6 <fade_out+0x112>
 80023dc:	232c      	movs	r3, #44	; 0x2c
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	411a      	asrs	r2, r3
 80023e6:	232b      	movs	r3, #43	; 0x2b
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	4119      	asrs	r1, r3
 80023f0:	000b      	movs	r3, r1
 80023f2:	18d3      	adds	r3, r2, r3
 80023f4:	e000      	b.n	80023f8 <fade_out+0x114>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	60bb      	str	r3, [r7, #8]
      gdelta = abs(gdelta) < 3 ? gdelta : (gdelta >> rateH) + (gdelta >> rateL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3302      	adds	r3, #2
 80023fe:	db02      	blt.n	8002406 <fade_out+0x122>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	dd0c      	ble.n	8002420 <fade_out+0x13c>
 8002406:	232c      	movs	r3, #44	; 0x2c
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	411a      	asrs	r2, r3
 8002410:	232b      	movs	r3, #43	; 0x2b
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4119      	asrs	r1, r3
 800241a:	000b      	movs	r3, r1
 800241c:	18d3      	adds	r3, r2, r3
 800241e:	e000      	b.n	8002422 <fade_out+0x13e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	607b      	str	r3, [r7, #4]
      bdelta = abs(bdelta) < 3 ? bdelta : (bdelta >> rateH) + (bdelta >> rateL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	3302      	adds	r3, #2
 8002428:	db02      	blt.n	8002430 <fade_out+0x14c>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b02      	cmp	r3, #2
 800242e:	dd0c      	ble.n	800244a <fade_out+0x166>
 8002430:	232c      	movs	r3, #44	; 0x2c
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	411a      	asrs	r2, r3
 800243a:	232b      	movs	r3, #43	; 0x2b
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	4119      	asrs	r1, r3
 8002444:	000b      	movs	r3, r1
 8002446:	18d3      	adds	r3, r2, r3
 8002448:	e000      	b.n	800244c <fade_out+0x168>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	603b      	str	r3, [r7, #0]

      WS2811_SetDiodeRGB(i, r1 + rdelta, g1 + gdelta, b1 + bdelta);
 800244e:	232e      	movs	r3, #46	; 0x2e
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	2000      	movs	r0, #0
 8002454:	5e18      	ldrsh	r0, [r3, r0]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	18d3      	adds	r3, r2, r3
 8002460:	b2d9      	uxtb	r1, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	18d3      	adds	r3, r2, r3
 800246c:	b2dc      	uxtb	r4, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	18d3      	adds	r3, r2, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	0022      	movs	r2, r4
 800247c:	f7fe fd32 	bl	8000ee4 <WS2811_SetDiodeRGB>
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++) {
 8002480:	212e      	movs	r1, #46	; 0x2e
 8002482:	187b      	adds	r3, r7, r1
 8002484:	881a      	ldrh	r2, [r3, #0]
 8002486:	187b      	adds	r3, r7, r1
 8002488:	3201      	adds	r2, #1
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <fade_out+0x1dc>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <fade_out+0x1e0>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	0019      	movs	r1, r3
 8002496:	000b      	movs	r3, r1
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	1a5b      	subs	r3, r3, r1
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	18d3      	adds	r3, r2, r3
 80024a0:	88db      	ldrh	r3, [r3, #6]
 80024a2:	222e      	movs	r2, #46	; 0x2e
 80024a4:	18ba      	adds	r2, r7, r2
 80024a6:	8812      	ldrh	r2, [r2, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d800      	bhi.n	80024ae <fade_out+0x1ca>
 80024ac:	e75a      	b.n	8002364 <fade_out+0x80>
    }
  }
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b00d      	add	sp, #52	; 0x34
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	0800aed4 	.word	0x0800aed4
 80024bc:	0800aedc 	.word	0x0800aedc
 80024c0:	2000057c 	.word	0x2000057c
 80024c4:	20000754 	.word	0x20000754
 80024c8:	7f7f7f7f 	.word	0x7f7f7f7f

080024cc <color_blend>:

/*
 * color blend function
 */
uint32_t color_blend(uint32_t color1, uint32_t color2, uint8_t blend)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b090      	sub	sp, #64	; 0x40
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	701a      	strb	r2, [r3, #0]
  if(blend == 0)   return color1;
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <color_blend+0x1a>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	e075      	b.n	80025d2 <color_blend+0x106>
  if(blend == 255) return color2;
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2bff      	cmp	r3, #255	; 0xff
 80024ec:	d101      	bne.n	80024f2 <color_blend+0x26>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	e06f      	b.n	80025d2 <color_blend+0x106>

  int w1 = (color1 >> 24) & 0xff;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	0e1b      	lsrs	r3, r3, #24
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  int r1 = (color1 >> 16) & 0xff;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	0c1b      	lsrs	r3, r3, #16
 80024fc:	001a      	movs	r2, r3
 80024fe:	23ff      	movs	r3, #255	; 0xff
 8002500:	4013      	ands	r3, r2
 8002502:	63bb      	str	r3, [r7, #56]	; 0x38
  int g1 = (color1 >>  8) & 0xff;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	001a      	movs	r2, r3
 800250a:	23ff      	movs	r3, #255	; 0xff
 800250c:	4013      	ands	r3, r2
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
  int b1 =  color1        & 0xff;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	22ff      	movs	r2, #255	; 0xff
 8002514:	4013      	ands	r3, r2
 8002516:	633b      	str	r3, [r7, #48]	; 0x30

  int w2 = (color2 >> 24) & 0xff;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0e1b      	lsrs	r3, r3, #24
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int r2 = (color2 >> 16) & 0xff;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	0c1b      	lsrs	r3, r3, #16
 8002522:	001a      	movs	r2, r3
 8002524:	23ff      	movs	r3, #255	; 0xff
 8002526:	4013      	ands	r3, r2
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
  int g2 = (color2 >>  8) & 0xff;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	001a      	movs	r2, r3
 8002530:	23ff      	movs	r3, #255	; 0xff
 8002532:	4013      	ands	r3, r2
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  int b2 =  color2        & 0xff;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	22ff      	movs	r2, #255	; 0xff
 800253a:	4013      	ands	r3, r2
 800253c:	623b      	str	r3, [r7, #32]

  uint32_t w3 = ((w2 * blend) + (w1 * (255 - blend))) / 256;
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002544:	435a      	muls	r2, r3
 8002546:	1dfb      	adds	r3, r7, #7
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	21ff      	movs	r1, #255	; 0xff
 800254c:	1acb      	subs	r3, r1, r3
 800254e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002550:	434b      	muls	r3, r1
 8002552:	18d3      	adds	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	da00      	bge.n	800255a <color_blend+0x8e>
 8002558:	33ff      	adds	r3, #255	; 0xff
 800255a:	121b      	asrs	r3, r3, #8
 800255c:	61fb      	str	r3, [r7, #28]
  uint32_t r3 = ((r2 * blend) + (r1 * (255 - blend))) / 256;
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002564:	435a      	muls	r2, r3
 8002566:	1dfb      	adds	r3, r7, #7
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	21ff      	movs	r1, #255	; 0xff
 800256c:	1acb      	subs	r3, r1, r3
 800256e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002570:	434b      	muls	r3, r1
 8002572:	18d3      	adds	r3, r2, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	da00      	bge.n	800257a <color_blend+0xae>
 8002578:	33ff      	adds	r3, #255	; 0xff
 800257a:	121b      	asrs	r3, r3, #8
 800257c:	61bb      	str	r3, [r7, #24]
  uint32_t g3 = ((g2 * blend) + (g1 * (255 - blend))) / 256;
 800257e:	1dfb      	adds	r3, r7, #7
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002584:	435a      	muls	r2, r3
 8002586:	1dfb      	adds	r3, r7, #7
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	21ff      	movs	r1, #255	; 0xff
 800258c:	1acb      	subs	r3, r1, r3
 800258e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002590:	434b      	muls	r3, r1
 8002592:	18d3      	adds	r3, r2, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	da00      	bge.n	800259a <color_blend+0xce>
 8002598:	33ff      	adds	r3, #255	; 0xff
 800259a:	121b      	asrs	r3, r3, #8
 800259c:	617b      	str	r3, [r7, #20]
  uint32_t b3 = ((b2 * blend) + (b1 * (255 - blend))) / 256;
 800259e:	1dfb      	adds	r3, r7, #7
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	6a3a      	ldr	r2, [r7, #32]
 80025a4:	435a      	muls	r2, r3
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	21ff      	movs	r1, #255	; 0xff
 80025ac:	1acb      	subs	r3, r1, r3
 80025ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025b0:	434b      	muls	r3, r1
 80025b2:	18d3      	adds	r3, r2, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	da00      	bge.n	80025ba <color_blend+0xee>
 80025b8:	33ff      	adds	r3, #255	; 0xff
 80025ba:	121b      	asrs	r3, r3, #8
 80025bc:	613b      	str	r3, [r7, #16]

  return ((w3 << 24) | (r3 << 16) | (g3 << 8) | (b3));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	061a      	lsls	r2, r3, #24
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	431a      	orrs	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	431a      	orrs	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b010      	add	sp, #64	; 0x40
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <mode_static>:

/*
 * No blinking. Just plain old static light.
 */
void mode_static(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0

  for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++) {
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <mode_static+0xa0>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <mode_static+0xa4>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	0019      	movs	r1, r3
 80025ec:	000b      	movs	r3, r1
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	1a5b      	subs	r3, r3, r1
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	18d2      	adds	r2, r2, r3
 80025f6:	1dbb      	adds	r3, r7, #6
 80025f8:	8892      	ldrh	r2, [r2, #4]
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	e014      	b.n	8002628 <mode_static+0x4c>
	  WS2811_SetDiodeColorStruct(i, Ws28b11_Segments[mActualSegment].ModeColor_w[0]);
 80025fe:	1dbb      	adds	r3, r7, #6
 8002600:	2000      	movs	r0, #0
 8002602:	5e18      	ldrsh	r0, [r3, r0]
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <mode_static+0xa0>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <mode_static+0xa4>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	0019      	movs	r1, r3
 800260e:	000b      	movs	r3, r1
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	18d3      	adds	r3, r2, r3
 8002618:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800261a:	f7fe fc3b 	bl	8000e94 <WS2811_SetDiodeColorStruct>
  for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++) {
 800261e:	1dbb      	adds	r3, r7, #6
 8002620:	881a      	ldrh	r2, [r3, #0]
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	3201      	adds	r2, #1
 8002626:	801a      	strh	r2, [r3, #0]
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <mode_static+0xa0>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <mode_static+0xa4>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	0019      	movs	r1, r3
 8002632:	000b      	movs	r3, r1
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	1a5b      	subs	r3, r3, r1
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	18d3      	adds	r3, r2, r3
 800263c:	88db      	ldrh	r3, [r3, #6]
 800263e:	1dba      	adds	r2, r7, #6
 8002640:	8812      	ldrh	r2, [r2, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d9db      	bls.n	80025fe <mode_static+0x22>
  }
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <mode_static+0xa0>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <mode_static+0xa4>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	0019      	movs	r1, r3
 8002650:	000b      	movs	r3, r1
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	1a5b      	subs	r3, r3, r1
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	8a98      	ldrh	r0, [r3, #20]
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <mode_static+0xa0>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <mode_static+0xa4>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	0019      	movs	r1, r3
 8002666:	000b      	movs	r3, r1
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	1a5b      	subs	r3, r3, r1
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	18d3      	adds	r3, r2, r3
 8002670:	0002      	movs	r2, r0
 8002672:	601a      	str	r2, [r3, #0]
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000057c 	.word	0x2000057c
 8002680:	20000754 	.word	0x20000754

08002684 <to_color>:

//
//	from: 0 - black to color, 1 - white to color
//
void to_color(uint8_t from)
{
 8002684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002686:	b087      	sub	sp, #28
 8002688:	af02      	add	r7, sp, #8
 800268a:	0002      	movs	r2, r0
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	701a      	strb	r2, [r3, #0]
	// HSV Saturatioin modifing
	uint16_t h;
	uint8_t s, v, r, g, b;

	WS2811FX_RGBtoHSV(Ws28b11_Segments[mActualSegment].ModeColor_w[0].red, Ws28b11_Segments[mActualSegment].ModeColor_w[0].green, Ws28b11_Segments[mActualSegment].ModeColor_w[0].blue, &h, &s, &v);
 8002690:	4bb8      	ldr	r3, [pc, #736]	; (8002974 <to_color+0x2f0>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4bb8      	ldr	r3, [pc, #736]	; (8002978 <to_color+0x2f4>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	0019      	movs	r1, r3
 800269a:	000b      	movs	r3, r1
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	1a5b      	subs	r3, r3, r1
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	2224      	movs	r2, #36	; 0x24
 80026a6:	5c98      	ldrb	r0, [r3, r2]
 80026a8:	4bb2      	ldr	r3, [pc, #712]	; (8002974 <to_color+0x2f0>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4bb2      	ldr	r3, [pc, #712]	; (8002978 <to_color+0x2f4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	0019      	movs	r1, r3
 80026b2:	000b      	movs	r3, r1
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a5b      	subs	r3, r3, r1
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	18d3      	adds	r3, r2, r3
 80026bc:	2225      	movs	r2, #37	; 0x25
 80026be:	5c99      	ldrb	r1, [r3, r2]
 80026c0:	4bac      	ldr	r3, [pc, #688]	; (8002974 <to_color+0x2f0>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4bac      	ldr	r3, [pc, #688]	; (8002978 <to_color+0x2f4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	001c      	movs	r4, r3
 80026ca:	0023      	movs	r3, r4
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	1b1b      	subs	r3, r3, r4
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	18d3      	adds	r3, r2, r3
 80026d4:	2226      	movs	r2, #38	; 0x26
 80026d6:	5c9a      	ldrb	r2, [r3, r2]
 80026d8:	250e      	movs	r5, #14
 80026da:	197c      	adds	r4, r7, r5
 80026dc:	260c      	movs	r6, #12
 80026de:	19bb      	adds	r3, r7, r6
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	230d      	movs	r3, #13
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	0023      	movs	r3, r4
 80026ea:	f7ff fa77 	bl	8001bdc <WS2811FX_RGBtoHSV>

	if(from)
 80026ee:	1dfb      	adds	r3, r7, #7
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d020      	beq.n	8002738 <to_color+0xb4>
		WS2811FX_HSVtoRGB(h, s - Ws28b11_Segments[mActualSegment].CounterModeStep, v, &r, &g, &b);
 80026f6:	197b      	adds	r3, r7, r5
 80026f8:	8818      	ldrh	r0, [r3, #0]
 80026fa:	230d      	movs	r3, #13
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	4b9c      	ldr	r3, [pc, #624]	; (8002974 <to_color+0x2f0>)
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	4b9c      	ldr	r3, [pc, #624]	; (8002978 <to_color+0x2f4>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	001c      	movs	r4, r3
 800270a:	0023      	movs	r3, r4
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1b1b      	subs	r3, r3, r4
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	18cb      	adds	r3, r1, r3
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	b2d9      	uxtb	r1, r3
 800271c:	19bb      	adds	r3, r7, r6
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	230b      	movs	r3, #11
 8002722:	18fc      	adds	r4, r7, r3
 8002724:	2309      	movs	r3, #9
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	230a      	movs	r3, #10
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	0023      	movs	r3, r4
 8002732:	f7ff fb57 	bl	8001de4 <WS2811FX_HSVtoRGB>
 8002736:	e022      	b.n	800277e <to_color+0xfa>
	else
		WS2811FX_HSVtoRGB(h, s, v - Ws28b11_Segments[mActualSegment].CounterModeStep, &r, &g, &b);
 8002738:	230e      	movs	r3, #14
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	8818      	ldrh	r0, [r3, #0]
 800273e:	230d      	movs	r3, #13
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	781c      	ldrb	r4, [r3, #0]
 8002744:	230c      	movs	r3, #12
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	4b8a      	ldr	r3, [pc, #552]	; (8002974 <to_color+0x2f0>)
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	4b8a      	ldr	r3, [pc, #552]	; (8002978 <to_color+0x2f4>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	001d      	movs	r5, r3
 8002754:	002b      	movs	r3, r5
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1b5b      	subs	r3, r3, r5
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	18cb      	adds	r3, r1, r3
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	b2da      	uxtb	r2, r3
 8002766:	230b      	movs	r3, #11
 8002768:	18f9      	adds	r1, r7, r3
 800276a:	2309      	movs	r3, #9
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	230a      	movs	r3, #10
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	000b      	movs	r3, r1
 8002778:	0021      	movs	r1, r4
 800277a:	f7ff fb33 	bl	8001de4 <WS2811FX_HSVtoRGB>

	WS2811FX_SetAllRGB(mActualSegment, r, g, b);
 800277e:	4b7e      	ldr	r3, [pc, #504]	; (8002978 <to_color+0x2f4>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b298      	uxth	r0, r3
 8002784:	230b      	movs	r3, #11
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	7819      	ldrb	r1, [r3, #0]
 800278a:	230a      	movs	r3, #10
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	2309      	movs	r3, #9
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	f7ff fc73 	bl	8002080 <WS2811FX_SetAllRGB>

	if(!Ws28b11_Segments[mActualSegment].Cycle)
 800279a:	4b76      	ldr	r3, [pc, #472]	; (8002974 <to_color+0x2f0>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b76      	ldr	r3, [pc, #472]	; (8002978 <to_color+0x2f4>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	0019      	movs	r1, r3
 80027a4:	000b      	movs	r3, r1
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	1a5b      	subs	r3, r3, r1
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	18d3      	adds	r3, r2, r3
 80027ae:	2230      	movs	r2, #48	; 0x30
 80027b0:	5c9b      	ldrb	r3, [r3, r2]
 80027b2:	2201      	movs	r2, #1
 80027b4:	4013      	ands	r3, r2
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d15f      	bne.n	800287c <to_color+0x1f8>
	{
		if(from)
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d02d      	beq.n	8002820 <to_color+0x19c>
		{
			if(Ws28b11_Segments[mActualSegment].CounterModeStep < s)
 80027c4:	4b6b      	ldr	r3, [pc, #428]	; (8002974 <to_color+0x2f0>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b6b      	ldr	r3, [pc, #428]	; (8002978 <to_color+0x2f4>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	0019      	movs	r1, r3
 80027ce:	000b      	movs	r3, r1
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a5b      	subs	r3, r3, r1
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	18d3      	adds	r3, r2, r3
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	220d      	movs	r2, #13
 80027dc:	18ba      	adds	r2, r7, r2
 80027de:	7812      	ldrb	r2, [r2, #0]
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d20d      	bcs.n	8002800 <to_color+0x17c>
				Ws28b11_Segments[mActualSegment].CounterModeStep++;
 80027e4:	4b63      	ldr	r3, [pc, #396]	; (8002974 <to_color+0x2f0>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b63      	ldr	r3, [pc, #396]	; (8002978 <to_color+0x2f4>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	0019      	movs	r1, r3
 80027ee:	000b      	movs	r3, r1
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	1a5b      	subs	r3, r3, r1
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	18d3      	adds	r3, r2, r3
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	3201      	adds	r2, #1
 80027fc:	611a      	str	r2, [r3, #16]
 80027fe:	e067      	b.n	80028d0 <to_color+0x24c>
			else
				Ws28b11_Segments[mActualSegment].Cycle = 1;
 8002800:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <to_color+0x2f0>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <to_color+0x2f4>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	0019      	movs	r1, r3
 800280a:	000b      	movs	r3, r1
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	1a5b      	subs	r3, r3, r1
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	18d3      	adds	r3, r2, r3
 8002814:	2230      	movs	r2, #48	; 0x30
 8002816:	5c99      	ldrb	r1, [r3, r2]
 8002818:	2001      	movs	r0, #1
 800281a:	4301      	orrs	r1, r0
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	e057      	b.n	80028d0 <to_color+0x24c>
		}
		else
		{
			if(Ws28b11_Segments[mActualSegment].CounterModeStep < v)
 8002820:	4b54      	ldr	r3, [pc, #336]	; (8002974 <to_color+0x2f0>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b54      	ldr	r3, [pc, #336]	; (8002978 <to_color+0x2f4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	0019      	movs	r1, r3
 800282a:	000b      	movs	r3, r1
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	1a5b      	subs	r3, r3, r1
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	18d3      	adds	r3, r2, r3
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	220c      	movs	r2, #12
 8002838:	18ba      	adds	r2, r7, r2
 800283a:	7812      	ldrb	r2, [r2, #0]
 800283c:	4293      	cmp	r3, r2
 800283e:	d20d      	bcs.n	800285c <to_color+0x1d8>
				Ws28b11_Segments[mActualSegment].CounterModeStep++;
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <to_color+0x2f0>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <to_color+0x2f4>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	0019      	movs	r1, r3
 800284a:	000b      	movs	r3, r1
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	1a5b      	subs	r3, r3, r1
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	18d3      	adds	r3, r2, r3
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	3201      	adds	r2, #1
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	e039      	b.n	80028d0 <to_color+0x24c>
			else
				Ws28b11_Segments[mActualSegment].Cycle = 1;
 800285c:	4b45      	ldr	r3, [pc, #276]	; (8002974 <to_color+0x2f0>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b45      	ldr	r3, [pc, #276]	; (8002978 <to_color+0x2f4>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	0019      	movs	r1, r3
 8002866:	000b      	movs	r3, r1
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	1a5b      	subs	r3, r3, r1
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	18d3      	adds	r3, r2, r3
 8002870:	2230      	movs	r2, #48	; 0x30
 8002872:	5c99      	ldrb	r1, [r3, r2]
 8002874:	2001      	movs	r0, #1
 8002876:	4301      	orrs	r1, r0
 8002878:	5499      	strb	r1, [r3, r2]
 800287a:	e029      	b.n	80028d0 <to_color+0x24c>
		}
	}
	else
	{
		if(Ws28b11_Segments[mActualSegment].CounterModeStep > 0)
 800287c:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <to_color+0x2f0>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b3d      	ldr	r3, [pc, #244]	; (8002978 <to_color+0x2f4>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	0019      	movs	r1, r3
 8002886:	000b      	movs	r3, r1
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	1a5b      	subs	r3, r3, r1
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	18d3      	adds	r3, r2, r3
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <to_color+0x22e>
			Ws28b11_Segments[mActualSegment].CounterModeStep--;
 8002896:	4b37      	ldr	r3, [pc, #220]	; (8002974 <to_color+0x2f0>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <to_color+0x2f4>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	0019      	movs	r1, r3
 80028a0:	000b      	movs	r3, r1
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a5b      	subs	r3, r3, r1
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	18d3      	adds	r3, r2, r3
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	3a01      	subs	r2, #1
 80028ae:	611a      	str	r2, [r3, #16]
 80028b0:	e00e      	b.n	80028d0 <to_color+0x24c>
		else
			Ws28b11_Segments[mActualSegment].Cycle = 0;
 80028b2:	4b30      	ldr	r3, [pc, #192]	; (8002974 <to_color+0x2f0>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b30      	ldr	r3, [pc, #192]	; (8002978 <to_color+0x2f4>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	0019      	movs	r1, r3
 80028bc:	000b      	movs	r3, r1
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	1a5b      	subs	r3, r3, r1
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	2230      	movs	r2, #48	; 0x30
 80028c8:	5c99      	ldrb	r1, [r3, r2]
 80028ca:	2001      	movs	r0, #1
 80028cc:	4381      	bics	r1, r0
 80028ce:	5499      	strb	r1, [r3, r2]
	}

	if(from)
 80028d0:	1dfb      	adds	r3, r7, #7
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d024      	beq.n	8002922 <to_color+0x29e>
	{
		Ws28b11_Segments[mActualSegment].ModeDelay = (Ws28b11_Segments[mActualSegment].Speed / s / 2);
 80028d8:	4b26      	ldr	r3, [pc, #152]	; (8002974 <to_color+0x2f0>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <to_color+0x2f4>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	0019      	movs	r1, r3
 80028e2:	000b      	movs	r3, r1
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	1a5b      	subs	r3, r3, r1
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	18d3      	adds	r3, r2, r3
 80028ec:	8a9b      	ldrh	r3, [r3, #20]
 80028ee:	001a      	movs	r2, r3
 80028f0:	230d      	movs	r3, #13
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	0019      	movs	r1, r3
 80028f8:	0010      	movs	r0, r2
 80028fa:	f7fd fc97 	bl	800022c <__divsi3>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	da00      	bge.n	8002904 <to_color+0x280>
 8002902:	3301      	adds	r3, #1
 8002904:	105b      	asrs	r3, r3, #1
 8002906:	0018      	movs	r0, r3
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <to_color+0x2f0>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <to_color+0x2f4>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	0019      	movs	r1, r3
 8002912:	000b      	movs	r3, r1
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	1a5b      	subs	r3, r3, r1
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	18d3      	adds	r3, r2, r3
 800291c:	0002      	movs	r2, r0
 800291e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		Ws28b11_Segments[mActualSegment].ModeDelay = (Ws28b11_Segments[mActualSegment].Speed / v / 2);
	}
}
 8002920:	e023      	b.n	800296a <to_color+0x2e6>
		Ws28b11_Segments[mActualSegment].ModeDelay = (Ws28b11_Segments[mActualSegment].Speed / v / 2);
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <to_color+0x2f0>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <to_color+0x2f4>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	0019      	movs	r1, r3
 800292c:	000b      	movs	r3, r1
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a5b      	subs	r3, r3, r1
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	18d3      	adds	r3, r2, r3
 8002936:	8a9b      	ldrh	r3, [r3, #20]
 8002938:	001a      	movs	r2, r3
 800293a:	230c      	movs	r3, #12
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	0019      	movs	r1, r3
 8002942:	0010      	movs	r0, r2
 8002944:	f7fd fc72 	bl	800022c <__divsi3>
 8002948:	1e03      	subs	r3, r0, #0
 800294a:	da00      	bge.n	800294e <to_color+0x2ca>
 800294c:	3301      	adds	r3, #1
 800294e:	105b      	asrs	r3, r3, #1
 8002950:	0018      	movs	r0, r3
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <to_color+0x2f0>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <to_color+0x2f4>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	0019      	movs	r1, r3
 800295c:	000b      	movs	r3, r1
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	1a5b      	subs	r3, r3, r1
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	18d3      	adds	r3, r2, r3
 8002966:	0002      	movs	r2, r0
 8002968:	601a      	str	r2, [r3, #0]
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b005      	add	sp, #20
 8002970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	2000057c 	.word	0x2000057c
 8002978:	20000754 	.word	0x20000754

0800297c <mode_white_to_color>:


void mode_white_to_color(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	to_color(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f7ff fe7f 	bl	8002684 <to_color>
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <mode_black_to_color>:

void mode_black_to_color(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
	to_color(0);
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff fe77 	bl	8002684 <to_color>
}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <blink>:

//
//	Blink helper function
//
void blink(uint32_t color1, uint32_t color2, uint8_t strobe)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	1dfb      	adds	r3, r7, #7
 80029a8:	701a      	strb	r2, [r3, #0]
	uint32_t color = ((Ws28b11_Segments[mActualSegment].CounterModeCall & 1) == 0) ? color1 : color2;
 80029aa:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <blink+0xfc>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <blink+0x100>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	0019      	movs	r1, r3
 80029b4:	000b      	movs	r3, r1
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a5b      	subs	r3, r3, r1
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	18d3      	adds	r3, r2, r3
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	4013      	ands	r3, r2
 80029c4:	d101      	bne.n	80029ca <blink+0x2e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	e000      	b.n	80029cc <blink+0x30>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	617b      	str	r3, [r7, #20]
	WS2811FX_SetAll(mActualSegment, color);
 80029ce:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <blink+0x100>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff faf9 	bl	8001fd0 <WS2811FX_SetAll>
	if((Ws28b11_Segments[mActualSegment].CounterModeCall & 1) == 0)
 80029de:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <blink+0xfc>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <blink+0x100>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	0019      	movs	r1, r3
 80029e8:	000b      	movs	r3, r1
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	1a5b      	subs	r3, r3, r1
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	18d3      	adds	r3, r2, r3
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	4013      	ands	r3, r2
 80029f8:	d11f      	bne.n	8002a3a <blink+0x9e>
		Ws28b11_Segments[mActualSegment].ModeDelay = strobe ? 20 : Ws28b11_Segments[mActualSegment].Speed / 2;
 80029fa:	1dfb      	adds	r3, r7, #7
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10e      	bne.n	8002a20 <blink+0x84>
 8002a02:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <blink+0xfc>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <blink+0x100>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	000b      	movs	r3, r1
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	1a5b      	subs	r3, r3, r1
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	18d3      	adds	r3, r2, r3
 8002a16:	8a9b      	ldrh	r3, [r3, #20]
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	e000      	b.n	8002a22 <blink+0x86>
 8002a20:	2114      	movs	r1, #20
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <blink+0xfc>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <blink+0x100>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	1a1b      	subs	r3, r3, r0
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	18d3      	adds	r3, r2, r3
 8002a36:	6019      	str	r1, [r3, #0]
	else
		Ws28b11_Segments[mActualSegment].ModeDelay = strobe? Ws28b11_Segments[mActualSegment].Speed - 20 : (Ws28b11_Segments[mActualSegment].Speed / 2);
}
 8002a38:	e02a      	b.n	8002a90 <blink+0xf4>
		Ws28b11_Segments[mActualSegment].ModeDelay = strobe? Ws28b11_Segments[mActualSegment].Speed - 20 : (Ws28b11_Segments[mActualSegment].Speed / 2);
 8002a3a:	1dfb      	adds	r3, r7, #7
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <blink+0xc2>
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <blink+0xfc>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <blink+0x100>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	000b      	movs	r3, r1
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	1a5b      	subs	r3, r3, r1
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	18d3      	adds	r3, r2, r3
 8002a56:	8a9b      	ldrh	r3, [r3, #20]
 8002a58:	3b14      	subs	r3, #20
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	e00d      	b.n	8002a7a <blink+0xde>
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <blink+0xfc>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <blink+0x100>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	0019      	movs	r1, r3
 8002a68:	000b      	movs	r3, r1
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	1a5b      	subs	r3, r3, r1
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	18d3      	adds	r3, r2, r3
 8002a72:	8a9b      	ldrh	r3, [r3, #20]
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	0019      	movs	r1, r3
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <blink+0xfc>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <blink+0x100>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	0018      	movs	r0, r3
 8002a84:	0003      	movs	r3, r0
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a1b      	subs	r3, r3, r0
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	18d3      	adds	r3, r2, r3
 8002a8e:	6019      	str	r1, [r3, #0]
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b006      	add	sp, #24
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2000057c 	.word	0x2000057c
 8002a9c:	20000754 	.word	0x20000754

08002aa0 <mode_blink>:

/*
 * Normal blinking. 50% on/off time.
 */
void mode_blink(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	blink(Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[1], 0);
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <mode_blink+0x40>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <mode_blink+0x44>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	0019      	movs	r1, r3
 8002aae:	000b      	movs	r3, r1
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1a5b      	subs	r3, r3, r1
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	18d3      	adds	r3, r2, r3
 8002ab8:	6998      	ldr	r0, [r3, #24]
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <mode_blink+0x40>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <mode_blink+0x44>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	000b      	movs	r3, r1
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1a5b      	subs	r3, r3, r1
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	18d3      	adds	r3, r2, r3
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	f7ff ff62 	bl	800299c <blink>
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	2000057c 	.word	0x2000057c
 8002ae4:	20000754 	.word	0x20000754

08002ae8 <mode_blink_rainbow>:

void mode_blink_rainbow(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	blink(color_wheel(Ws28b11_Segments[mActualSegment].CounterModeCall & 0xFF), Ws28b11_Segments[mActualSegment].ModeColor[1], 0);
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <mode_blink_rainbow+0x48>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <mode_blink_rainbow+0x4c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	0019      	movs	r1, r3
 8002af6:	000b      	movs	r3, r1
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	1a5b      	subs	r3, r3, r1
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	18d3      	adds	r3, r2, r3
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7ff fb4f 	bl	80021a8 <color_wheel>
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <mode_blink_rainbow+0x48>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <mode_blink_rainbow+0x4c>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	0019      	movs	r1, r3
 8002b14:	000b      	movs	r3, r1
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	1a5b      	subs	r3, r3, r1
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	18d3      	adds	r3, r2, r3
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2200      	movs	r2, #0
 8002b22:	0019      	movs	r1, r3
 8002b24:	f7ff ff3a 	bl	800299c <blink>
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	2000057c 	.word	0x2000057c
 8002b34:	20000754 	.word	0x20000754

08002b38 <mode_strobe>:

void mode_strobe(void) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	blink(Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[1], 1);
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <mode_strobe+0x40>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <mode_strobe+0x44>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	0019      	movs	r1, r3
 8002b46:	000b      	movs	r3, r1
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	1a5b      	subs	r3, r3, r1
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	18d3      	adds	r3, r2, r3
 8002b50:	6998      	ldr	r0, [r3, #24]
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <mode_strobe+0x40>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <mode_strobe+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	000b      	movs	r3, r1
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	1a5b      	subs	r3, r3, r1
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	18d3      	adds	r3, r2, r3
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	f7ff ff16 	bl	800299c <blink>
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	2000057c 	.word	0x2000057c
 8002b7c:	20000754 	.word	0x20000754

08002b80 <mode_strobe_rainbow>:

void mode_strobe_rainbow(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
	blink(color_wheel(Ws28b11_Segments[mActualSegment].CounterModeCall & 0xFF), Ws28b11_Segments[mActualSegment].ModeColor[1], 1);
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <mode_strobe_rainbow+0x48>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <mode_strobe_rainbow+0x4c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	000b      	movs	r3, r1
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a5b      	subs	r3, r3, r1
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	18d3      	adds	r3, r2, r3
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7ff fb03 	bl	80021a8 <color_wheel>
 8002ba2:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <mode_strobe_rainbow+0x48>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <mode_strobe_rainbow+0x4c>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	0019      	movs	r1, r3
 8002bac:	000b      	movs	r3, r1
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a5b      	subs	r3, r3, r1
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	18d3      	adds	r3, r2, r3
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	0019      	movs	r1, r3
 8002bbc:	f7ff feee 	bl	800299c <blink>
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	2000057c 	.word	0x2000057c
 8002bcc:	20000754 	.word	0x20000754

08002bd0 <mode_breath>:

/*
 * Breathing effect
 */
void mode_breath(void)
{
 8002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
	uint32_t lum = Ws28b11_Segments[mActualSegment].CounterModeStep;
 8002bd6:	4b6b      	ldr	r3, [pc, #428]	; (8002d84 <mode_breath+0x1b4>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <mode_breath+0x1b8>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	0019      	movs	r1, r3
 8002be0:	000b      	movs	r3, r1
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a5b      	subs	r3, r3, r1
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	18d3      	adds	r3, r2, r3
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	60fb      	str	r3, [r7, #12]
	if(lum > 255) lum = 511 - lum;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2bff      	cmp	r3, #255	; 0xff
 8002bf2:	d903      	bls.n	8002bfc <mode_breath+0x2c>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a65      	ldr	r2, [pc, #404]	; (8002d8c <mode_breath+0x1bc>)
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	60fb      	str	r3, [r7, #12]

	uint16_t delay;
	if(lum == 15) delay = 970; // 970 pause before each breath
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	d104      	bne.n	8002c0c <mode_breath+0x3c>
 8002c02:	230a      	movs	r3, #10
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	4a62      	ldr	r2, [pc, #392]	; (8002d90 <mode_breath+0x1c0>)
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	e033      	b.n	8002c74 <mode_breath+0xa4>
	else if(lum <=  25) delay = 38; // 19
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b19      	cmp	r3, #25
 8002c10:	d804      	bhi.n	8002c1c <mode_breath+0x4c>
 8002c12:	230a      	movs	r3, #10
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2226      	movs	r2, #38	; 0x26
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	e02b      	b.n	8002c74 <mode_breath+0xa4>
	else if(lum <=  50) delay = 36; // 18
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b32      	cmp	r3, #50	; 0x32
 8002c20:	d804      	bhi.n	8002c2c <mode_breath+0x5c>
 8002c22:	230a      	movs	r3, #10
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	801a      	strh	r2, [r3, #0]
 8002c2a:	e023      	b.n	8002c74 <mode_breath+0xa4>
	else if(lum <=  75) delay = 28; // 14
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b4b      	cmp	r3, #75	; 0x4b
 8002c30:	d804      	bhi.n	8002c3c <mode_breath+0x6c>
 8002c32:	230a      	movs	r3, #10
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	221c      	movs	r2, #28
 8002c38:	801a      	strh	r2, [r3, #0]
 8002c3a:	e01b      	b.n	8002c74 <mode_breath+0xa4>
	else if(lum <= 100) delay = 20; // 10
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d804      	bhi.n	8002c4c <mode_breath+0x7c>
 8002c42:	230a      	movs	r3, #10
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2214      	movs	r2, #20
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	e013      	b.n	8002c74 <mode_breath+0xa4>
	else if(lum <= 125) delay = 14; // 7
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b7d      	cmp	r3, #125	; 0x7d
 8002c50:	d804      	bhi.n	8002c5c <mode_breath+0x8c>
 8002c52:	230a      	movs	r3, #10
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	220e      	movs	r2, #14
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	e00b      	b.n	8002c74 <mode_breath+0xa4>
	else if(lum <= 150) delay = 11; // 5
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b96      	cmp	r3, #150	; 0x96
 8002c60:	d804      	bhi.n	8002c6c <mode_breath+0x9c>
 8002c62:	230a      	movs	r3, #10
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	220b      	movs	r2, #11
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	e003      	b.n	8002c74 <mode_breath+0xa4>
	else delay = 10; // 4
 8002c6c:	230a      	movs	r3, #10
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	220a      	movs	r2, #10
 8002c72:	801a      	strh	r2, [r3, #0]

	uint8_t r = Ws28b11_Segments[mActualSegment].ModeColor_w[0].red * lum / 256;
 8002c74:	4b43      	ldr	r3, [pc, #268]	; (8002d84 <mode_breath+0x1b4>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <mode_breath+0x1b8>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	000b      	movs	r3, r1
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	1a5b      	subs	r3, r3, r1
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	18d3      	adds	r3, r2, r3
 8002c88:	2224      	movs	r2, #36	; 0x24
 8002c8a:	5c9b      	ldrb	r3, [r3, r2]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4353      	muls	r3, r2
 8002c92:	0a1a      	lsrs	r2, r3, #8
 8002c94:	2509      	movs	r5, #9
 8002c96:	197b      	adds	r3, r7, r5
 8002c98:	701a      	strb	r2, [r3, #0]
	uint8_t g = Ws28b11_Segments[mActualSegment].ModeColor_w[0].green * lum / 256;
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <mode_breath+0x1b4>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <mode_breath+0x1b8>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	000b      	movs	r3, r1
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	1a5b      	subs	r3, r3, r1
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	18d3      	adds	r3, r2, r3
 8002cae:	2225      	movs	r2, #37	; 0x25
 8002cb0:	5c9b      	ldrb	r3, [r3, r2]
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4353      	muls	r3, r2
 8002cb8:	0a1a      	lsrs	r2, r3, #8
 8002cba:	2608      	movs	r6, #8
 8002cbc:	19bb      	adds	r3, r7, r6
 8002cbe:	701a      	strb	r2, [r3, #0]
	uint8_t b = Ws28b11_Segments[mActualSegment].ModeColor_w[0].blue * lum / 256;
 8002cc0:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <mode_breath+0x1b4>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <mode_breath+0x1b8>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	0019      	movs	r1, r3
 8002cca:	000b      	movs	r3, r1
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	1a5b      	subs	r3, r3, r1
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	18d3      	adds	r3, r2, r3
 8002cd4:	2226      	movs	r2, #38	; 0x26
 8002cd6:	5c9b      	ldrb	r3, [r3, r2]
 8002cd8:	001a      	movs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4353      	muls	r3, r2
 8002cde:	0a1a      	lsrs	r2, r3, #8
 8002ce0:	1dfb      	adds	r3, r7, #7
 8002ce2:	701a      	strb	r2, [r3, #0]

	WS2811FX_SetAllRGB(mActualSegment, r, g, b);
 8002ce4:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <mode_breath+0x1b8>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b298      	uxth	r0, r3
 8002cea:	1dfb      	adds	r3, r7, #7
 8002cec:	781c      	ldrb	r4, [r3, #0]
 8002cee:	19bb      	adds	r3, r7, r6
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	197b      	adds	r3, r7, r5
 8002cf4:	7819      	ldrb	r1, [r3, #0]
 8002cf6:	0023      	movs	r3, r4
 8002cf8:	f7ff f9c2 	bl	8002080 <WS2811FX_SetAllRGB>
	Ws28b11_Segments[mActualSegment].CounterModeStep += 2;
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <mode_breath+0x1b4>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <mode_breath+0x1b8>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	0019      	movs	r1, r3
 8002d06:	000b      	movs	r3, r1
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	1a5b      	subs	r3, r3, r1
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	18d3      	adds	r3, r2, r3
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <mode_breath+0x1b4>)
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <mode_breath+0x1b8>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a1b      	subs	r3, r3, r0
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	18cb      	adds	r3, r1, r3
 8002d26:	3202      	adds	r2, #2
 8002d28:	611a      	str	r2, [r3, #16]
	if(Ws28b11_Segments[mActualSegment].CounterModeStep > (512-15)) Ws28b11_Segments[mActualSegment].CounterModeStep = 15;
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <mode_breath+0x1b4>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <mode_breath+0x1b8>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	0019      	movs	r1, r3
 8002d34:	000b      	movs	r3, r1
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	1a5b      	subs	r3, r3, r1
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	18d3      	adds	r3, r2, r3
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	23f9      	movs	r3, #249	; 0xf9
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d30b      	bcc.n	8002d60 <mode_breath+0x190>
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <mode_breath+0x1b4>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <mode_breath+0x1b8>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	0019      	movs	r1, r3
 8002d52:	000b      	movs	r3, r1
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1a5b      	subs	r3, r3, r1
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	18d3      	adds	r3, r2, r3
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	611a      	str	r2, [r3, #16]
	Ws28b11_Segments[mActualSegment].ModeDelay = delay;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <mode_breath+0x1b4>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <mode_breath+0x1b8>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	0019      	movs	r1, r3
 8002d6a:	000b      	movs	r3, r1
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	1a5b      	subs	r3, r3, r1
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	18d3      	adds	r3, r2, r3
 8002d74:	220a      	movs	r2, #10
 8002d76:	18ba      	adds	r2, r7, r2
 8002d78:	8812      	ldrh	r2, [r2, #0]
 8002d7a:	601a      	str	r2, [r3, #0]
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b005      	add	sp, #20
 8002d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d84:	2000057c 	.word	0x2000057c
 8002d88:	20000754 	.word	0x20000754
 8002d8c:	000001ff 	.word	0x000001ff
 8002d90:	000003ca 	.word	0x000003ca

08002d94 <color_wipe>:
 * Color wipe function
 * LEDs are turned on (color1) in sequence, then turned off (color2) in sequence.
 * if (bool rev == true) then LEDs are turned off in reverse order
 */
void color_wipe(uint32_t color1, uint32_t color2, uint8_t rev)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	701a      	strb	r2, [r3, #0]
    if(Ws28b11_Segments[mActualSegment].CounterModeStep < SEGMENT_LENGTH)
 8002da2:	4b84      	ldr	r3, [pc, #528]	; (8002fb4 <color_wipe+0x220>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b84      	ldr	r3, [pc, #528]	; (8002fb8 <color_wipe+0x224>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	0019      	movs	r1, r3
 8002dac:	000b      	movs	r3, r1
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	1a5b      	subs	r3, r3, r1
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	18d3      	adds	r3, r2, r3
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	4b7e      	ldr	r3, [pc, #504]	; (8002fb4 <color_wipe+0x220>)
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <color_wipe+0x224>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	1a1b      	subs	r3, r3, r0
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	18cb      	adds	r3, r1, r3
 8002dcc:	88db      	ldrh	r3, [r3, #6]
 8002dce:	001c      	movs	r4, r3
 8002dd0:	4b78      	ldr	r3, [pc, #480]	; (8002fb4 <color_wipe+0x220>)
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	4b78      	ldr	r3, [pc, #480]	; (8002fb8 <color_wipe+0x224>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	0003      	movs	r3, r0
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	1a1b      	subs	r3, r3, r0
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	18cb      	adds	r3, r1, r3
 8002de4:	889b      	ldrh	r3, [r3, #4]
 8002de6:	1ae3      	subs	r3, r4, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d23b      	bcs.n	8002e66 <color_wipe+0xd2>
    {
    	uint32_t led_offset = Ws28b11_Segments[mActualSegment].CounterModeStep;
 8002dee:	4b71      	ldr	r3, [pc, #452]	; (8002fb4 <color_wipe+0x220>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	4b71      	ldr	r3, [pc, #452]	; (8002fb8 <color_wipe+0x224>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	0019      	movs	r1, r3
 8002df8:	000b      	movs	r3, r1
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	1a5b      	subs	r3, r3, r1
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	18d3      	adds	r3, r2, r3
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	613b      	str	r3, [r7, #16]
        if(rev)
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d015      	beq.n	8002e3a <color_wipe+0xa6>
        {
        	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - led_offset, color1);
 8002e0e:	4b69      	ldr	r3, [pc, #420]	; (8002fb4 <color_wipe+0x220>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b69      	ldr	r3, [pc, #420]	; (8002fb8 <color_wipe+0x224>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	0019      	movs	r1, r3
 8002e18:	000b      	movs	r3, r1
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	1a5b      	subs	r3, r3, r1
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	18d3      	adds	r3, r2, r3
 8002e22:	88da      	ldrh	r2, [r3, #6]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	b21b      	sxth	r3, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	0011      	movs	r1, r2
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7fd ffee 	bl	8000e14 <WS2811_SetDiodeColor>
 8002e38:	e06a      	b.n	8002f10 <color_wipe+0x17c>
        }
        else
        {
        	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + led_offset, color1);
 8002e3a:	4b5e      	ldr	r3, [pc, #376]	; (8002fb4 <color_wipe+0x220>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <color_wipe+0x224>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	0019      	movs	r1, r3
 8002e44:	000b      	movs	r3, r1
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	1a5b      	subs	r3, r3, r1
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	18d3      	adds	r3, r2, r3
 8002e4e:	889a      	ldrh	r2, [r3, #4]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	18d3      	adds	r3, r2, r3
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	b21b      	sxth	r3, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	0011      	movs	r1, r2
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7fd ffd8 	bl	8000e14 <WS2811_SetDiodeColor>
 8002e64:	e054      	b.n	8002f10 <color_wipe+0x17c>
        }
    }
	else
	{
	    uint32_t led_offset = Ws28b11_Segments[mActualSegment].CounterModeStep - SEGMENT_LENGTH;
 8002e66:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <color_wipe+0x220>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <color_wipe+0x224>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	0019      	movs	r1, r3
 8002e70:	000b      	movs	r3, r1
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	1a5b      	subs	r3, r3, r1
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	4b4d      	ldr	r3, [pc, #308]	; (8002fb4 <color_wipe+0x220>)
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	4b4d      	ldr	r3, [pc, #308]	; (8002fb8 <color_wipe+0x224>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	0018      	movs	r0, r3
 8002e86:	0003      	movs	r3, r0
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	1a1b      	subs	r3, r3, r0
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	18cb      	adds	r3, r1, r3
 8002e90:	88db      	ldrh	r3, [r3, #6]
 8002e92:	001c      	movs	r4, r3
 8002e94:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <color_wipe+0x220>)
 8002e96:	6819      	ldr	r1, [r3, #0]
 8002e98:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <color_wipe+0x224>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	1a1b      	subs	r3, r3, r0
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	18cb      	adds	r3, r1, r3
 8002ea8:	889b      	ldrh	r3, [r3, #4]
 8002eaa:	1ae3      	subs	r3, r4, r3
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
        if(rev)
 8002eb2:	1dfb      	adds	r3, r7, #7
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d015      	beq.n	8002ee6 <color_wipe+0x152>
        {
        	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - led_offset, color2);
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <color_wipe+0x220>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <color_wipe+0x224>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	000b      	movs	r3, r1
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	1a5b      	subs	r3, r3, r1
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	18d3      	adds	r3, r2, r3
 8002ece:	88da      	ldrh	r2, [r3, #6]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	0011      	movs	r1, r2
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f7fd ff98 	bl	8000e14 <WS2811_SetDiodeColor>
 8002ee4:	e014      	b.n	8002f10 <color_wipe+0x17c>
        }
        else
        {
        	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + led_offset, color2);
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <color_wipe+0x220>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <color_wipe+0x224>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	0019      	movs	r1, r3
 8002ef0:	000b      	movs	r3, r1
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	1a5b      	subs	r3, r3, r1
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	889a      	ldrh	r2, [r3, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	18d3      	adds	r3, r2, r3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	0011      	movs	r1, r2
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7fd ff82 	bl	8000e14 <WS2811_SetDiodeColor>
        }

    }
    Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % (SEGMENT_LENGTH * 2);
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <color_wipe+0x220>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <color_wipe+0x224>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	0019      	movs	r1, r3
 8002f1a:	000b      	movs	r3, r1
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	1a5b      	subs	r3, r3, r1
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	18d3      	adds	r3, r2, r3
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	1c58      	adds	r0, r3, #1
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <color_wipe+0x220>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <color_wipe+0x224>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	0019      	movs	r1, r3
 8002f32:	000b      	movs	r3, r1
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	1a5b      	subs	r3, r3, r1
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	18d3      	adds	r3, r2, r3
 8002f3c:	88db      	ldrh	r3, [r3, #6]
 8002f3e:	001c      	movs	r4, r3
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <color_wipe+0x220>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <color_wipe+0x224>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	0019      	movs	r1, r3
 8002f4a:	000b      	movs	r3, r1
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	1a5b      	subs	r3, r3, r1
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	18d3      	adds	r3, r2, r3
 8002f54:	889b      	ldrh	r3, [r3, #4]
 8002f56:	1ae3      	subs	r3, r4, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	001d      	movs	r5, r3
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <color_wipe+0x220>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <color_wipe+0x224>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	0019      	movs	r1, r3
 8002f68:	000b      	movs	r3, r1
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	1a5b      	subs	r3, r3, r1
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	18d4      	adds	r4, r2, r3
 8002f72:	0029      	movs	r1, r5
 8002f74:	f7fd f956 	bl	8000224 <__aeabi_uidivmod>
 8002f78:	000b      	movs	r3, r1
 8002f7a:	6123      	str	r3, [r4, #16]
    Ws28b11_Segments[mActualSegment].ModeDelay =  Ws28b11_Segments[mActualSegment].Speed;
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <color_wipe+0x220>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <color_wipe+0x224>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	0019      	movs	r1, r3
 8002f86:	000b      	movs	r3, r1
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	1a5b      	subs	r3, r3, r1
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	18d3      	adds	r3, r2, r3
 8002f90:	8a98      	ldrh	r0, [r3, #20]
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <color_wipe+0x220>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <color_wipe+0x224>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	0019      	movs	r1, r3
 8002f9c:	000b      	movs	r3, r1
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	1a5b      	subs	r3, r3, r1
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	601a      	str	r2, [r3, #0]
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b006      	add	sp, #24
 8002fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	2000057c 	.word	0x2000057c
 8002fb8:	20000754 	.word	0x20000754

08002fbc <mode_color_wipe>:

/*
 * Lights all LEDs one after another.
 */
void mode_color_wipe(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	color_wipe(Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[1], 0);
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <mode_color_wipe+0x40>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <mode_color_wipe+0x44>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	0019      	movs	r1, r3
 8002fca:	000b      	movs	r3, r1
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a5b      	subs	r3, r3, r1
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	18d3      	adds	r3, r2, r3
 8002fd4:	6998      	ldr	r0, [r3, #24]
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <mode_color_wipe+0x40>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <mode_color_wipe+0x44>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	0019      	movs	r1, r3
 8002fe0:	000b      	movs	r3, r1
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	1a5b      	subs	r3, r3, r1
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	18d3      	adds	r3, r2, r3
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2200      	movs	r2, #0
 8002fee:	0019      	movs	r1, r3
 8002ff0:	f7ff fed0 	bl	8002d94 <color_wipe>
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	2000057c 	.word	0x2000057c
 8003000:	20000754 	.word	0x20000754

08003004 <mode_color_wipe_inv>:

void mode_color_wipe_inv(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	color_wipe(Ws28b11_Segments[mActualSegment].ModeColor[1], Ws28b11_Segments[mActualSegment].ModeColor[0], 0);
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <mode_color_wipe_inv+0x40>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <mode_color_wipe_inv+0x44>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	0019      	movs	r1, r3
 8003012:	000b      	movs	r3, r1
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	1a5b      	subs	r3, r3, r1
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	18d3      	adds	r3, r2, r3
 800301c:	69d8      	ldr	r0, [r3, #28]
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <mode_color_wipe_inv+0x40>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <mode_color_wipe_inv+0x44>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	0019      	movs	r1, r3
 8003028:	000b      	movs	r3, r1
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	1a5b      	subs	r3, r3, r1
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	18d3      	adds	r3, r2, r3
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2200      	movs	r2, #0
 8003036:	0019      	movs	r1, r3
 8003038:	f7ff feac 	bl	8002d94 <color_wipe>
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	2000057c 	.word	0x2000057c
 8003048:	20000754 	.word	0x20000754

0800304c <mode_color_wipe_rev>:

void mode_color_wipe_rev(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	color_wipe(Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[1], 1);
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <mode_color_wipe_rev+0x40>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <mode_color_wipe_rev+0x44>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	0019      	movs	r1, r3
 800305a:	000b      	movs	r3, r1
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	1a5b      	subs	r3, r3, r1
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	18d3      	adds	r3, r2, r3
 8003064:	6998      	ldr	r0, [r3, #24]
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <mode_color_wipe_rev+0x40>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <mode_color_wipe_rev+0x44>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	0019      	movs	r1, r3
 8003070:	000b      	movs	r3, r1
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	1a5b      	subs	r3, r3, r1
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	18d3      	adds	r3, r2, r3
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2201      	movs	r2, #1
 800307e:	0019      	movs	r1, r3
 8003080:	f7ff fe88 	bl	8002d94 <color_wipe>
}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	2000057c 	.word	0x2000057c
 8003090:	20000754 	.word	0x20000754

08003094 <mode_color_wipe_rev_inv>:

void mode_color_wipe_rev_inv(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	color_wipe(Ws28b11_Segments[mActualSegment].ModeColor[1], Ws28b11_Segments[mActualSegment].ModeColor[0], 1);
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <mode_color_wipe_rev_inv+0x40>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <mode_color_wipe_rev_inv+0x44>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	0019      	movs	r1, r3
 80030a2:	000b      	movs	r3, r1
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a5b      	subs	r3, r3, r1
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	18d3      	adds	r3, r2, r3
 80030ac:	69d8      	ldr	r0, [r3, #28]
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <mode_color_wipe_rev_inv+0x40>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <mode_color_wipe_rev_inv+0x44>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	0019      	movs	r1, r3
 80030b8:	000b      	movs	r3, r1
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a5b      	subs	r3, r3, r1
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	18d3      	adds	r3, r2, r3
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2201      	movs	r2, #1
 80030c6:	0019      	movs	r1, r3
 80030c8:	f7ff fe64 	bl	8002d94 <color_wipe>
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	2000057c 	.word	0x2000057c
 80030d8:	20000754 	.word	0x20000754

080030dc <mode_color_wipe_random>:

void mode_color_wipe_random(void)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
	if(Ws28b11_Segments[mActualSegment].CounterModeStep % SEGMENT_LENGTH == 0)
 80030e2:	4b3c      	ldr	r3, [pc, #240]	; (80031d4 <mode_color_wipe_random+0xf8>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <mode_color_wipe_random+0xfc>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	0019      	movs	r1, r3
 80030ec:	000b      	movs	r3, r1
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	1a5b      	subs	r3, r3, r1
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	18d3      	adds	r3, r2, r3
 80030f6:	6918      	ldr	r0, [r3, #16]
 80030f8:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <mode_color_wipe_random+0xf8>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <mode_color_wipe_random+0xfc>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	0019      	movs	r1, r3
 8003102:	000b      	movs	r3, r1
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	1a5b      	subs	r3, r3, r1
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	18d3      	adds	r3, r2, r3
 800310c:	88db      	ldrh	r3, [r3, #6]
 800310e:	001c      	movs	r4, r3
 8003110:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <mode_color_wipe_random+0xf8>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <mode_color_wipe_random+0xfc>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	0019      	movs	r1, r3
 800311a:	000b      	movs	r3, r1
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	1a5b      	subs	r3, r3, r1
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	18d3      	adds	r3, r2, r3
 8003124:	889b      	ldrh	r3, [r3, #4]
 8003126:	1ae3      	subs	r3, r4, r3
 8003128:	3301      	adds	r3, #1
 800312a:	0019      	movs	r1, r3
 800312c:	f7fd f87a 	bl	8000224 <__aeabi_uidivmod>
 8003130:	1e0b      	subs	r3, r1, #0
 8003132:	d11c      	bne.n	800316e <mode_color_wipe_random+0x92>
	{
	  Ws28b11_Segments[mActualSegment].AuxParam = get_random_wheel_index(Ws28b11_Segments[mActualSegment].AuxParam);
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <mode_color_wipe_random+0xf8>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <mode_color_wipe_random+0xfc>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	0019      	movs	r1, r3
 800313e:	000b      	movs	r3, r1
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	1a5b      	subs	r3, r3, r1
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	18d3      	adds	r3, r2, r3
 8003148:	222d      	movs	r2, #45	; 0x2d
 800314a:	5c99      	ldrb	r1, [r3, r2]
 800314c:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <mode_color_wipe_random+0xf8>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <mode_color_wipe_random+0xfc>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	0018      	movs	r0, r3
 8003156:	0003      	movs	r3, r0
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	1a1b      	subs	r3, r3, r0
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	18d4      	adds	r4, r2, r3
 8003160:	0008      	movs	r0, r1
 8003162:	f7ff f86d 	bl	8002240 <get_random_wheel_index>
 8003166:	0003      	movs	r3, r0
 8003168:	001a      	movs	r2, r3
 800316a:	232d      	movs	r3, #45	; 0x2d
 800316c:	54e2      	strb	r2, [r4, r3]
	}
	uint32_t color = color_wheel(Ws28b11_Segments[mActualSegment].AuxParam);
 800316e:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <mode_color_wipe_random+0xf8>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <mode_color_wipe_random+0xfc>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	0019      	movs	r1, r3
 8003178:	000b      	movs	r3, r1
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a5b      	subs	r3, r3, r1
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	18d3      	adds	r3, r2, r3
 8003182:	222d      	movs	r2, #45	; 0x2d
 8003184:	5c9b      	ldrb	r3, [r3, r2]
 8003186:	0018      	movs	r0, r3
 8003188:	f7ff f80e 	bl	80021a8 <color_wheel>
 800318c:	0003      	movs	r3, r0
 800318e:	607b      	str	r3, [r7, #4]

	color_wipe(color, color, 0);
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff fdfc 	bl	8002d94 <color_wipe>
	Ws28b11_Segments[mActualSegment].ModeDelay =  Ws28b11_Segments[mActualSegment].Speed;
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <mode_color_wipe_random+0xf8>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <mode_color_wipe_random+0xfc>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	0019      	movs	r1, r3
 80031a6:	000b      	movs	r3, r1
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a5b      	subs	r3, r3, r1
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	18d3      	adds	r3, r2, r3
 80031b0:	8a98      	ldrh	r0, [r3, #20]
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <mode_color_wipe_random+0xf8>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <mode_color_wipe_random+0xfc>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	0019      	movs	r1, r3
 80031bc:	000b      	movs	r3, r1
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a5b      	subs	r3, r3, r1
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	0002      	movs	r2, r0
 80031c8:	601a      	str	r2, [r3, #0]
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b003      	add	sp, #12
 80031d0:	bd90      	pop	{r4, r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	2000057c 	.word	0x2000057c
 80031d8:	20000754 	.word	0x20000754

080031dc <mode_color_sweep_random>:

/*
 * Random color introduced alternating from start and end of strip.
 */
void mode_color_sweep_random(void)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
  if(Ws28b11_Segments[mActualSegment].CounterModeStep % SEGMENT_LENGTH == 0)
 80031e2:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <mode_color_sweep_random+0xc8>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <mode_color_sweep_random+0xcc>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	0019      	movs	r1, r3
 80031ec:	000b      	movs	r3, r1
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	1a5b      	subs	r3, r3, r1
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	18d3      	adds	r3, r2, r3
 80031f6:	6918      	ldr	r0, [r3, #16]
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <mode_color_sweep_random+0xc8>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <mode_color_sweep_random+0xcc>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	0019      	movs	r1, r3
 8003202:	000b      	movs	r3, r1
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	1a5b      	subs	r3, r3, r1
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	18d3      	adds	r3, r2, r3
 800320c:	88db      	ldrh	r3, [r3, #6]
 800320e:	001c      	movs	r4, r3
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <mode_color_sweep_random+0xc8>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <mode_color_sweep_random+0xcc>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	0019      	movs	r1, r3
 800321a:	000b      	movs	r3, r1
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	1a5b      	subs	r3, r3, r1
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	889b      	ldrh	r3, [r3, #4]
 8003226:	1ae3      	subs	r3, r4, r3
 8003228:	3301      	adds	r3, #1
 800322a:	0019      	movs	r1, r3
 800322c:	f7fc fffa 	bl	8000224 <__aeabi_uidivmod>
 8003230:	1e0b      	subs	r3, r1, #0
 8003232:	d11c      	bne.n	800326e <mode_color_sweep_random+0x92>
  { // aux_param will store our random color wheel index
	  Ws28b11_Segments[mActualSegment].AuxParam = get_random_wheel_index(Ws28b11_Segments[mActualSegment].AuxParam);
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <mode_color_sweep_random+0xc8>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <mode_color_sweep_random+0xcc>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	0019      	movs	r1, r3
 800323e:	000b      	movs	r3, r1
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	1a5b      	subs	r3, r3, r1
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	18d3      	adds	r3, r2, r3
 8003248:	222d      	movs	r2, #45	; 0x2d
 800324a:	5c99      	ldrb	r1, [r3, r2]
 800324c:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <mode_color_sweep_random+0xc8>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <mode_color_sweep_random+0xcc>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	0018      	movs	r0, r3
 8003256:	0003      	movs	r3, r0
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	1a1b      	subs	r3, r3, r0
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	18d4      	adds	r4, r2, r3
 8003260:	0008      	movs	r0, r1
 8003262:	f7fe ffed 	bl	8002240 <get_random_wheel_index>
 8003266:	0003      	movs	r3, r0
 8003268:	001a      	movs	r2, r3
 800326a:	232d      	movs	r3, #45	; 0x2d
 800326c:	54e2      	strb	r2, [r4, r3]
  }
  uint32_t color = color_wheel(Ws28b11_Segments[mActualSegment].AuxParam);
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <mode_color_sweep_random+0xc8>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <mode_color_sweep_random+0xcc>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	0019      	movs	r1, r3
 8003278:	000b      	movs	r3, r1
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	1a5b      	subs	r3, r3, r1
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	18d3      	adds	r3, r2, r3
 8003282:	222d      	movs	r2, #45	; 0x2d
 8003284:	5c9b      	ldrb	r3, [r3, r2]
 8003286:	0018      	movs	r0, r3
 8003288:	f7fe ff8e 	bl	80021a8 <color_wheel>
 800328c:	0003      	movs	r3, r0
 800328e:	607b      	str	r3, [r7, #4]
  color_wipe(color, color, 1);
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	0018      	movs	r0, r3
 8003298:	f7ff fd7c 	bl	8002d94 <color_wipe>
}
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b003      	add	sp, #12
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	2000057c 	.word	0x2000057c
 80032a8:	20000754 	.word	0x20000754

080032ac <mode_random_color>:
/*
 * Lights all LEDs in one random color up. Then switches them
 * to the next random color.
 */
void mode_random_color(void)
{
 80032ac:	b5b0      	push	{r4, r5, r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	Ws28b11_Segments[mActualSegment].AuxParam = get_random_wheel_index(Ws28b11_Segments[mActualSegment].AuxParam); // aux_param will store our random color wheel index
 80032b0:	4b26      	ldr	r3, [pc, #152]	; (800334c <mode_random_color+0xa0>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b26      	ldr	r3, [pc, #152]	; (8003350 <mode_random_color+0xa4>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	0019      	movs	r1, r3
 80032ba:	000b      	movs	r3, r1
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	1a5b      	subs	r3, r3, r1
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	18d3      	adds	r3, r2, r3
 80032c4:	222d      	movs	r2, #45	; 0x2d
 80032c6:	5c99      	ldrb	r1, [r3, r2]
 80032c8:	4b20      	ldr	r3, [pc, #128]	; (800334c <mode_random_color+0xa0>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <mode_random_color+0xa4>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	0018      	movs	r0, r3
 80032d2:	0003      	movs	r3, r0
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	1a1b      	subs	r3, r3, r0
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	18d4      	adds	r4, r2, r3
 80032dc:	0008      	movs	r0, r1
 80032de:	f7fe ffaf 	bl	8002240 <get_random_wheel_index>
 80032e2:	0003      	movs	r3, r0
 80032e4:	001a      	movs	r2, r3
 80032e6:	232d      	movs	r3, #45	; 0x2d
 80032e8:	54e2      	strb	r2, [r4, r3]
	WS2811FX_SetAll(mActualSegment, color_wheel(Ws28b11_Segments[mActualSegment].AuxParam));
 80032ea:	4b19      	ldr	r3, [pc, #100]	; (8003350 <mode_random_color+0xa4>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b29c      	uxth	r4, r3
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <mode_random_color+0xa0>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <mode_random_color+0xa4>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	0019      	movs	r1, r3
 80032fa:	000b      	movs	r3, r1
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	1a5b      	subs	r3, r3, r1
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	18d3      	adds	r3, r2, r3
 8003304:	222d      	movs	r2, #45	; 0x2d
 8003306:	5c9b      	ldrb	r3, [r3, r2]
 8003308:	0018      	movs	r0, r3
 800330a:	f7fe ff4d 	bl	80021a8 <color_wheel>
 800330e:	0003      	movs	r3, r0
 8003310:	0019      	movs	r1, r3
 8003312:	0020      	movs	r0, r4
 8003314:	f7fe fe5c 	bl	8001fd0 <WS2811FX_SetAll>
	Ws28b11_Segments[mActualSegment].ModeDelay =  Ws28b11_Segments[mActualSegment].Speed;
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <mode_random_color+0xa0>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <mode_random_color+0xa4>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	0019      	movs	r1, r3
 8003322:	000b      	movs	r3, r1
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	1a5b      	subs	r3, r3, r1
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	18d3      	adds	r3, r2, r3
 800332c:	8a98      	ldrh	r0, [r3, #20]
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <mode_random_color+0xa0>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <mode_random_color+0xa4>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	0019      	movs	r1, r3
 8003338:	000b      	movs	r3, r1
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	1a5b      	subs	r3, r3, r1
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	18d3      	adds	r3, r2, r3
 8003342:	0002      	movs	r2, r0
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	bdb0      	pop	{r4, r5, r7, pc}
 800334c:	2000057c 	.word	0x2000057c
 8003350:	20000754 	.word	0x20000754

08003354 <mode_single_dynamic>:
/*
 * Lights every LED in a random color. Changes one random LED after the other
 * to another random color.
 */
void mode_single_dynamic(void)
{
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
	if(Ws28b11_Segments[mActualSegment].CounterModeCall == 0)
 800335a:	4b50      	ldr	r3, [pc, #320]	; (800349c <mode_single_dynamic+0x148>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <mode_single_dynamic+0x14c>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	0019      	movs	r1, r3
 8003364:	000b      	movs	r3, r1
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a5b      	subs	r3, r3, r1
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	18d3      	adds	r3, r2, r3
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d137      	bne.n	80033e4 <mode_single_dynamic+0x90>
	{
		for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStop; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8003374:	4b49      	ldr	r3, [pc, #292]	; (800349c <mode_single_dynamic+0x148>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b49      	ldr	r3, [pc, #292]	; (80034a0 <mode_single_dynamic+0x14c>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	0019      	movs	r1, r3
 800337e:	000b      	movs	r3, r1
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	1a5b      	subs	r3, r3, r1
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	18d2      	adds	r2, r2, r3
 8003388:	1dbb      	adds	r3, r7, #6
 800338a:	88d2      	ldrh	r2, [r2, #6]
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	e01a      	b.n	80033c6 <mode_single_dynamic+0x72>
		{
			WS2811_SetDiodeColor(i, color_wheel(rand()%256));
 8003390:	1dbb      	adds	r3, r7, #6
 8003392:	2400      	movs	r4, #0
 8003394:	5f1c      	ldrsh	r4, [r3, r4]
 8003396:	f006 fd3d 	bl	8009e14 <rand>
 800339a:	0003      	movs	r3, r0
 800339c:	4a41      	ldr	r2, [pc, #260]	; (80034a4 <mode_single_dynamic+0x150>)
 800339e:	4013      	ands	r3, r2
 80033a0:	d503      	bpl.n	80033aa <mode_single_dynamic+0x56>
 80033a2:	3b01      	subs	r3, #1
 80033a4:	4a40      	ldr	r2, [pc, #256]	; (80034a8 <mode_single_dynamic+0x154>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	3301      	adds	r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7fe fefb 	bl	80021a8 <color_wheel>
 80033b2:	0003      	movs	r3, r0
 80033b4:	0019      	movs	r1, r3
 80033b6:	0020      	movs	r0, r4
 80033b8:	f7fd fd2c 	bl	8000e14 <WS2811_SetDiodeColor>
		for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStop; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 80033bc:	1dbb      	adds	r3, r7, #6
 80033be:	881a      	ldrh	r2, [r3, #0]
 80033c0:	1dbb      	adds	r3, r7, #6
 80033c2:	3201      	adds	r2, #1
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	4b35      	ldr	r3, [pc, #212]	; (800349c <mode_single_dynamic+0x148>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <mode_single_dynamic+0x14c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	0019      	movs	r1, r3
 80033d0:	000b      	movs	r3, r1
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	1a5b      	subs	r3, r3, r1
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	18d3      	adds	r3, r2, r3
 80033da:	88db      	ldrh	r3, [r3, #6]
 80033dc:	1dba      	adds	r2, r7, #6
 80033de:	8812      	ldrh	r2, [r2, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d9d5      	bls.n	8003390 <mode_single_dynamic+0x3c>
		}
	}

	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + rand() % SEGMENT_LENGTH, color_wheel(rand()%256));
 80033e4:	4b2d      	ldr	r3, [pc, #180]	; (800349c <mode_single_dynamic+0x148>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <mode_single_dynamic+0x14c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	0019      	movs	r1, r3
 80033ee:	000b      	movs	r3, r1
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	1a5b      	subs	r3, r3, r1
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	18d3      	adds	r3, r2, r3
 80033f8:	889c      	ldrh	r4, [r3, #4]
 80033fa:	f006 fd0b 	bl	8009e14 <rand>
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <mode_single_dynamic+0x148>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <mode_single_dynamic+0x14c>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	0019      	movs	r1, r3
 8003408:	000b      	movs	r3, r1
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	1a5b      	subs	r3, r3, r1
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	18d3      	adds	r3, r2, r3
 8003412:	88db      	ldrh	r3, [r3, #6]
 8003414:	001d      	movs	r5, r3
 8003416:	4b21      	ldr	r3, [pc, #132]	; (800349c <mode_single_dynamic+0x148>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <mode_single_dynamic+0x14c>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	0019      	movs	r1, r3
 8003420:	000b      	movs	r3, r1
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	1a5b      	subs	r3, r3, r1
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	889b      	ldrh	r3, [r3, #4]
 800342c:	1aeb      	subs	r3, r5, r3
 800342e:	3301      	adds	r3, #1
 8003430:	0019      	movs	r1, r3
 8003432:	f7fc ffe1 	bl	80003f8 <__aeabi_idivmod>
 8003436:	000b      	movs	r3, r1
 8003438:	b29b      	uxth	r3, r3
 800343a:	18e3      	adds	r3, r4, r3
 800343c:	b29b      	uxth	r3, r3
 800343e:	b21c      	sxth	r4, r3
 8003440:	f006 fce8 	bl	8009e14 <rand>
 8003444:	0003      	movs	r3, r0
 8003446:	4a17      	ldr	r2, [pc, #92]	; (80034a4 <mode_single_dynamic+0x150>)
 8003448:	4013      	ands	r3, r2
 800344a:	d503      	bpl.n	8003454 <mode_single_dynamic+0x100>
 800344c:	3b01      	subs	r3, #1
 800344e:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <mode_single_dynamic+0x154>)
 8003450:	4313      	orrs	r3, r2
 8003452:	3301      	adds	r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	0018      	movs	r0, r3
 8003458:	f7fe fea6 	bl	80021a8 <color_wheel>
 800345c:	0003      	movs	r3, r0
 800345e:	0019      	movs	r1, r3
 8003460:	0020      	movs	r0, r4
 8003462:	f7fd fcd7 	bl	8000e14 <WS2811_SetDiodeColor>
	Ws28b11_Segments[mActualSegment].ModeDelay =  Ws28b11_Segments[mActualSegment].Speed;
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <mode_single_dynamic+0x148>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <mode_single_dynamic+0x14c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	0019      	movs	r1, r3
 8003470:	000b      	movs	r3, r1
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	1a5b      	subs	r3, r3, r1
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	18d3      	adds	r3, r2, r3
 800347a:	8a98      	ldrh	r0, [r3, #20]
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <mode_single_dynamic+0x148>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <mode_single_dynamic+0x14c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	0019      	movs	r1, r3
 8003486:	000b      	movs	r3, r1
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	1a5b      	subs	r3, r3, r1
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	18d3      	adds	r3, r2, r3
 8003490:	0002      	movs	r2, r0
 8003492:	601a      	str	r2, [r3, #0]
}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bdb0      	pop	{r4, r5, r7, pc}
 800349c:	2000057c 	.word	0x2000057c
 80034a0:	20000754 	.word	0x20000754
 80034a4:	800000ff 	.word	0x800000ff
 80034a8:	ffffff00 	.word	0xffffff00

080034ac <mode_multi_dynamic>:
/*
 * Lights every LED in a random color. Changes all LED at the same time
 * to new random colors.
 */
void mode_multi_dynamic(void)
{
 80034ac:	b590      	push	{r4, r7, lr}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
	for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <mode_multi_dynamic+0xac>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <mode_multi_dynamic+0xb0>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	0019      	movs	r1, r3
 80034bc:	000b      	movs	r3, r1
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a5b      	subs	r3, r3, r1
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	18d2      	adds	r2, r2, r3
 80034c6:	1dbb      	adds	r3, r7, #6
 80034c8:	8892      	ldrh	r2, [r2, #4]
 80034ca:	801a      	strh	r2, [r3, #0]
 80034cc:	e01a      	b.n	8003504 <mode_multi_dynamic+0x58>
	{
		WS2811_SetDiodeColor(i, color_wheel(rand()%256));
 80034ce:	1dbb      	adds	r3, r7, #6
 80034d0:	2400      	movs	r4, #0
 80034d2:	5f1c      	ldrsh	r4, [r3, r4]
 80034d4:	f006 fc9e 	bl	8009e14 <rand>
 80034d8:	0003      	movs	r3, r0
 80034da:	4a21      	ldr	r2, [pc, #132]	; (8003560 <mode_multi_dynamic+0xb4>)
 80034dc:	4013      	ands	r3, r2
 80034de:	d503      	bpl.n	80034e8 <mode_multi_dynamic+0x3c>
 80034e0:	3b01      	subs	r3, #1
 80034e2:	4a20      	ldr	r2, [pc, #128]	; (8003564 <mode_multi_dynamic+0xb8>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	3301      	adds	r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7fe fe5c 	bl	80021a8 <color_wheel>
 80034f0:	0003      	movs	r3, r0
 80034f2:	0019      	movs	r1, r3
 80034f4:	0020      	movs	r0, r4
 80034f6:	f7fd fc8d 	bl	8000e14 <WS2811_SetDiodeColor>
	for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 80034fa:	1dbb      	adds	r3, r7, #6
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	1dbb      	adds	r3, r7, #6
 8003500:	3201      	adds	r2, #1
 8003502:	801a      	strh	r2, [r3, #0]
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <mode_multi_dynamic+0xac>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <mode_multi_dynamic+0xb0>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	0019      	movs	r1, r3
 800350e:	000b      	movs	r3, r1
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	1a5b      	subs	r3, r3, r1
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	18d3      	adds	r3, r2, r3
 8003518:	88db      	ldrh	r3, [r3, #6]
 800351a:	1dba      	adds	r2, r7, #6
 800351c:	8812      	ldrh	r2, [r2, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d9d5      	bls.n	80034ce <mode_multi_dynamic+0x22>
	}
	Ws28b11_Segments[mActualSegment].ModeDelay =  Ws28b11_Segments[mActualSegment].Speed;
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <mode_multi_dynamic+0xac>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <mode_multi_dynamic+0xb0>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	0019      	movs	r1, r3
 800352c:	000b      	movs	r3, r1
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a5b      	subs	r3, r3, r1
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	18d3      	adds	r3, r2, r3
 8003536:	8a98      	ldrh	r0, [r3, #20]
 8003538:	4b07      	ldr	r3, [pc, #28]	; (8003558 <mode_multi_dynamic+0xac>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <mode_multi_dynamic+0xb0>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	0019      	movs	r1, r3
 8003542:	000b      	movs	r3, r1
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	1a5b      	subs	r3, r3, r1
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	18d3      	adds	r3, r2, r3
 800354c:	0002      	movs	r2, r0
 800354e:	601a      	str	r2, [r3, #0]
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b003      	add	sp, #12
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	2000057c 	.word	0x2000057c
 800355c:	20000754 	.word	0x20000754
 8003560:	800000ff 	.word	0x800000ff
 8003564:	ffffff00 	.word	0xffffff00

08003568 <mode_rainbow>:

/*
 * Cycles all LEDs at once through a rainbow.
 */
void mode_rainbow(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
  uint32_t color = color_wheel(Ws28b11_Segments[mActualSegment].CounterModeStep);
 800356e:	4b37      	ldr	r3, [pc, #220]	; (800364c <mode_rainbow+0xe4>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <mode_rainbow+0xe8>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	0019      	movs	r1, r3
 8003578:	000b      	movs	r3, r1
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a5b      	subs	r3, r3, r1
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	18d3      	adds	r3, r2, r3
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	0018      	movs	r0, r3
 8003588:	f7fe fe0e 	bl	80021a8 <color_wheel>
 800358c:	0003      	movs	r3, r0
 800358e:	603b      	str	r3, [r7, #0]
  for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8003590:	4b2e      	ldr	r3, [pc, #184]	; (800364c <mode_rainbow+0xe4>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b2e      	ldr	r3, [pc, #184]	; (8003650 <mode_rainbow+0xe8>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	0019      	movs	r1, r3
 800359a:	000b      	movs	r3, r1
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a5b      	subs	r3, r3, r1
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	18d2      	adds	r2, r2, r3
 80035a4:	1dbb      	adds	r3, r7, #6
 80035a6:	8892      	ldrh	r2, [r2, #4]
 80035a8:	801a      	strh	r2, [r3, #0]
 80035aa:	e00c      	b.n	80035c6 <mode_rainbow+0x5e>
  {
	  WS2811_SetDiodeColor(i, color);
 80035ac:	1dbb      	adds	r3, r7, #6
 80035ae:	2200      	movs	r2, #0
 80035b0:	5e9b      	ldrsh	r3, [r3, r2]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	0011      	movs	r1, r2
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fd fc2c 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 80035bc:	1dbb      	adds	r3, r7, #6
 80035be:	881a      	ldrh	r2, [r3, #0]
 80035c0:	1dbb      	adds	r3, r7, #6
 80035c2:	3201      	adds	r2, #1
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	4b21      	ldr	r3, [pc, #132]	; (800364c <mode_rainbow+0xe4>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b21      	ldr	r3, [pc, #132]	; (8003650 <mode_rainbow+0xe8>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	0019      	movs	r1, r3
 80035d0:	000b      	movs	r3, r1
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	1a5b      	subs	r3, r3, r1
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	18d3      	adds	r3, r2, r3
 80035da:	88db      	ldrh	r3, [r3, #6]
 80035dc:	1dba      	adds	r2, r7, #6
 80035de:	8812      	ldrh	r2, [r2, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d9e3      	bls.n	80035ac <mode_rainbow+0x44>
  }

  Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) & 0xFF;
 80035e4:	4b19      	ldr	r3, [pc, #100]	; (800364c <mode_rainbow+0xe4>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <mode_rainbow+0xe8>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	0019      	movs	r1, r3
 80035ee:	000b      	movs	r3, r1
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	1a5b      	subs	r3, r3, r1
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	18d3      	adds	r3, r2, r3
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <mode_rainbow+0xe4>)
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <mode_rainbow+0xe8>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	0018      	movs	r0, r3
 8003606:	0003      	movs	r3, r0
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	1a1b      	subs	r3, r3, r0
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	18cb      	adds	r3, r1, r3
 8003610:	21ff      	movs	r1, #255	; 0xff
 8003612:	400a      	ands	r2, r1
 8003614:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <mode_rainbow+0xe4>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <mode_rainbow+0xe8>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	0019      	movs	r1, r3
 8003620:	000b      	movs	r3, r1
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a5b      	subs	r3, r3, r1
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	18d3      	adds	r3, r2, r3
 800362a:	8a98      	ldrh	r0, [r3, #20]
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <mode_rainbow+0xe4>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <mode_rainbow+0xe8>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	0019      	movs	r1, r3
 8003636:	000b      	movs	r3, r1
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	1a5b      	subs	r3, r3, r1
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	18d3      	adds	r3, r2, r3
 8003640:	0002      	movs	r2, r0
 8003642:	601a      	str	r2, [r3, #0]
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}
 800364c:	2000057c 	.word	0x2000057c
 8003650:	20000754 	.word	0x20000754

08003654 <mode_rainbow_cycle>:

/*
 * Cycles a rainbow over the entire string of LEDs.
 */
void mode_rainbow_cycle(void)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++)
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	2200      	movs	r2, #0
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	e04d      	b.n	80036fe <mode_rainbow_cycle+0xaa>
  {
	  uint32_t color = color_wheel(((i * 256 / SEGMENT_LENGTH) + Ws28b11_Segments[mActualSegment].CounterModeStep) & 0xFF);
 8003662:	1dbb      	adds	r3, r7, #6
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	0218      	lsls	r0, r3, #8
 8003668:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <mode_rainbow_cycle+0x150>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	0019      	movs	r1, r3
 8003672:	000b      	movs	r3, r1
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	1a5b      	subs	r3, r3, r1
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	18d3      	adds	r3, r2, r3
 800367c:	88db      	ldrh	r3, [r3, #6]
 800367e:	001c      	movs	r4, r3
 8003680:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <mode_rainbow_cycle+0x150>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	0019      	movs	r1, r3
 800368a:	000b      	movs	r3, r1
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	1a5b      	subs	r3, r3, r1
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	18d3      	adds	r3, r2, r3
 8003694:	889b      	ldrh	r3, [r3, #4]
 8003696:	1ae3      	subs	r3, r4, r3
 8003698:	3301      	adds	r3, #1
 800369a:	0019      	movs	r1, r3
 800369c:	f7fc fdc6 	bl	800022c <__divsi3>
 80036a0:	0003      	movs	r3, r0
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <mode_rainbow_cycle+0x150>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	0018      	movs	r0, r3
 80036ae:	0003      	movs	r3, r0
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	1a1b      	subs	r3, r3, r0
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	18cb      	adds	r3, r1, r3
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7fe fd71 	bl	80021a8 <color_wheel>
 80036c6:	0003      	movs	r3, r0
 80036c8:	603b      	str	r3, [r7, #0]
	  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + i, color);
 80036ca:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <mode_rainbow_cycle+0x150>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	0019      	movs	r1, r3
 80036d4:	000b      	movs	r3, r1
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	1a5b      	subs	r3, r3, r1
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	18d3      	adds	r3, r2, r3
 80036de:	889a      	ldrh	r2, [r3, #4]
 80036e0:	1dbb      	adds	r3, r7, #6
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	0011      	movs	r1, r2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7fd fb90 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++)
 80036f4:	1dbb      	adds	r3, r7, #6
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	1dbb      	adds	r3, r7, #6
 80036fa:	3201      	adds	r2, #1
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <mode_rainbow_cycle+0x150>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	0019      	movs	r1, r3
 8003708:	000b      	movs	r3, r1
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a5b      	subs	r3, r3, r1
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	88db      	ldrh	r3, [r3, #6]
 8003714:	0018      	movs	r0, r3
 8003716:	4b22      	ldr	r3, [pc, #136]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <mode_rainbow_cycle+0x150>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	0019      	movs	r1, r3
 8003720:	000b      	movs	r3, r1
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a5b      	subs	r3, r3, r1
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	18d3      	adds	r3, r2, r3
 800372a:	889b      	ldrh	r3, [r3, #4]
 800372c:	1ac2      	subs	r2, r0, r3
 800372e:	1dbb      	adds	r3, r7, #6
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	da95      	bge.n	8003662 <mode_rainbow_cycle+0xe>
  }

  Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) & 0xFF;
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <mode_rainbow_cycle+0x150>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	0019      	movs	r1, r3
 8003740:	000b      	movs	r3, r1
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a5b      	subs	r3, r3, r1
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	18d3      	adds	r3, r2, r3
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <mode_rainbow_cycle+0x150>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	0018      	movs	r0, r3
 8003758:	0003      	movs	r3, r0
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a1b      	subs	r3, r3, r0
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	18cb      	adds	r3, r1, r3
 8003762:	21ff      	movs	r1, #255	; 0xff
 8003764:	400a      	ands	r2, r1
 8003766:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <mode_rainbow_cycle+0x150>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	0019      	movs	r1, r3
 8003772:	000b      	movs	r3, r1
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a5b      	subs	r3, r3, r1
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	18d3      	adds	r3, r2, r3
 800377c:	8a98      	ldrh	r0, [r3, #20]
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <mode_rainbow_cycle+0x14c>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <mode_rainbow_cycle+0x150>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	0019      	movs	r1, r3
 8003788:	000b      	movs	r3, r1
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a5b      	subs	r3, r3, r1
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	18d3      	adds	r3, r2, r3
 8003792:	0002      	movs	r2, r0
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b003      	add	sp, #12
 800379c:	bd90      	pop	{r4, r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	2000057c 	.word	0x2000057c
 80037a4:	20000754 	.word	0x20000754

080037a8 <mode_fade>:


/*
 * Fades the LEDs between two colors
 */
void mode_fade(void) {
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
  int lum = Ws28b11_Segments[mActualSegment].CounterModeStep;
 80037ae:	4b55      	ldr	r3, [pc, #340]	; (8003904 <mode_fade+0x15c>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b55      	ldr	r3, [pc, #340]	; (8003908 <mode_fade+0x160>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	0019      	movs	r1, r3
 80037b8:	000b      	movs	r3, r1
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a5b      	subs	r3, r3, r1
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	60fb      	str	r3, [r7, #12]
  if(lum > 255) lum = 511 - lum; // lum = 0 -> 255 -> 0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2bff      	cmp	r3, #255	; 0xff
 80037ca:	dd03      	ble.n	80037d4 <mode_fade+0x2c>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a4f      	ldr	r2, [pc, #316]	; (800390c <mode_fade+0x164>)
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	60fb      	str	r3, [r7, #12]

  uint32_t color = color_blend(Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[1], lum);
 80037d4:	4b4b      	ldr	r3, [pc, #300]	; (8003904 <mode_fade+0x15c>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b4b      	ldr	r3, [pc, #300]	; (8003908 <mode_fade+0x160>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	0019      	movs	r1, r3
 80037de:	000b      	movs	r3, r1
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a5b      	subs	r3, r3, r1
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	18d3      	adds	r3, r2, r3
 80037e8:	6998      	ldr	r0, [r3, #24]
 80037ea:	4b46      	ldr	r3, [pc, #280]	; (8003904 <mode_fade+0x15c>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b46      	ldr	r3, [pc, #280]	; (8003908 <mode_fade+0x160>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	0019      	movs	r1, r3
 80037f4:	000b      	movs	r3, r1
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a5b      	subs	r3, r3, r1
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	18d3      	adds	r3, r2, r3
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	0019      	movs	r1, r3
 8003806:	f7fe fe61 	bl	80024cc <color_blend>
 800380a:	0003      	movs	r3, r0
 800380c:	607b      	str	r3, [r7, #4]

  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++) {
 800380e:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <mode_fade+0x15c>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <mode_fade+0x160>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	0019      	movs	r1, r3
 8003818:	000b      	movs	r3, r1
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a5b      	subs	r3, r3, r1
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	18d2      	adds	r2, r2, r3
 8003822:	230a      	movs	r3, #10
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	8892      	ldrh	r2, [r2, #4]
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	e00d      	b.n	8003848 <mode_fade+0xa0>
    WS2811_SetDiodeColor(i, color);
 800382c:	240a      	movs	r4, #10
 800382e:	193b      	adds	r3, r7, r4
 8003830:	2200      	movs	r2, #0
 8003832:	5e9b      	ldrsh	r3, [r3, r2]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	0011      	movs	r1, r2
 8003838:	0018      	movs	r0, r3
 800383a:	f7fd faeb 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++) {
 800383e:	193b      	adds	r3, r7, r4
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	193b      	adds	r3, r7, r4
 8003844:	3201      	adds	r2, #1
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <mode_fade+0x15c>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4b2e      	ldr	r3, [pc, #184]	; (8003908 <mode_fade+0x160>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	0019      	movs	r1, r3
 8003852:	000b      	movs	r3, r1
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	1a5b      	subs	r3, r3, r1
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	18d3      	adds	r3, r2, r3
 800385c:	88db      	ldrh	r3, [r3, #6]
 800385e:	220a      	movs	r2, #10
 8003860:	18ba      	adds	r2, r7, r2
 8003862:	8812      	ldrh	r2, [r2, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d9e1      	bls.n	800382c <mode_fade+0x84>
  }

  Ws28b11_Segments[mActualSegment].CounterModeStep += 4;
 8003868:	4b26      	ldr	r3, [pc, #152]	; (8003904 <mode_fade+0x15c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b26      	ldr	r3, [pc, #152]	; (8003908 <mode_fade+0x160>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	0019      	movs	r1, r3
 8003872:	000b      	movs	r3, r1
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	1a5b      	subs	r3, r3, r1
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	18d3      	adds	r3, r2, r3
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <mode_fade+0x15c>)
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	4b21      	ldr	r3, [pc, #132]	; (8003908 <mode_fade+0x160>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	0018      	movs	r0, r3
 8003888:	0003      	movs	r3, r0
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a1b      	subs	r3, r3, r0
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	18cb      	adds	r3, r1, r3
 8003892:	3204      	adds	r2, #4
 8003894:	611a      	str	r2, [r3, #16]
  if(Ws28b11_Segments[mActualSegment].CounterModeStep > 511) Ws28b11_Segments[mActualSegment].CounterModeStep = 0;
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <mode_fade+0x15c>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <mode_fade+0x160>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	0019      	movs	r1, r3
 80038a0:	000b      	movs	r3, r1
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	1a5b      	subs	r3, r3, r1
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	18d3      	adds	r3, r2, r3
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d30b      	bcc.n	80038cc <mode_fade+0x124>
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <mode_fade+0x15c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b13      	ldr	r3, [pc, #76]	; (8003908 <mode_fade+0x160>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	0019      	movs	r1, r3
 80038be:	000b      	movs	r3, r1
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	1a5b      	subs	r3, r3, r1
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	18d3      	adds	r3, r2, r3
 80038c8:	2200      	movs	r2, #0
 80038ca:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <mode_fade+0x15c>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <mode_fade+0x160>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	0019      	movs	r1, r3
 80038d6:	000b      	movs	r3, r1
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	1a5b      	subs	r3, r3, r1
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	18d3      	adds	r3, r2, r3
 80038e0:	8a98      	ldrh	r0, [r3, #20]
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <mode_fade+0x15c>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <mode_fade+0x160>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	0019      	movs	r1, r3
 80038ec:	000b      	movs	r3, r1
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a5b      	subs	r3, r3, r1
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	18d3      	adds	r3, r2, r3
 80038f6:	0002      	movs	r2, r0
 80038f8:	601a      	str	r2, [r3, #0]
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b005      	add	sp, #20
 8003900:	bd90      	pop	{r4, r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	2000057c 	.word	0x2000057c
 8003908:	20000754 	.word	0x20000754
 800390c:	000001ff 	.word	0x000001ff

08003910 <mode_scan>:


/*
 * Runs a single pixel back and forth.
 */
void mode_scan(void) {
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
  if(Ws28b11_Segments[mActualSegment].CounterModeStep > (SEGMENT_LENGTH * 2) - 3) {
 8003916:	4b83      	ldr	r3, [pc, #524]	; (8003b24 <mode_scan+0x214>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b83      	ldr	r3, [pc, #524]	; (8003b28 <mode_scan+0x218>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	0019      	movs	r1, r3
 8003920:	000b      	movs	r3, r1
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	1a5b      	subs	r3, r3, r1
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	18d3      	adds	r3, r2, r3
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	4b7d      	ldr	r3, [pc, #500]	; (8003b24 <mode_scan+0x214>)
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	4b7d      	ldr	r3, [pc, #500]	; (8003b28 <mode_scan+0x218>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	0018      	movs	r0, r3
 8003936:	0003      	movs	r3, r0
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a1b      	subs	r3, r3, r0
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	18cb      	adds	r3, r1, r3
 8003940:	88db      	ldrh	r3, [r3, #6]
 8003942:	001c      	movs	r4, r3
 8003944:	4b77      	ldr	r3, [pc, #476]	; (8003b24 <mode_scan+0x214>)
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	4b77      	ldr	r3, [pc, #476]	; (8003b28 <mode_scan+0x218>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	0018      	movs	r0, r3
 800394e:	0003      	movs	r3, r0
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	1a1b      	subs	r3, r3, r0
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	18cb      	adds	r3, r1, r3
 8003958:	889b      	ldrh	r3, [r3, #4]
 800395a:	1ae3      	subs	r3, r4, r3
 800395c:	3301      	adds	r3, #1
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	3b03      	subs	r3, #3
 8003962:	429a      	cmp	r2, r3
 8003964:	d90b      	bls.n	800397e <mode_scan+0x6e>
    Ws28b11_Segments[mActualSegment].CounterModeStep = 0;
 8003966:	4b6f      	ldr	r3, [pc, #444]	; (8003b24 <mode_scan+0x214>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <mode_scan+0x218>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	0019      	movs	r1, r3
 8003970:	000b      	movs	r3, r1
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	1a5b      	subs	r3, r3, r1
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
  }

  for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++) {
 800397e:	4b69      	ldr	r3, [pc, #420]	; (8003b24 <mode_scan+0x214>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b69      	ldr	r3, [pc, #420]	; (8003b28 <mode_scan+0x218>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	0019      	movs	r1, r3
 8003988:	000b      	movs	r3, r1
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	1a5b      	subs	r3, r3, r1
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	18d2      	adds	r2, r2, r3
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	8892      	ldrh	r2, [r2, #4]
 8003996:	801a      	strh	r2, [r3, #0]
 8003998:	e015      	b.n	80039c6 <mode_scan+0xb6>
    WS2811_SetDiodeColor(i, Ws28b11_Segments[mActualSegment].ModeColor[1]);
 800399a:	1dbb      	adds	r3, r7, #6
 800399c:	2000      	movs	r0, #0
 800399e:	5e18      	ldrsh	r0, [r3, r0]
 80039a0:	4b60      	ldr	r3, [pc, #384]	; (8003b24 <mode_scan+0x214>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b60      	ldr	r3, [pc, #384]	; (8003b28 <mode_scan+0x218>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	0019      	movs	r1, r3
 80039aa:	000b      	movs	r3, r1
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	1a5b      	subs	r3, r3, r1
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	18d3      	adds	r3, r2, r3
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	0019      	movs	r1, r3
 80039b8:	f7fd fa2c 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i = Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++) {
 80039bc:	1dbb      	adds	r3, r7, #6
 80039be:	881a      	ldrh	r2, [r3, #0]
 80039c0:	1dbb      	adds	r3, r7, #6
 80039c2:	3201      	adds	r2, #1
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	4b57      	ldr	r3, [pc, #348]	; (8003b24 <mode_scan+0x214>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <mode_scan+0x218>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	0019      	movs	r1, r3
 80039d0:	000b      	movs	r3, r1
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a5b      	subs	r3, r3, r1
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	18d3      	adds	r3, r2, r3
 80039da:	88db      	ldrh	r3, [r3, #6]
 80039dc:	1dba      	adds	r2, r7, #6
 80039de:	8812      	ldrh	r2, [r2, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d9da      	bls.n	800399a <mode_scan+0x8a>
  }

  int led_offset = Ws28b11_Segments[mActualSegment].CounterModeStep - (SEGMENT_LENGTH - 1);
 80039e4:	4b4f      	ldr	r3, [pc, #316]	; (8003b24 <mode_scan+0x214>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b4f      	ldr	r3, [pc, #316]	; (8003b28 <mode_scan+0x218>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	0019      	movs	r1, r3
 80039ee:	000b      	movs	r3, r1
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	1a5b      	subs	r3, r3, r1
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	18d3      	adds	r3, r2, r3
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <mode_scan+0x214>)
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <mode_scan+0x218>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	0018      	movs	r0, r3
 8003a04:	0003      	movs	r3, r0
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a1b      	subs	r3, r3, r0
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	18cb      	adds	r3, r1, r3
 8003a0e:	88db      	ldrh	r3, [r3, #6]
 8003a10:	001c      	movs	r4, r3
 8003a12:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <mode_scan+0x214>)
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	4b44      	ldr	r3, [pc, #272]	; (8003b28 <mode_scan+0x218>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a1b      	subs	r3, r3, r0
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	18cb      	adds	r3, r1, r3
 8003a26:	889b      	ldrh	r3, [r3, #4]
 8003a28:	1ae3      	subs	r3, r4, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	603b      	str	r3, [r7, #0]
  led_offset = abs(led_offset);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	17da      	asrs	r2, r3, #31
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	4053      	eors	r3, r2
 8003a36:	603b      	str	r3, [r7, #0]

  if(IS_REVERSE) {
 8003a38:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <mode_scan+0x214>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <mode_scan+0x218>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	0019      	movs	r1, r3
 8003a42:	000b      	movs	r3, r1
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	1a5b      	subs	r3, r3, r1
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	18d3      	adds	r3, r2, r3
 8003a4c:	7a9b      	ldrb	r3, [r3, #10]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01e      	beq.n	8003a96 <mode_scan+0x186>
    WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - led_offset, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <mode_scan+0x214>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <mode_scan+0x218>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	0019      	movs	r1, r3
 8003a62:	000b      	movs	r3, r1
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	1a5b      	subs	r3, r3, r1
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	18d3      	adds	r3, r2, r3
 8003a6c:	88da      	ldrh	r2, [r3, #6]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	b218      	sxth	r0, r3
 8003a78:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <mode_scan+0x214>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <mode_scan+0x218>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	0019      	movs	r1, r3
 8003a82:	000b      	movs	r3, r1
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	1a5b      	subs	r3, r3, r1
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	18d3      	adds	r3, r2, r3
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	0019      	movs	r1, r3
 8003a90:	f7fd f9c0 	bl	8000e14 <WS2811_SetDiodeColor>
 8003a94:	e01d      	b.n	8003ad2 <mode_scan+0x1c2>
  } else {
    WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + led_offset, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <mode_scan+0x214>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <mode_scan+0x218>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	000b      	movs	r3, r1
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	1a5b      	subs	r3, r3, r1
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	18d3      	adds	r3, r2, r3
 8003aaa:	889a      	ldrh	r2, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	18d3      	adds	r3, r2, r3
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	b218      	sxth	r0, r3
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <mode_scan+0x214>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <mode_scan+0x218>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	0019      	movs	r1, r3
 8003ac0:	000b      	movs	r3, r1
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	1a5b      	subs	r3, r3, r1
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	18d3      	adds	r3, r2, r3
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	0019      	movs	r1, r3
 8003ace:	f7fd f9a1 	bl	8000e14 <WS2811_SetDiodeColor>
  }


  Ws28b11_Segments[mActualSegment].CounterModeStep++;
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <mode_scan+0x214>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <mode_scan+0x218>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	0019      	movs	r1, r3
 8003adc:	000b      	movs	r3, r1
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	1a5b      	subs	r3, r3, r1
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	18d3      	adds	r3, r2, r3
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	3201      	adds	r2, #1
 8003aea:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8003aec:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <mode_scan+0x214>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <mode_scan+0x218>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	0019      	movs	r1, r3
 8003af6:	000b      	movs	r3, r1
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	1a5b      	subs	r3, r3, r1
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	18d3      	adds	r3, r2, r3
 8003b00:	8a98      	ldrh	r0, [r3, #20]
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <mode_scan+0x214>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <mode_scan+0x218>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	000b      	movs	r3, r1
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	1a5b      	subs	r3, r3, r1
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	18d3      	adds	r3, r2, r3
 8003b16:	0002      	movs	r2, r0
 8003b18:	601a      	str	r2, [r3, #0]
}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b003      	add	sp, #12
 8003b20:	bd90      	pop	{r4, r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	2000057c 	.word	0x2000057c
 8003b28:	20000754 	.word	0x20000754

08003b2c <mode_dual_scan>:


/*
 * Runs two pixel back and forth in opposite directions.
 */
void mode_dual_scan(void) {
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
  if(Ws28b11_Segments[mActualSegment].CounterModeStep > (SEGMENT_LENGTH * 2) - 3)
 8003b32:	4b87      	ldr	r3, [pc, #540]	; (8003d50 <mode_dual_scan+0x224>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b87      	ldr	r3, [pc, #540]	; (8003d54 <mode_dual_scan+0x228>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	000b      	movs	r3, r1
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	1a5b      	subs	r3, r3, r1
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	18d3      	adds	r3, r2, r3
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	4b81      	ldr	r3, [pc, #516]	; (8003d50 <mode_dual_scan+0x224>)
 8003b4a:	6819      	ldr	r1, [r3, #0]
 8003b4c:	4b81      	ldr	r3, [pc, #516]	; (8003d54 <mode_dual_scan+0x228>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	0018      	movs	r0, r3
 8003b52:	0003      	movs	r3, r0
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	1a1b      	subs	r3, r3, r0
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	18cb      	adds	r3, r1, r3
 8003b5c:	88db      	ldrh	r3, [r3, #6]
 8003b5e:	001c      	movs	r4, r3
 8003b60:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <mode_dual_scan+0x224>)
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	4b7b      	ldr	r3, [pc, #492]	; (8003d54 <mode_dual_scan+0x228>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	1a1b      	subs	r3, r3, r0
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	18cb      	adds	r3, r1, r3
 8003b74:	889b      	ldrh	r3, [r3, #4]
 8003b76:	1ae3      	subs	r3, r4, r3
 8003b78:	3301      	adds	r3, #1
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	3b03      	subs	r3, #3
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d90b      	bls.n	8003b9a <mode_dual_scan+0x6e>
  {
    Ws28b11_Segments[mActualSegment].CounterModeStep = 0;
 8003b82:	4b73      	ldr	r3, [pc, #460]	; (8003d50 <mode_dual_scan+0x224>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b73      	ldr	r3, [pc, #460]	; (8003d54 <mode_dual_scan+0x228>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	000b      	movs	r3, r1
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	1a5b      	subs	r3, r3, r1
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	18d3      	adds	r3, r2, r3
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]
  }

  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <Ws28b11_Segments[mActualSegment].IdStop; i++)
 8003b9a:	4b6d      	ldr	r3, [pc, #436]	; (8003d50 <mode_dual_scan+0x224>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b6d      	ldr	r3, [pc, #436]	; (8003d54 <mode_dual_scan+0x228>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	000b      	movs	r3, r1
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	1a5b      	subs	r3, r3, r1
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	18d2      	adds	r2, r2, r3
 8003bae:	1dbb      	adds	r3, r7, #6
 8003bb0:	8892      	ldrh	r2, [r2, #4]
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	e015      	b.n	8003be2 <mode_dual_scan+0xb6>
  {
    WS2811_SetDiodeColor(i, Ws28b11_Segments[mActualSegment].ModeColor[1]);
 8003bb6:	1dbb      	adds	r3, r7, #6
 8003bb8:	2000      	movs	r0, #0
 8003bba:	5e18      	ldrsh	r0, [r3, r0]
 8003bbc:	4b64      	ldr	r3, [pc, #400]	; (8003d50 <mode_dual_scan+0x224>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b64      	ldr	r3, [pc, #400]	; (8003d54 <mode_dual_scan+0x228>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	000b      	movs	r3, r1
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a5b      	subs	r3, r3, r1
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	18d3      	adds	r3, r2, r3
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	f7fd f91e 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <Ws28b11_Segments[mActualSegment].IdStop; i++)
 8003bd8:	1dbb      	adds	r3, r7, #6
 8003bda:	881a      	ldrh	r2, [r3, #0]
 8003bdc:	1dbb      	adds	r3, r7, #6
 8003bde:	3201      	adds	r2, #1
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	4b5b      	ldr	r3, [pc, #364]	; (8003d50 <mode_dual_scan+0x224>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b5b      	ldr	r3, [pc, #364]	; (8003d54 <mode_dual_scan+0x228>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	0019      	movs	r1, r3
 8003bec:	000b      	movs	r3, r1
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	1a5b      	subs	r3, r3, r1
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	18d3      	adds	r3, r2, r3
 8003bf6:	88db      	ldrh	r3, [r3, #6]
 8003bf8:	1dba      	adds	r2, r7, #6
 8003bfa:	8812      	ldrh	r2, [r2, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3da      	bcc.n	8003bb6 <mode_dual_scan+0x8a>
  }

  int led_offset = Ws28b11_Segments[mActualSegment].CounterModeStep - (SEGMENT_LENGTH - 1);
 8003c00:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <mode_dual_scan+0x224>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <mode_dual_scan+0x228>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	0019      	movs	r1, r3
 8003c0a:	000b      	movs	r3, r1
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	1a5b      	subs	r3, r3, r1
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	18d3      	adds	r3, r2, r3
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	4b4e      	ldr	r3, [pc, #312]	; (8003d50 <mode_dual_scan+0x224>)
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	4b4e      	ldr	r3, [pc, #312]	; (8003d54 <mode_dual_scan+0x228>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	0003      	movs	r3, r0
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	1a1b      	subs	r3, r3, r0
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	18cb      	adds	r3, r1, r3
 8003c2a:	88db      	ldrh	r3, [r3, #6]
 8003c2c:	001c      	movs	r4, r3
 8003c2e:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <mode_dual_scan+0x224>)
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <mode_dual_scan+0x228>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	0018      	movs	r0, r3
 8003c38:	0003      	movs	r3, r0
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	1a1b      	subs	r3, r3, r0
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	18cb      	adds	r3, r1, r3
 8003c42:	889b      	ldrh	r3, [r3, #4]
 8003c44:	1ae3      	subs	r3, r4, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	603b      	str	r3, [r7, #0]
  led_offset = abs(led_offset);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	17da      	asrs	r2, r3, #31
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	4053      	eors	r3, r2
 8003c52:	603b      	str	r3, [r7, #0]

  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + led_offset, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8003c54:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <mode_dual_scan+0x224>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <mode_dual_scan+0x228>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	000b      	movs	r3, r1
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	1a5b      	subs	r3, r3, r1
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	18d3      	adds	r3, r2, r3
 8003c68:	889a      	ldrh	r2, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	18d3      	adds	r3, r2, r3
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	b218      	sxth	r0, r3
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <mode_dual_scan+0x224>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <mode_dual_scan+0x228>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	000b      	movs	r3, r1
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	1a5b      	subs	r3, r3, r1
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	18d3      	adds	r3, r2, r3
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	f7fd f8c2 	bl	8000e14 <WS2811_SetDiodeColor>
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + SEGMENT_LENGTH - led_offset - 1, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <mode_dual_scan+0x224>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <mode_dual_scan+0x228>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	0019      	movs	r1, r3
 8003c9a:	000b      	movs	r3, r1
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	1a5b      	subs	r3, r3, r1
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	18d3      	adds	r3, r2, r3
 8003ca4:	889a      	ldrh	r2, [r3, #4]
 8003ca6:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <mode_dual_scan+0x224>)
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <mode_dual_scan+0x228>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	0003      	movs	r3, r0
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	1a1b      	subs	r3, r3, r0
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	18cb      	adds	r3, r1, r3
 8003cba:	88d9      	ldrh	r1, [r3, #6]
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <mode_dual_scan+0x224>)
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <mode_dual_scan+0x228>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	001c      	movs	r4, r3
 8003cc6:	0023      	movs	r3, r4
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	1b1b      	subs	r3, r3, r4
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	18c3      	adds	r3, r0, r3
 8003cd0:	889b      	ldrh	r3, [r3, #4]
 8003cd2:	1acb      	subs	r3, r1, r3
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	18d3      	adds	r3, r2, r3
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b218      	sxth	r0, r3
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <mode_dual_scan+0x224>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <mode_dual_scan+0x228>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	0019      	movs	r1, r3
 8003cee:	000b      	movs	r3, r1
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	1a5b      	subs	r3, r3, r1
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	18d3      	adds	r3, r2, r3
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	f7fd f88a 	bl	8000e14 <WS2811_SetDiodeColor>

  Ws28b11_Segments[mActualSegment].CounterModeStep++;
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <mode_dual_scan+0x224>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <mode_dual_scan+0x228>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0019      	movs	r1, r3
 8003d0a:	000b      	movs	r3, r1
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	1a5b      	subs	r3, r3, r1
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	18d3      	adds	r3, r2, r3
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	3201      	adds	r2, #1
 8003d18:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <mode_dual_scan+0x224>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <mode_dual_scan+0x228>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	0019      	movs	r1, r3
 8003d24:	000b      	movs	r3, r1
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	1a5b      	subs	r3, r3, r1
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	18d3      	adds	r3, r2, r3
 8003d2e:	8a98      	ldrh	r0, [r3, #20]
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <mode_dual_scan+0x224>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <mode_dual_scan+0x228>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	0019      	movs	r1, r3
 8003d3a:	000b      	movs	r3, r1
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	1a5b      	subs	r3, r3, r1
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	18d3      	adds	r3, r2, r3
 8003d44:	0002      	movs	r2, r0
 8003d46:	601a      	str	r2, [r3, #0]
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b003      	add	sp, #12
 8003d4e:	bd90      	pop	{r4, r7, pc}
 8003d50:	2000057c 	.word	0x2000057c
 8003d54:	20000754 	.word	0x20000754

08003d58 <theater_chase>:

/*
 * theater chase function
 */
void theater_chase(uint32_t color1, uint32_t color2)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
	Ws28b11_Segments[mActualSegment].CounterModeCall = Ws28b11_Segments[mActualSegment].CounterModeCall % 3;
 8003d62:	4b77      	ldr	r3, [pc, #476]	; (8003f40 <theater_chase+0x1e8>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b77      	ldr	r3, [pc, #476]	; (8003f44 <theater_chase+0x1ec>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	000b      	movs	r3, r1
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1a5b      	subs	r3, r3, r1
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	18d3      	adds	r3, r2, r3
 8003d76:	68d8      	ldr	r0, [r3, #12]
 8003d78:	4b71      	ldr	r3, [pc, #452]	; (8003f40 <theater_chase+0x1e8>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b71      	ldr	r3, [pc, #452]	; (8003f44 <theater_chase+0x1ec>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	0019      	movs	r1, r3
 8003d82:	000b      	movs	r3, r1
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	1a5b      	subs	r3, r3, r1
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	18d4      	adds	r4, r2, r3
 8003d8c:	2103      	movs	r1, #3
 8003d8e:	f7fc fa49 	bl	8000224 <__aeabi_uidivmod>
 8003d92:	000b      	movs	r3, r1
 8003d94:	60e3      	str	r3, [r4, #12]
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++) {
 8003d96:	230e      	movs	r3, #14
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	e096      	b.n	8003ece <theater_chase+0x176>
    if((i % 3) == Ws28b11_Segments[mActualSegment].CounterModeCall) {
 8003da0:	240e      	movs	r4, #14
 8003da2:	193b      	adds	r3, r7, r4
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	2103      	movs	r1, #3
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fc fa3b 	bl	8000224 <__aeabi_uidivmod>
 8003dae:	000b      	movs	r3, r1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	0018      	movs	r0, r3
 8003db4:	4b62      	ldr	r3, [pc, #392]	; (8003f40 <theater_chase+0x1e8>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <theater_chase+0x1ec>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	000b      	movs	r3, r1
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	1a5b      	subs	r3, r3, r1
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	18d3      	adds	r3, r2, r3
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4298      	cmp	r0, r3
 8003dcc:	d13c      	bne.n	8003e48 <theater_chase+0xf0>
      if(IS_REVERSE) {
 8003dce:	4b5c      	ldr	r3, [pc, #368]	; (8003f40 <theater_chase+0x1e8>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b5c      	ldr	r3, [pc, #368]	; (8003f44 <theater_chase+0x1ec>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	000b      	movs	r3, r1
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	1a5b      	subs	r3, r3, r1
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	18d3      	adds	r3, r2, r3
 8003de2:	7a9b      	ldrb	r3, [r3, #10]
 8003de4:	2201      	movs	r2, #1
 8003de6:	4013      	ands	r3, r2
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d015      	beq.n	8003e1a <theater_chase+0xc2>
    	  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - i, color1);
 8003dee:	4b54      	ldr	r3, [pc, #336]	; (8003f40 <theater_chase+0x1e8>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <theater_chase+0x1ec>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	0019      	movs	r1, r3
 8003df8:	000b      	movs	r3, r1
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a5b      	subs	r3, r3, r1
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	18d3      	adds	r3, r2, r3
 8003e02:	88da      	ldrh	r2, [r3, #6]
 8003e04:	193b      	adds	r3, r7, r4
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b21b      	sxth	r3, r3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	0011      	movs	r1, r2
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7fc fffe 	bl	8000e14 <WS2811_SetDiodeColor>
 8003e18:	e053      	b.n	8003ec2 <theater_chase+0x16a>
      } else {
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + i, color1);
 8003e1a:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <theater_chase+0x1e8>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b49      	ldr	r3, [pc, #292]	; (8003f44 <theater_chase+0x1ec>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	0019      	movs	r1, r3
 8003e24:	000b      	movs	r3, r1
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a5b      	subs	r3, r3, r1
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	18d3      	adds	r3, r2, r3
 8003e2e:	889a      	ldrh	r2, [r3, #4]
 8003e30:	230e      	movs	r3, #14
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	18d3      	adds	r3, r2, r3
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b21b      	sxth	r3, r3
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7fc ffe7 	bl	8000e14 <WS2811_SetDiodeColor>
 8003e46:	e03c      	b.n	8003ec2 <theater_chase+0x16a>
      }
    } else {
      if(IS_REVERSE) {
 8003e48:	4b3d      	ldr	r3, [pc, #244]	; (8003f40 <theater_chase+0x1e8>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b3d      	ldr	r3, [pc, #244]	; (8003f44 <theater_chase+0x1ec>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	0019      	movs	r1, r3
 8003e52:	000b      	movs	r3, r1
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	1a5b      	subs	r3, r3, r1
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	18d3      	adds	r3, r2, r3
 8003e5c:	7a9b      	ldrb	r3, [r3, #10]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4013      	ands	r3, r2
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d016      	beq.n	8003e96 <theater_chase+0x13e>
        WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - i, color2);
 8003e68:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <theater_chase+0x1e8>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <theater_chase+0x1ec>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	0019      	movs	r1, r3
 8003e72:	000b      	movs	r3, r1
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	1a5b      	subs	r3, r3, r1
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	18d3      	adds	r3, r2, r3
 8003e7c:	88da      	ldrh	r2, [r3, #6]
 8003e7e:	230e      	movs	r3, #14
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	0011      	movs	r1, r2
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7fc ffc0 	bl	8000e14 <WS2811_SetDiodeColor>
 8003e94:	e015      	b.n	8003ec2 <theater_chase+0x16a>
      } else {
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + i, color2);
 8003e96:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <theater_chase+0x1e8>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <theater_chase+0x1ec>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	000b      	movs	r3, r1
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	1a5b      	subs	r3, r3, r1
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	18d3      	adds	r3, r2, r3
 8003eaa:	889a      	ldrh	r2, [r3, #4]
 8003eac:	230e      	movs	r3, #14
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	18d3      	adds	r3, r2, r3
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	b21b      	sxth	r3, r3
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	0011      	movs	r1, r2
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f7fc ffa9 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++) {
 8003ec2:	210e      	movs	r1, #14
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	3201      	adds	r2, #1
 8003ecc:	801a      	strh	r2, [r3, #0]
 8003ece:	4b1c      	ldr	r3, [pc, #112]	; (8003f40 <theater_chase+0x1e8>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <theater_chase+0x1ec>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	000b      	movs	r3, r1
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	1a5b      	subs	r3, r3, r1
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	18d3      	adds	r3, r2, r3
 8003ee2:	88db      	ldrh	r3, [r3, #6]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <theater_chase+0x1e8>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <theater_chase+0x1ec>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	0019      	movs	r1, r3
 8003ef0:	000b      	movs	r3, r1
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	1a5b      	subs	r3, r3, r1
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	18d3      	adds	r3, r2, r3
 8003efa:	889b      	ldrh	r3, [r3, #4]
 8003efc:	1ac2      	subs	r2, r0, r3
 8003efe:	230e      	movs	r3, #14
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	db00      	blt.n	8003f0a <theater_chase+0x1b2>
 8003f08:	e74a      	b.n	8003da0 <theater_chase+0x48>
      }
    }
  }
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <theater_chase+0x1e8>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <theater_chase+0x1ec>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	0019      	movs	r1, r3
 8003f14:	000b      	movs	r3, r1
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	1a5b      	subs	r3, r3, r1
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	18d3      	adds	r3, r2, r3
 8003f1e:	8a98      	ldrh	r0, [r3, #20]
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <theater_chase+0x1e8>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <theater_chase+0x1ec>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	0019      	movs	r1, r3
 8003f2a:	000b      	movs	r3, r1
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	1a5b      	subs	r3, r3, r1
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	18d3      	adds	r3, r2, r3
 8003f34:	0002      	movs	r2, r0
 8003f36:	601a      	str	r2, [r3, #0]
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b005      	add	sp, #20
 8003f3e:	bd90      	pop	{r4, r7, pc}
 8003f40:	2000057c 	.word	0x2000057c
 8003f44:	20000754 	.word	0x20000754

08003f48 <mode_theater_chase>:
/*
 * Theatre-style crawling lights.
 * Inspired by the Adafruit examples.
 */
void mode_theater_chase(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0

  return theater_chase(Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[1]);
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <mode_theater_chase+0x3c>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <mode_theater_chase+0x40>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	0019      	movs	r1, r3
 8003f56:	000b      	movs	r3, r1
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	1a5b      	subs	r3, r3, r1
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	18d3      	adds	r3, r2, r3
 8003f60:	6998      	ldr	r0, [r3, #24]
 8003f62:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <mode_theater_chase+0x3c>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <mode_theater_chase+0x40>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	000b      	movs	r3, r1
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a5b      	subs	r3, r3, r1
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	0019      	movs	r1, r3
 8003f7a:	f7ff feed 	bl	8003d58 <theater_chase>
}
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	2000057c 	.word	0x2000057c
 8003f88:	20000754 	.word	0x20000754

08003f8c <mode_theater_chase_rainbow>:
/*
 * Theatre-style crawling lights with rainbow effect.
 * Inspired by the Adafruit examples.
 */
void mode_theater_chase_rainbow(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0

	Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) & 0xFF;
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <mode_theater_chase_rainbow+0x64>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <mode_theater_chase_rainbow+0x68>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	0019      	movs	r1, r3
 8003f9a:	000b      	movs	r3, r1
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	1a5b      	subs	r3, r3, r1
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	18d3      	adds	r3, r2, r3
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <mode_theater_chase_rainbow+0x64>)
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <mode_theater_chase_rainbow+0x68>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	1a1b      	subs	r3, r3, r0
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	18cb      	adds	r3, r1, r3
 8003fbc:	21ff      	movs	r1, #255	; 0xff
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	611a      	str	r2, [r3, #16]
	theater_chase(color_wheel(Ws28b11_Segments[mActualSegment].CounterModeStep), BLACK);
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <mode_theater_chase_rainbow+0x64>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <mode_theater_chase_rainbow+0x68>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	0019      	movs	r1, r3
 8003fcc:	000b      	movs	r3, r1
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	1a5b      	subs	r3, r3, r1
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	18d3      	adds	r3, r2, r3
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7fe f8e4 	bl	80021a8 <color_wheel>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7ff feb7 	bl	8003d58 <theater_chase>
}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	2000057c 	.word	0x2000057c
 8003ff4:	20000754 	.word	0x20000754

08003ff8 <mode_running_lights>:

/*
 * Running lights effect with smooth sine transition.
 */
void mode_running_lights(void) {
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
  uint8_t r = ((Ws28b11_Segments[mActualSegment].ModeColor[0] >> 16) & 0xFF);
 8003ffe:	4b8d      	ldr	r3, [pc, #564]	; (8004234 <mode_running_lights+0x23c>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b8d      	ldr	r3, [pc, #564]	; (8004238 <mode_running_lights+0x240>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	0019      	movs	r1, r3
 8004008:	000b      	movs	r3, r1
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a5b      	subs	r3, r3, r1
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	18d3      	adds	r3, r2, r3
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	0c1a      	lsrs	r2, r3, #16
 8004016:	230d      	movs	r3, #13
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	701a      	strb	r2, [r3, #0]
  uint8_t g = ((Ws28b11_Segments[mActualSegment].ModeColor[0] >>  8) & 0xFF);
 800401c:	4b85      	ldr	r3, [pc, #532]	; (8004234 <mode_running_lights+0x23c>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b85      	ldr	r3, [pc, #532]	; (8004238 <mode_running_lights+0x240>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	0019      	movs	r1, r3
 8004026:	000b      	movs	r3, r1
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	1a5b      	subs	r3, r3, r1
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	18d3      	adds	r3, r2, r3
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	0a1a      	lsrs	r2, r3, #8
 8004034:	230c      	movs	r3, #12
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	701a      	strb	r2, [r3, #0]
  uint8_t b =  (Ws28b11_Segments[mActualSegment].ModeColor[0]        & 0xFF);
 800403a:	4b7e      	ldr	r3, [pc, #504]	; (8004234 <mode_running_lights+0x23c>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b7e      	ldr	r3, [pc, #504]	; (8004238 <mode_running_lights+0x240>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	0019      	movs	r1, r3
 8004044:	000b      	movs	r3, r1
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	1a5b      	subs	r3, r3, r1
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	18d3      	adds	r3, r2, r3
 800404e:	699a      	ldr	r2, [r3, #24]
 8004050:	230b      	movs	r3, #11
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	701a      	strb	r2, [r3, #0]

  uint8_t sineIncr = MAX(1, (256 / WS2811_LEDS));
 8004056:	230a      	movs	r3, #10
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	2208      	movs	r2, #8
 800405c:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++) {
 800405e:	230e      	movs	r3, #14
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	2200      	movs	r2, #0
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	e093      	b.n	8004190 <mode_running_lights+0x198>
    int lum = (int)sine8(((i + Ws28b11_Segments[mActualSegment].CounterModeStep) * sineIncr));
 8004068:	240e      	movs	r4, #14
 800406a:	193b      	adds	r3, r7, r4
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	4b71      	ldr	r3, [pc, #452]	; (8004234 <mode_running_lights+0x23c>)
 8004070:	6819      	ldr	r1, [r3, #0]
 8004072:	4b71      	ldr	r3, [pc, #452]	; (8004238 <mode_running_lights+0x240>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	0018      	movs	r0, r3
 8004078:	0003      	movs	r3, r0
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a1b      	subs	r3, r3, r0
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	18cb      	adds	r3, r1, r3
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	18d3      	adds	r3, r2, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	220a      	movs	r2, #10
 800408a:	18ba      	adds	r2, r7, r2
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	4353      	muls	r3, r2
 8004090:	b2db      	uxtb	r3, r3
 8004092:	0018      	movs	r0, r3
 8004094:	f7fd f8c6 	bl	8001224 <sine8>
 8004098:	0003      	movs	r3, r0
 800409a:	607b      	str	r3, [r7, #4]
    if(IS_REVERSE) {
 800409c:	4b65      	ldr	r3, [pc, #404]	; (8004234 <mode_running_lights+0x23c>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b65      	ldr	r3, [pc, #404]	; (8004238 <mode_running_lights+0x240>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	0019      	movs	r1, r3
 80040a6:	000b      	movs	r3, r1
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	1a5b      	subs	r3, r3, r1
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	18d3      	adds	r3, r2, r3
 80040b0:	7a9b      	ldrb	r3, [r3, #10]
 80040b2:	2201      	movs	r2, #1
 80040b4:	4013      	ands	r3, r2
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d031      	beq.n	8004120 <mode_running_lights+0x128>
    WS2811_SetDiodeRGB(Ws28b11_Segments[mActualSegment].IdStart + i,  (r * lum) / 256, (g * lum) / 256, (b * lum) / 256);
 80040bc:	4b5d      	ldr	r3, [pc, #372]	; (8004234 <mode_running_lights+0x23c>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4b5d      	ldr	r3, [pc, #372]	; (8004238 <mode_running_lights+0x240>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	0019      	movs	r1, r3
 80040c6:	000b      	movs	r3, r1
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	1a5b      	subs	r3, r3, r1
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	18d3      	adds	r3, r2, r3
 80040d0:	889a      	ldrh	r2, [r3, #4]
 80040d2:	193b      	adds	r3, r7, r4
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	18d3      	adds	r3, r2, r3
 80040d8:	b29b      	uxth	r3, r3
 80040da:	b218      	sxth	r0, r3
 80040dc:	230d      	movs	r3, #13
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4353      	muls	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	da00      	bge.n	80040ec <mode_running_lights+0xf4>
 80040ea:	33ff      	adds	r3, #255	; 0xff
 80040ec:	121b      	asrs	r3, r3, #8
 80040ee:	b2d9      	uxtb	r1, r3
 80040f0:	230c      	movs	r3, #12
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4353      	muls	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da00      	bge.n	8004100 <mode_running_lights+0x108>
 80040fe:	33ff      	adds	r3, #255	; 0xff
 8004100:	121b      	asrs	r3, r3, #8
 8004102:	b2dc      	uxtb	r4, r3
 8004104:	230b      	movs	r3, #11
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4353      	muls	r3, r2
 800410e:	2b00      	cmp	r3, #0
 8004110:	da00      	bge.n	8004114 <mode_running_lights+0x11c>
 8004112:	33ff      	adds	r3, #255	; 0xff
 8004114:	121b      	asrs	r3, r3, #8
 8004116:	b2db      	uxtb	r3, r3
 8004118:	0022      	movs	r2, r4
 800411a:	f7fc fee3 	bl	8000ee4 <WS2811_SetDiodeRGB>
 800411e:	e031      	b.n	8004184 <mode_running_lights+0x18c>
    } else {
    WS2811_SetDiodeRGB(Ws28b11_Segments[mActualSegment].IdStop - i,  (r * lum) / 256, (g * lum) / 256, (b * lum) / 256);
 8004120:	4b44      	ldr	r3, [pc, #272]	; (8004234 <mode_running_lights+0x23c>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b44      	ldr	r3, [pc, #272]	; (8004238 <mode_running_lights+0x240>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	0019      	movs	r1, r3
 800412a:	000b      	movs	r3, r1
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	1a5b      	subs	r3, r3, r1
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	18d3      	adds	r3, r2, r3
 8004134:	88da      	ldrh	r2, [r3, #6]
 8004136:	230e      	movs	r3, #14
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	b29b      	uxth	r3, r3
 8004140:	b218      	sxth	r0, r3
 8004142:	230d      	movs	r3, #13
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4353      	muls	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	da00      	bge.n	8004152 <mode_running_lights+0x15a>
 8004150:	33ff      	adds	r3, #255	; 0xff
 8004152:	121b      	asrs	r3, r3, #8
 8004154:	b2d9      	uxtb	r1, r3
 8004156:	230c      	movs	r3, #12
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4353      	muls	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	da00      	bge.n	8004166 <mode_running_lights+0x16e>
 8004164:	33ff      	adds	r3, #255	; 0xff
 8004166:	121b      	asrs	r3, r3, #8
 8004168:	b2dc      	uxtb	r4, r3
 800416a:	230b      	movs	r3, #11
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4353      	muls	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	da00      	bge.n	800417a <mode_running_lights+0x182>
 8004178:	33ff      	adds	r3, #255	; 0xff
 800417a:	121b      	asrs	r3, r3, #8
 800417c:	b2db      	uxtb	r3, r3
 800417e:	0022      	movs	r2, r4
 8004180:	f7fc feb0 	bl	8000ee4 <WS2811_SetDiodeRGB>
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++) {
 8004184:	210e      	movs	r1, #14
 8004186:	187b      	adds	r3, r7, r1
 8004188:	881a      	ldrh	r2, [r3, #0]
 800418a:	187b      	adds	r3, r7, r1
 800418c:	3201      	adds	r2, #1
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	4b28      	ldr	r3, [pc, #160]	; (8004234 <mode_running_lights+0x23c>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b28      	ldr	r3, [pc, #160]	; (8004238 <mode_running_lights+0x240>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	0019      	movs	r1, r3
 800419a:	000b      	movs	r3, r1
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	1a5b      	subs	r3, r3, r1
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	18d3      	adds	r3, r2, r3
 80041a4:	88db      	ldrh	r3, [r3, #6]
 80041a6:	0018      	movs	r0, r3
 80041a8:	4b22      	ldr	r3, [pc, #136]	; (8004234 <mode_running_lights+0x23c>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b22      	ldr	r3, [pc, #136]	; (8004238 <mode_running_lights+0x240>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	0019      	movs	r1, r3
 80041b2:	000b      	movs	r3, r1
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	1a5b      	subs	r3, r3, r1
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	18d3      	adds	r3, r2, r3
 80041bc:	889b      	ldrh	r3, [r3, #4]
 80041be:	1ac2      	subs	r2, r0, r3
 80041c0:	230e      	movs	r3, #14
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	db00      	blt.n	80041cc <mode_running_lights+0x1d4>
 80041ca:	e74d      	b.n	8004068 <mode_running_lights+0x70>
    }
  }
  Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % 256;
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <mode_running_lights+0x23c>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <mode_running_lights+0x240>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	0019      	movs	r1, r3
 80041d6:	000b      	movs	r3, r1
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	1a5b      	subs	r3, r3, r1
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	18d3      	adds	r3, r2, r3
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	4b13      	ldr	r3, [pc, #76]	; (8004234 <mode_running_lights+0x23c>)
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <mode_running_lights+0x240>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	0018      	movs	r0, r3
 80041ee:	0003      	movs	r3, r0
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	1a1b      	subs	r3, r3, r0
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	18cb      	adds	r3, r1, r3
 80041f8:	21ff      	movs	r1, #255	; 0xff
 80041fa:	400a      	ands	r2, r1
 80041fc:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <mode_running_lights+0x23c>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <mode_running_lights+0x240>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	0019      	movs	r1, r3
 8004208:	000b      	movs	r3, r1
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	1a5b      	subs	r3, r3, r1
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	18d3      	adds	r3, r2, r3
 8004212:	8a98      	ldrh	r0, [r3, #20]
 8004214:	4b07      	ldr	r3, [pc, #28]	; (8004234 <mode_running_lights+0x23c>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <mode_running_lights+0x240>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	0019      	movs	r1, r3
 800421e:	000b      	movs	r3, r1
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	1a5b      	subs	r3, r3, r1
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	18d3      	adds	r3, r2, r3
 8004228:	0002      	movs	r2, r0
 800422a:	601a      	str	r2, [r3, #0]
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b005      	add	sp, #20
 8004232:	bd90      	pop	{r4, r7, pc}
 8004234:	2000057c 	.word	0x2000057c
 8004238:	20000754 	.word	0x20000754

0800423c <twinkle>:

/*
 * twinkle function
 */
void twinkle(uint32_t color1, uint32_t color2)
{
 800423c:	b5b0      	push	{r4, r5, r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  if(Ws28b11_Segments[mActualSegment].CounterModeStep == 0)
 8004246:	4b5c      	ldr	r3, [pc, #368]	; (80043b8 <twinkle+0x17c>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b5c      	ldr	r3, [pc, #368]	; (80043bc <twinkle+0x180>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	0019      	movs	r1, r3
 8004250:	000b      	movs	r3, r1
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a5b      	subs	r3, r3, r1
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	18d3      	adds	r3, r2, r3
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d150      	bne.n	8004302 <twinkle+0xc6>
  {
    for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8004260:	4b55      	ldr	r3, [pc, #340]	; (80043b8 <twinkle+0x17c>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b55      	ldr	r3, [pc, #340]	; (80043bc <twinkle+0x180>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	0019      	movs	r1, r3
 800426a:	000b      	movs	r3, r1
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	1a5b      	subs	r3, r3, r1
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	18d2      	adds	r2, r2, r3
 8004274:	230e      	movs	r3, #14
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	8892      	ldrh	r2, [r2, #4]
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	e00d      	b.n	800429a <twinkle+0x5e>
    {
    	WS2811_SetDiodeColor(i, color2);
 800427e:	240e      	movs	r4, #14
 8004280:	193b      	adds	r3, r7, r4
 8004282:	2200      	movs	r2, #0
 8004284:	5e9b      	ldrsh	r3, [r3, r2]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	0011      	movs	r1, r2
 800428a:	0018      	movs	r0, r3
 800428c:	f7fc fdc2 	bl	8000e14 <WS2811_SetDiodeColor>
    for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8004290:	193b      	adds	r3, r7, r4
 8004292:	881a      	ldrh	r2, [r3, #0]
 8004294:	193b      	adds	r3, r7, r4
 8004296:	3201      	adds	r2, #1
 8004298:	801a      	strh	r2, [r3, #0]
 800429a:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <twinkle+0x17c>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b47      	ldr	r3, [pc, #284]	; (80043bc <twinkle+0x180>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	0019      	movs	r1, r3
 80042a4:	000b      	movs	r3, r1
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a5b      	subs	r3, r3, r1
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	18d3      	adds	r3, r2, r3
 80042ae:	88db      	ldrh	r3, [r3, #6]
 80042b0:	220e      	movs	r2, #14
 80042b2:	18ba      	adds	r2, r7, r2
 80042b4:	8812      	ldrh	r2, [r2, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d9e1      	bls.n	800427e <twinkle+0x42>
    }
    uint16_t min_leds = MAX(1, WS2811_LEDS / 5); // make sure, at least one LED is on
 80042ba:	240c      	movs	r4, #12
 80042bc:	193b      	adds	r3, r7, r4
 80042be:	2206      	movs	r2, #6
 80042c0:	801a      	strh	r2, [r3, #0]
    uint16_t max_leds = MAX(1, WS2811_LEDS / 2); // make sure, at least one LED is on
 80042c2:	250a      	movs	r5, #10
 80042c4:	197b      	adds	r3, r7, r5
 80042c6:	2210      	movs	r2, #16
 80042c8:	801a      	strh	r2, [r3, #0]
    Ws28b11_Segments[mActualSegment].CounterModeStep = rand() % (max_leds + 1 - min_leds) + min_leds;
 80042ca:	f005 fda3 	bl	8009e14 <rand>
 80042ce:	197b      	adds	r3, r7, r5
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	193b      	adds	r3, r7, r4
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	0019      	movs	r1, r3
 80042dc:	f7fc f88c 	bl	80003f8 <__aeabi_idivmod>
 80042e0:	000b      	movs	r3, r1
 80042e2:	001a      	movs	r2, r3
 80042e4:	193b      	adds	r3, r7, r4
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	18d0      	adds	r0, r2, r3
 80042ea:	4b33      	ldr	r3, [pc, #204]	; (80043b8 <twinkle+0x17c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b33      	ldr	r3, [pc, #204]	; (80043bc <twinkle+0x180>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	0019      	movs	r1, r3
 80042f4:	000b      	movs	r3, r1
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	1a5b      	subs	r3, r3, r1
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	18d3      	adds	r3, r2, r3
 80042fe:	0002      	movs	r2, r0
 8004300:	611a      	str	r2, [r3, #16]
  }

  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + rand() % SEGMENT_LENGTH, color1);
 8004302:	4b2d      	ldr	r3, [pc, #180]	; (80043b8 <twinkle+0x17c>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4b2d      	ldr	r3, [pc, #180]	; (80043bc <twinkle+0x180>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	0019      	movs	r1, r3
 800430c:	000b      	movs	r3, r1
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	1a5b      	subs	r3, r3, r1
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	18d3      	adds	r3, r2, r3
 8004316:	889c      	ldrh	r4, [r3, #4]
 8004318:	f005 fd7c 	bl	8009e14 <rand>
 800431c:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <twinkle+0x17c>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b26      	ldr	r3, [pc, #152]	; (80043bc <twinkle+0x180>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	0019      	movs	r1, r3
 8004326:	000b      	movs	r3, r1
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	1a5b      	subs	r3, r3, r1
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	18d3      	adds	r3, r2, r3
 8004330:	88db      	ldrh	r3, [r3, #6]
 8004332:	001d      	movs	r5, r3
 8004334:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <twinkle+0x17c>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b20      	ldr	r3, [pc, #128]	; (80043bc <twinkle+0x180>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	0019      	movs	r1, r3
 800433e:	000b      	movs	r3, r1
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	1a5b      	subs	r3, r3, r1
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	18d3      	adds	r3, r2, r3
 8004348:	889b      	ldrh	r3, [r3, #4]
 800434a:	1aeb      	subs	r3, r5, r3
 800434c:	3301      	adds	r3, #1
 800434e:	0019      	movs	r1, r3
 8004350:	f7fc f852 	bl	80003f8 <__aeabi_idivmod>
 8004354:	000b      	movs	r3, r1
 8004356:	b29b      	uxth	r3, r3
 8004358:	18e3      	adds	r3, r4, r3
 800435a:	b29b      	uxth	r3, r3
 800435c:	b21b      	sxth	r3, r3
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	0011      	movs	r1, r2
 8004362:	0018      	movs	r0, r3
 8004364:	f7fc fd56 	bl	8000e14 <WS2811_SetDiodeColor>

  Ws28b11_Segments[mActualSegment].CounterModeStep--;
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <twinkle+0x17c>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <twinkle+0x180>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	0019      	movs	r1, r3
 8004372:	000b      	movs	r3, r1
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	1a5b      	subs	r3, r3, r1
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	18d3      	adds	r3, r2, r3
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	3a01      	subs	r2, #1
 8004380:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <twinkle+0x17c>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <twinkle+0x180>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	0019      	movs	r1, r3
 800438c:	000b      	movs	r3, r1
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	1a5b      	subs	r3, r3, r1
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	18d3      	adds	r3, r2, r3
 8004396:	8a98      	ldrh	r0, [r3, #20]
 8004398:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <twinkle+0x17c>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4b07      	ldr	r3, [pc, #28]	; (80043bc <twinkle+0x180>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	0019      	movs	r1, r3
 80043a2:	000b      	movs	r3, r1
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	1a5b      	subs	r3, r3, r1
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	18d3      	adds	r3, r2, r3
 80043ac:	0002      	movs	r2, r0
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b004      	add	sp, #16
 80043b6:	bdb0      	pop	{r4, r5, r7, pc}
 80043b8:	2000057c 	.word	0x2000057c
 80043bc:	20000754 	.word	0x20000754

080043c0 <mode_twinkle>:
/*
 * Blink several LEDs on, reset, repeat.
 * Inspired by www.tweaking4all.com/hardware/arduino/arduino-led-strip-effects/
 */
void mode_twinkle(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  return twinkle(Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[1]);
 80043c4:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <mode_twinkle+0x3c>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <mode_twinkle+0x40>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	0019      	movs	r1, r3
 80043ce:	000b      	movs	r3, r1
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	1a5b      	subs	r3, r3, r1
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	18d3      	adds	r3, r2, r3
 80043d8:	6998      	ldr	r0, [r3, #24]
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <mode_twinkle+0x3c>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <mode_twinkle+0x40>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	0019      	movs	r1, r3
 80043e4:	000b      	movs	r3, r1
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	1a5b      	subs	r3, r3, r1
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	18d3      	adds	r3, r2, r3
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	0019      	movs	r1, r3
 80043f2:	f7ff ff23 	bl	800423c <twinkle>
}
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	2000057c 	.word	0x2000057c
 8004400:	20000754 	.word	0x20000754

08004404 <mode_twinkle_random>:
/*
 * Blink several LEDs in random colors on, reset, repeat.
 * Inspired by www.tweaking4all.com/hardware/arduino/arduino-led-strip-effects/
 */
void mode_twinkle_random(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  return twinkle(color_wheel(rand() % 256), Ws28b11_Segments[mActualSegment].ModeColor[1]);
 8004408:	f005 fd04 	bl	8009e14 <rand>
 800440c:	0003      	movs	r3, r0
 800440e:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <mode_twinkle_random+0x40>)
 8004410:	4013      	ands	r3, r2
 8004412:	d503      	bpl.n	800441c <mode_twinkle_random+0x18>
 8004414:	3b01      	subs	r3, #1
 8004416:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <mode_twinkle_random+0x44>)
 8004418:	4313      	orrs	r3, r2
 800441a:	3301      	adds	r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	0018      	movs	r0, r3
 8004420:	f7fd fec2 	bl	80021a8 <color_wheel>
 8004424:	4b09      	ldr	r3, [pc, #36]	; (800444c <mode_twinkle_random+0x48>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <mode_twinkle_random+0x4c>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	0019      	movs	r1, r3
 800442e:	000b      	movs	r3, r1
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	1a5b      	subs	r3, r3, r1
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	18d3      	adds	r3, r2, r3
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	0019      	movs	r1, r3
 800443c:	f7ff fefe 	bl	800423c <twinkle>
}
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	800000ff 	.word	0x800000ff
 8004448:	ffffff00 	.word	0xffffff00
 800444c:	2000057c 	.word	0x2000057c
 8004450:	20000754 	.word	0x20000754

08004454 <twinkle_fade>:

/*
 * twinkle_fade function
 */
void twinkle_fade(uint32_t color)
{
 8004454:	b5b0      	push	{r4, r5, r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  fade_out();
 800445c:	f7fd ff42 	bl	80022e4 <fade_out>

  if((rand() %3) == 0)
 8004460:	f005 fcd8 	bl	8009e14 <rand>
 8004464:	0003      	movs	r3, r0
 8004466:	2103      	movs	r1, #3
 8004468:	0018      	movs	r0, r3
 800446a:	f7fb ffc5 	bl	80003f8 <__aeabi_idivmod>
 800446e:	1e0b      	subs	r3, r1, #0
 8004470:	d132      	bne.n	80044d8 <twinkle_fade+0x84>
  {
	  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + rand() % SEGMENT_LENGTH, color);
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <twinkle_fade+0xbc>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b27      	ldr	r3, [pc, #156]	; (8004514 <twinkle_fade+0xc0>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	0019      	movs	r1, r3
 800447c:	000b      	movs	r3, r1
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	1a5b      	subs	r3, r3, r1
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	18d3      	adds	r3, r2, r3
 8004486:	889c      	ldrh	r4, [r3, #4]
 8004488:	f005 fcc4 	bl	8009e14 <rand>
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <twinkle_fade+0xbc>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b20      	ldr	r3, [pc, #128]	; (8004514 <twinkle_fade+0xc0>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	0019      	movs	r1, r3
 8004496:	000b      	movs	r3, r1
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	1a5b      	subs	r3, r3, r1
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	18d3      	adds	r3, r2, r3
 80044a0:	88db      	ldrh	r3, [r3, #6]
 80044a2:	001d      	movs	r5, r3
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <twinkle_fade+0xbc>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	4b1a      	ldr	r3, [pc, #104]	; (8004514 <twinkle_fade+0xc0>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	0019      	movs	r1, r3
 80044ae:	000b      	movs	r3, r1
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	1a5b      	subs	r3, r3, r1
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	18d3      	adds	r3, r2, r3
 80044b8:	889b      	ldrh	r3, [r3, #4]
 80044ba:	1aeb      	subs	r3, r5, r3
 80044bc:	3301      	adds	r3, #1
 80044be:	0019      	movs	r1, r3
 80044c0:	f7fb ff9a 	bl	80003f8 <__aeabi_idivmod>
 80044c4:	000b      	movs	r3, r1
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	18e3      	adds	r3, r4, r3
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	b21b      	sxth	r3, r3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	0011      	movs	r1, r2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7fc fc9e 	bl	8000e14 <WS2811_SetDiodeColor>
  }
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <twinkle_fade+0xbc>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <twinkle_fade+0xc0>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	0019      	movs	r1, r3
 80044e2:	000b      	movs	r3, r1
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	1a5b      	subs	r3, r3, r1
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	18d3      	adds	r3, r2, r3
 80044ec:	8a98      	ldrh	r0, [r3, #20]
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <twinkle_fade+0xbc>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <twinkle_fade+0xc0>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	0019      	movs	r1, r3
 80044f8:	000b      	movs	r3, r1
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	1a5b      	subs	r3, r3, r1
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	18d3      	adds	r3, r2, r3
 8004502:	0002      	movs	r2, r0
 8004504:	601a      	str	r2, [r3, #0]
}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	46bd      	mov	sp, r7
 800450a:	b002      	add	sp, #8
 800450c:	bdb0      	pop	{r4, r5, r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	2000057c 	.word	0x2000057c
 8004514:	20000754 	.word	0x20000754

08004518 <mode_twinkle_fade>:

/*
 * Blink several LEDs on, fading out.
 */
void mode_twinkle_fade(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  twinkle_fade(Ws28b11_Segments[mActualSegment].ModeColor[0]);
 800451c:	4b08      	ldr	r3, [pc, #32]	; (8004540 <mode_twinkle_fade+0x28>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b08      	ldr	r3, [pc, #32]	; (8004544 <mode_twinkle_fade+0x2c>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	0019      	movs	r1, r3
 8004526:	000b      	movs	r3, r1
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	1a5b      	subs	r3, r3, r1
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	18d3      	adds	r3, r2, r3
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff ff8e 	bl	8004454 <twinkle_fade>
}
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	2000057c 	.word	0x2000057c
 8004544:	20000754 	.word	0x20000754

08004548 <mode_twinkle_fade_random>:

/*
 * Blink several LEDs in random colors on, fading out.
 */
void mode_twinkle_fade_random(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  twinkle_fade(color_wheel(rand() % 256));
 800454c:	f005 fc62 	bl	8009e14 <rand>
 8004550:	0003      	movs	r3, r0
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <mode_twinkle_fade_random+0x30>)
 8004554:	4013      	ands	r3, r2
 8004556:	d503      	bpl.n	8004560 <mode_twinkle_fade_random+0x18>
 8004558:	3b01      	subs	r3, #1
 800455a:	4a08      	ldr	r2, [pc, #32]	; (800457c <mode_twinkle_fade_random+0x34>)
 800455c:	4313      	orrs	r3, r2
 800455e:	3301      	adds	r3, #1
 8004560:	b2db      	uxtb	r3, r3
 8004562:	0018      	movs	r0, r3
 8004564:	f7fd fe20 	bl	80021a8 <color_wheel>
 8004568:	0003      	movs	r3, r0
 800456a:	0018      	movs	r0, r3
 800456c:	f7ff ff72 	bl	8004454 <twinkle_fade>
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	800000ff 	.word	0x800000ff
 800457c:	ffffff00 	.word	0xffffff00

08004580 <mode_sparkle>:
/*
 * Blinks one LED at a time.
 * Inspired by www.tweaking4all.com/hardware/arduino/arduino-led-strip-effects/
 */
void mode_sparkle(void)
{
 8004580:	b5b0      	push	{r4, r5, r7, lr}
 8004582:	af00      	add	r7, sp, #0
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + Ws28b11_Segments[mActualSegment].AuxParam16b, Ws28b11_Segments[mActualSegment].ModeColor[1]);
 8004584:	4b49      	ldr	r3, [pc, #292]	; (80046ac <mode_sparkle+0x12c>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b49      	ldr	r3, [pc, #292]	; (80046b0 <mode_sparkle+0x130>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	0019      	movs	r1, r3
 800458e:	000b      	movs	r3, r1
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	1a5b      	subs	r3, r3, r1
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	18d3      	adds	r3, r2, r3
 8004598:	889a      	ldrh	r2, [r3, #4]
 800459a:	4b44      	ldr	r3, [pc, #272]	; (80046ac <mode_sparkle+0x12c>)
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	4b44      	ldr	r3, [pc, #272]	; (80046b0 <mode_sparkle+0x130>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	0018      	movs	r0, r3
 80045a4:	0003      	movs	r3, r0
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	1a1b      	subs	r3, r3, r0
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	18cb      	adds	r3, r1, r3
 80045ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b0:	18d3      	adds	r3, r2, r3
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	b218      	sxth	r0, r3
 80045b6:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <mode_sparkle+0x12c>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b3d      	ldr	r3, [pc, #244]	; (80046b0 <mode_sparkle+0x130>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	0019      	movs	r1, r3
 80045c0:	000b      	movs	r3, r1
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	1a5b      	subs	r3, r3, r1
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	18d3      	adds	r3, r2, r3
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	0019      	movs	r1, r3
 80045ce:	f7fc fc21 	bl	8000e14 <WS2811_SetDiodeColor>
  Ws28b11_Segments[mActualSegment].AuxParam16b = rand() % SEGMENT_LENGTH; // aux_param3 stores the random led index
 80045d2:	f005 fc1f 	bl	8009e14 <rand>
 80045d6:	4b35      	ldr	r3, [pc, #212]	; (80046ac <mode_sparkle+0x12c>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b35      	ldr	r3, [pc, #212]	; (80046b0 <mode_sparkle+0x130>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	0019      	movs	r1, r3
 80045e0:	000b      	movs	r3, r1
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	1a5b      	subs	r3, r3, r1
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	18d3      	adds	r3, r2, r3
 80045ea:	88db      	ldrh	r3, [r3, #6]
 80045ec:	001c      	movs	r4, r3
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <mode_sparkle+0x12c>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b2f      	ldr	r3, [pc, #188]	; (80046b0 <mode_sparkle+0x130>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	0019      	movs	r1, r3
 80045f8:	000b      	movs	r3, r1
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	1a5b      	subs	r3, r3, r1
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	889b      	ldrh	r3, [r3, #4]
 8004604:	1ae3      	subs	r3, r4, r3
 8004606:	3301      	adds	r3, #1
 8004608:	0019      	movs	r1, r3
 800460a:	f7fb fef5 	bl	80003f8 <__aeabi_idivmod>
 800460e:	000b      	movs	r3, r1
 8004610:	0018      	movs	r0, r3
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <mode_sparkle+0x12c>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <mode_sparkle+0x130>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	0019      	movs	r1, r3
 800461c:	000b      	movs	r3, r1
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	1a5b      	subs	r3, r3, r1
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	18d3      	adds	r3, r2, r3
 8004626:	b282      	uxth	r2, r0
 8004628:	85da      	strh	r2, [r3, #46]	; 0x2e
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + Ws28b11_Segments[mActualSegment].AuxParam16b, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <mode_sparkle+0x12c>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <mode_sparkle+0x130>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	0019      	movs	r1, r3
 8004634:	000b      	movs	r3, r1
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	1a5b      	subs	r3, r3, r1
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	18d3      	adds	r3, r2, r3
 800463e:	889a      	ldrh	r2, [r3, #4]
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <mode_sparkle+0x12c>)
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <mode_sparkle+0x130>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	0018      	movs	r0, r3
 800464a:	0003      	movs	r3, r0
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	1a1b      	subs	r3, r3, r0
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	18cb      	adds	r3, r1, r3
 8004654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004656:	18d3      	adds	r3, r2, r3
 8004658:	b29b      	uxth	r3, r3
 800465a:	b218      	sxth	r0, r3
 800465c:	4b13      	ldr	r3, [pc, #76]	; (80046ac <mode_sparkle+0x12c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <mode_sparkle+0x130>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	0019      	movs	r1, r3
 8004666:	000b      	movs	r3, r1
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	1a5b      	subs	r3, r3, r1
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	18d3      	adds	r3, r2, r3
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	0019      	movs	r1, r3
 8004674:	f7fc fbce 	bl	8000e14 <WS2811_SetDiodeColor>
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <mode_sparkle+0x12c>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <mode_sparkle+0x130>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	0019      	movs	r1, r3
 8004682:	000b      	movs	r3, r1
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	1a5b      	subs	r3, r3, r1
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	18d3      	adds	r3, r2, r3
 800468c:	8a98      	ldrh	r0, [r3, #20]
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <mode_sparkle+0x12c>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <mode_sparkle+0x130>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	0019      	movs	r1, r3
 8004698:	000b      	movs	r3, r1
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	1a5b      	subs	r3, r3, r1
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	18d3      	adds	r3, r2, r3
 80046a2:	0002      	movs	r2, r0
 80046a4:	601a      	str	r2, [r3, #0]
}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bdb0      	pop	{r4, r5, r7, pc}
 80046ac:	2000057c 	.word	0x2000057c
 80046b0:	20000754 	.word	0x20000754

080046b4 <mode_flash_sparkle>:
/*
 * Lights all LEDs in the color. Flashes single white pixels randomly.
 * Inspired by www.tweaking4all.com/hardware/arduino/arduino-led-strip-effects/
 */
void mode_flash_sparkle(void)
{
 80046b4:	b590      	push	{r4, r7, lr}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
  if(Ws28b11_Segments[mActualSegment].CounterModeCall == 0)
 80046ba:	4b70      	ldr	r3, [pc, #448]	; (800487c <mode_flash_sparkle+0x1c8>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b70      	ldr	r3, [pc, #448]	; (8004880 <mode_flash_sparkle+0x1cc>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	0019      	movs	r1, r3
 80046c4:	000b      	movs	r3, r1
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	1a5b      	subs	r3, r3, r1
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	18d3      	adds	r3, r2, r3
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d132      	bne.n	800473a <mode_flash_sparkle+0x86>
  {
    for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 80046d4:	4b69      	ldr	r3, [pc, #420]	; (800487c <mode_flash_sparkle+0x1c8>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b69      	ldr	r3, [pc, #420]	; (8004880 <mode_flash_sparkle+0x1cc>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	0019      	movs	r1, r3
 80046de:	000b      	movs	r3, r1
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	1a5b      	subs	r3, r3, r1
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	18d2      	adds	r2, r2, r3
 80046e8:	1dbb      	adds	r3, r7, #6
 80046ea:	8892      	ldrh	r2, [r2, #4]
 80046ec:	801a      	strh	r2, [r3, #0]
 80046ee:	e015      	b.n	800471c <mode_flash_sparkle+0x68>
    {
      WS2811_SetDiodeColor(i, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 80046f0:	1dbb      	adds	r3, r7, #6
 80046f2:	2000      	movs	r0, #0
 80046f4:	5e18      	ldrsh	r0, [r3, r0]
 80046f6:	4b61      	ldr	r3, [pc, #388]	; (800487c <mode_flash_sparkle+0x1c8>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b61      	ldr	r3, [pc, #388]	; (8004880 <mode_flash_sparkle+0x1cc>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	0019      	movs	r1, r3
 8004700:	000b      	movs	r3, r1
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	1a5b      	subs	r3, r3, r1
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	0019      	movs	r1, r3
 800470e:	f7fc fb81 	bl	8000e14 <WS2811_SetDiodeColor>
    for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8004712:	1dbb      	adds	r3, r7, #6
 8004714:	881a      	ldrh	r2, [r3, #0]
 8004716:	1dbb      	adds	r3, r7, #6
 8004718:	3201      	adds	r2, #1
 800471a:	801a      	strh	r2, [r3, #0]
 800471c:	4b57      	ldr	r3, [pc, #348]	; (800487c <mode_flash_sparkle+0x1c8>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b57      	ldr	r3, [pc, #348]	; (8004880 <mode_flash_sparkle+0x1cc>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	0019      	movs	r1, r3
 8004726:	000b      	movs	r3, r1
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	1a5b      	subs	r3, r3, r1
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	18d3      	adds	r3, r2, r3
 8004730:	88db      	ldrh	r3, [r3, #6]
 8004732:	1dba      	adds	r2, r7, #6
 8004734:	8812      	ldrh	r2, [r2, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d9da      	bls.n	80046f0 <mode_flash_sparkle+0x3c>
    }
  }

  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + Ws28b11_Segments[mActualSegment].AuxParam16b, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 800473a:	4b50      	ldr	r3, [pc, #320]	; (800487c <mode_flash_sparkle+0x1c8>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b50      	ldr	r3, [pc, #320]	; (8004880 <mode_flash_sparkle+0x1cc>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	0019      	movs	r1, r3
 8004744:	000b      	movs	r3, r1
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a5b      	subs	r3, r3, r1
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	18d3      	adds	r3, r2, r3
 800474e:	889a      	ldrh	r2, [r3, #4]
 8004750:	4b4a      	ldr	r3, [pc, #296]	; (800487c <mode_flash_sparkle+0x1c8>)
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <mode_flash_sparkle+0x1cc>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	0018      	movs	r0, r3
 800475a:	0003      	movs	r3, r0
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	1a1b      	subs	r3, r3, r0
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	18cb      	adds	r3, r1, r3
 8004764:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004766:	18d3      	adds	r3, r2, r3
 8004768:	b29b      	uxth	r3, r3
 800476a:	b218      	sxth	r0, r3
 800476c:	4b43      	ldr	r3, [pc, #268]	; (800487c <mode_flash_sparkle+0x1c8>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b43      	ldr	r3, [pc, #268]	; (8004880 <mode_flash_sparkle+0x1cc>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	0019      	movs	r1, r3
 8004776:	000b      	movs	r3, r1
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	1a5b      	subs	r3, r3, r1
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	18d3      	adds	r3, r2, r3
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	0019      	movs	r1, r3
 8004784:	f7fc fb46 	bl	8000e14 <WS2811_SetDiodeColor>

  if(rand() % 5 == 0)
 8004788:	f005 fb44 	bl	8009e14 <rand>
 800478c:	0003      	movs	r3, r0
 800478e:	2105      	movs	r1, #5
 8004790:	0018      	movs	r0, r3
 8004792:	f7fb fe31 	bl	80003f8 <__aeabi_idivmod>
 8004796:	1e0b      	subs	r3, r1, #0
 8004798:	d155      	bne.n	8004846 <mode_flash_sparkle+0x192>
  {
    Ws28b11_Segments[mActualSegment].AuxParam16b = rand() % SEGMENT_LENGTH; // aux_param3 stores the random led index
 800479a:	f005 fb3b 	bl	8009e14 <rand>
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <mode_flash_sparkle+0x1c8>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b37      	ldr	r3, [pc, #220]	; (8004880 <mode_flash_sparkle+0x1cc>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	0019      	movs	r1, r3
 80047a8:	000b      	movs	r3, r1
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	1a5b      	subs	r3, r3, r1
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	18d3      	adds	r3, r2, r3
 80047b2:	88db      	ldrh	r3, [r3, #6]
 80047b4:	001c      	movs	r4, r3
 80047b6:	4b31      	ldr	r3, [pc, #196]	; (800487c <mode_flash_sparkle+0x1c8>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b31      	ldr	r3, [pc, #196]	; (8004880 <mode_flash_sparkle+0x1cc>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	0019      	movs	r1, r3
 80047c0:	000b      	movs	r3, r1
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	1a5b      	subs	r3, r3, r1
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	18d3      	adds	r3, r2, r3
 80047ca:	889b      	ldrh	r3, [r3, #4]
 80047cc:	1ae3      	subs	r3, r4, r3
 80047ce:	3301      	adds	r3, #1
 80047d0:	0019      	movs	r1, r3
 80047d2:	f7fb fe11 	bl	80003f8 <__aeabi_idivmod>
 80047d6:	000b      	movs	r3, r1
 80047d8:	0018      	movs	r0, r3
 80047da:	4b28      	ldr	r3, [pc, #160]	; (800487c <mode_flash_sparkle+0x1c8>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b28      	ldr	r3, [pc, #160]	; (8004880 <mode_flash_sparkle+0x1cc>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	0019      	movs	r1, r3
 80047e4:	000b      	movs	r3, r1
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a5b      	subs	r3, r3, r1
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	18d3      	adds	r3, r2, r3
 80047ee:	b282      	uxth	r2, r0
 80047f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + Ws28b11_Segments[mActualSegment].AuxParam16b, WHITE);
 80047f2:	4b22      	ldr	r3, [pc, #136]	; (800487c <mode_flash_sparkle+0x1c8>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <mode_flash_sparkle+0x1cc>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	0019      	movs	r1, r3
 80047fc:	000b      	movs	r3, r1
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	1a5b      	subs	r3, r3, r1
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	18d3      	adds	r3, r2, r3
 8004806:	889a      	ldrh	r2, [r3, #4]
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <mode_flash_sparkle+0x1c8>)
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <mode_flash_sparkle+0x1cc>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	0018      	movs	r0, r3
 8004812:	0003      	movs	r3, r0
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	1a1b      	subs	r3, r3, r0
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	18cb      	adds	r3, r1, r3
 800481c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800481e:	18d3      	adds	r3, r2, r3
 8004820:	b29b      	uxth	r3, r3
 8004822:	b21b      	sxth	r3, r3
 8004824:	4a17      	ldr	r2, [pc, #92]	; (8004884 <mode_flash_sparkle+0x1d0>)
 8004826:	0011      	movs	r1, r2
 8004828:	0018      	movs	r0, r3
 800482a:	f7fc faf3 	bl	8000e14 <WS2811_SetDiodeColor>
    Ws28b11_Segments[mActualSegment].ModeDelay = 20;
 800482e:	4b13      	ldr	r3, [pc, #76]	; (800487c <mode_flash_sparkle+0x1c8>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b13      	ldr	r3, [pc, #76]	; (8004880 <mode_flash_sparkle+0x1cc>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	0019      	movs	r1, r3
 8004838:	000b      	movs	r3, r1
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	1a5b      	subs	r3, r3, r1
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	18d3      	adds	r3, r2, r3
 8004842:	2214      	movs	r2, #20
 8004844:	601a      	str	r2, [r3, #0]
  }
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8004846:	4b0d      	ldr	r3, [pc, #52]	; (800487c <mode_flash_sparkle+0x1c8>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <mode_flash_sparkle+0x1cc>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	0019      	movs	r1, r3
 8004850:	000b      	movs	r3, r1
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a5b      	subs	r3, r3, r1
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	18d3      	adds	r3, r2, r3
 800485a:	8a98      	ldrh	r0, [r3, #20]
 800485c:	4b07      	ldr	r3, [pc, #28]	; (800487c <mode_flash_sparkle+0x1c8>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b07      	ldr	r3, [pc, #28]	; (8004880 <mode_flash_sparkle+0x1cc>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	0019      	movs	r1, r3
 8004866:	000b      	movs	r3, r1
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	1a5b      	subs	r3, r3, r1
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	18d3      	adds	r3, r2, r3
 8004870:	0002      	movs	r2, r0
 8004872:	601a      	str	r2, [r3, #0]
}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b003      	add	sp, #12
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	2000057c 	.word	0x2000057c
 8004880:	20000754 	.word	0x20000754
 8004884:	00ffffff 	.word	0x00ffffff

08004888 <mode_hyper_sparkle>:
/*
 * Like flash sparkle. With more flash.
 * Inspired by www.tweaking4all.com/hardware/arduino/arduino-led-strip-effects/
 */
void mode_hyper_sparkle(void)
{
 8004888:	b5b0      	push	{r4, r5, r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 800488e:	4b6f      	ldr	r3, [pc, #444]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	4b6f      	ldr	r3, [pc, #444]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	0019      	movs	r1, r3
 8004898:	000b      	movs	r3, r1
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	1a5b      	subs	r3, r3, r1
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	18d2      	adds	r2, r2, r3
 80048a2:	1dbb      	adds	r3, r7, #6
 80048a4:	8892      	ldrh	r2, [r2, #4]
 80048a6:	801a      	strh	r2, [r3, #0]
 80048a8:	e015      	b.n	80048d6 <mode_hyper_sparkle+0x4e>
  {
    WS2811_SetDiodeColor(i, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 80048aa:	1dbb      	adds	r3, r7, #6
 80048ac:	2000      	movs	r0, #0
 80048ae:	5e18      	ldrsh	r0, [r3, r0]
 80048b0:	4b66      	ldr	r3, [pc, #408]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b66      	ldr	r3, [pc, #408]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	0019      	movs	r1, r3
 80048ba:	000b      	movs	r3, r1
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	1a5b      	subs	r3, r3, r1
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	18d3      	adds	r3, r2, r3
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	0019      	movs	r1, r3
 80048c8:	f7fc faa4 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 80048cc:	1dbb      	adds	r3, r7, #6
 80048ce:	881a      	ldrh	r2, [r3, #0]
 80048d0:	1dbb      	adds	r3, r7, #6
 80048d2:	3201      	adds	r2, #1
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	4b5d      	ldr	r3, [pc, #372]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b5d      	ldr	r3, [pc, #372]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	0019      	movs	r1, r3
 80048e0:	000b      	movs	r3, r1
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	1a5b      	subs	r3, r3, r1
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	18d3      	adds	r3, r2, r3
 80048ea:	88db      	ldrh	r3, [r3, #6]
 80048ec:	1dba      	adds	r2, r7, #6
 80048ee:	8812      	ldrh	r2, [r2, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d9da      	bls.n	80048aa <mode_hyper_sparkle+0x22>
  }

  if(rand() % 5 < 2)
 80048f4:	f005 fa8e 	bl	8009e14 <rand>
 80048f8:	0003      	movs	r3, r0
 80048fa:	2105      	movs	r1, #5
 80048fc:	0018      	movs	r0, r3
 80048fe:	f7fb fd7b 	bl	80003f8 <__aeabi_idivmod>
 8004902:	000b      	movs	r3, r1
 8004904:	2b01      	cmp	r3, #1
 8004906:	dd00      	ble.n	800490a <mode_hyper_sparkle+0x82>
 8004908:	e085      	b.n	8004a16 <mode_hyper_sparkle+0x18e>
  {
    for(uint16_t i=0; i < MAX(1, SEGMENT_LENGTH/3); i++)
 800490a:	1d3b      	adds	r3, r7, #4
 800490c:	2200      	movs	r2, #0
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	e037      	b.n	8004982 <mode_hyper_sparkle+0xfa>
    {
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + rand() % SEGMENT_LENGTH, WHITE);
 8004912:	4b4e      	ldr	r3, [pc, #312]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b4e      	ldr	r3, [pc, #312]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	0019      	movs	r1, r3
 800491c:	000b      	movs	r3, r1
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	1a5b      	subs	r3, r3, r1
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	18d3      	adds	r3, r2, r3
 8004926:	889c      	ldrh	r4, [r3, #4]
 8004928:	f005 fa74 	bl	8009e14 <rand>
 800492c:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	0019      	movs	r1, r3
 8004936:	000b      	movs	r3, r1
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	1a5b      	subs	r3, r3, r1
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	18d3      	adds	r3, r2, r3
 8004940:	88db      	ldrh	r3, [r3, #6]
 8004942:	001d      	movs	r5, r3
 8004944:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	0019      	movs	r1, r3
 800494e:	000b      	movs	r3, r1
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	1a5b      	subs	r3, r3, r1
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	18d3      	adds	r3, r2, r3
 8004958:	889b      	ldrh	r3, [r3, #4]
 800495a:	1aeb      	subs	r3, r5, r3
 800495c:	3301      	adds	r3, #1
 800495e:	0019      	movs	r1, r3
 8004960:	f7fb fd4a 	bl	80003f8 <__aeabi_idivmod>
 8004964:	000b      	movs	r3, r1
 8004966:	b29b      	uxth	r3, r3
 8004968:	18e3      	adds	r3, r4, r3
 800496a:	b29b      	uxth	r3, r3
 800496c:	b21b      	sxth	r3, r3
 800496e:	4a39      	ldr	r2, [pc, #228]	; (8004a54 <mode_hyper_sparkle+0x1cc>)
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f7fc fa4e 	bl	8000e14 <WS2811_SetDiodeColor>
    for(uint16_t i=0; i < MAX(1, SEGMENT_LENGTH/3); i++)
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	881a      	ldrh	r2, [r3, #0]
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	3201      	adds	r2, #1
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	1d3b      	adds	r3, r7, #4
 8004984:	881c      	ldrh	r4, [r3, #0]
 8004986:	4b31      	ldr	r3, [pc, #196]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	0019      	movs	r1, r3
 8004990:	000b      	movs	r3, r1
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	1a5b      	subs	r3, r3, r1
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	18d3      	adds	r3, r2, r3
 800499a:	88db      	ldrh	r3, [r3, #6]
 800499c:	0018      	movs	r0, r3
 800499e:	4b2b      	ldr	r3, [pc, #172]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	0019      	movs	r1, r3
 80049a8:	000b      	movs	r3, r1
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	1a5b      	subs	r3, r3, r1
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	18d3      	adds	r3, r2, r3
 80049b2:	889b      	ldrh	r3, [r3, #4]
 80049b4:	1ac3      	subs	r3, r0, r3
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	dd1e      	ble.n	80049f8 <mode_hyper_sparkle+0x170>
 80049ba:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	0019      	movs	r1, r3
 80049c4:	000b      	movs	r3, r1
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	1a5b      	subs	r3, r3, r1
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	18d3      	adds	r3, r2, r3
 80049ce:	88db      	ldrh	r3, [r3, #6]
 80049d0:	0018      	movs	r0, r3
 80049d2:	4b1e      	ldr	r3, [pc, #120]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	0019      	movs	r1, r3
 80049dc:	000b      	movs	r3, r1
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	1a5b      	subs	r3, r3, r1
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	18d3      	adds	r3, r2, r3
 80049e6:	889b      	ldrh	r3, [r3, #4]
 80049e8:	1ac3      	subs	r3, r0, r3
 80049ea:	3301      	adds	r3, #1
 80049ec:	2103      	movs	r1, #3
 80049ee:	0018      	movs	r0, r3
 80049f0:	f7fb fc1c 	bl	800022c <__divsi3>
 80049f4:	0003      	movs	r3, r0
 80049f6:	e000      	b.n	80049fa <mode_hyper_sparkle+0x172>
 80049f8:	2301      	movs	r3, #1
 80049fa:	42a3      	cmp	r3, r4
 80049fc:	dc89      	bgt.n	8004912 <mode_hyper_sparkle+0x8a>
    }
    Ws28b11_Segments[mActualSegment].ModeDelay = 20;
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	0019      	movs	r1, r3
 8004a08:	000b      	movs	r3, r1
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	1a5b      	subs	r3, r3, r1
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	18d3      	adds	r3, r2, r3
 8004a12:	2214      	movs	r2, #20
 8004a14:	601a      	str	r2, [r3, #0]
  }
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	0019      	movs	r1, r3
 8004a20:	000b      	movs	r3, r1
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	1a5b      	subs	r3, r3, r1
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	18d3      	adds	r3, r2, r3
 8004a2a:	8a98      	ldrh	r0, [r3, #20]
 8004a2c:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <mode_hyper_sparkle+0x1c4>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <mode_hyper_sparkle+0x1c8>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	0019      	movs	r1, r3
 8004a36:	000b      	movs	r3, r1
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	1a5b      	subs	r3, r3, r1
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	18d3      	adds	r3, r2, r3
 8004a40:	0002      	movs	r2, r0
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a4c:	2000057c 	.word	0x2000057c
 8004a50:	20000754 	.word	0x20000754
 8004a54:	00ffffff 	.word	0x00ffffff

08004a58 <mode_multi_strobe>:

/*
 * Strobe effect with different strobe count and pause, controlled by speed.
 */
void mode_multi_strobe(void)
{
 8004a58:	b5b0      	push	{r4, r5, r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8004a5e:	4b70      	ldr	r3, [pc, #448]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b70      	ldr	r3, [pc, #448]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	0019      	movs	r1, r3
 8004a68:	000b      	movs	r3, r1
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	1a5b      	subs	r3, r3, r1
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	18d2      	adds	r2, r2, r3
 8004a72:	1dbb      	adds	r3, r7, #6
 8004a74:	8892      	ldrh	r2, [r2, #4]
 8004a76:	801a      	strh	r2, [r3, #0]
 8004a78:	e00b      	b.n	8004a92 <mode_multi_strobe+0x3a>
  {
	  WS2811_SetDiodeColor(i, BLACK);
 8004a7a:	1dbb      	adds	r3, r7, #6
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	5e9b      	ldrsh	r3, [r3, r2]
 8004a80:	2100      	movs	r1, #0
 8004a82:	0018      	movs	r0, r3
 8004a84:	f7fc f9c6 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8004a88:	1dbb      	adds	r3, r7, #6
 8004a8a:	881a      	ldrh	r2, [r3, #0]
 8004a8c:	1dbb      	adds	r3, r7, #6
 8004a8e:	3201      	adds	r2, #1
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	4b63      	ldr	r3, [pc, #396]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b63      	ldr	r3, [pc, #396]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	000b      	movs	r3, r1
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	1a5b      	subs	r3, r3, r1
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	18d3      	adds	r3, r2, r3
 8004aa6:	88db      	ldrh	r3, [r3, #6]
 8004aa8:	1dba      	adds	r2, r7, #6
 8004aaa:	8812      	ldrh	r2, [r2, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d9e4      	bls.n	8004a7a <mode_multi_strobe+0x22>
  }

  uint16_t delay = 200 + ((9 - (Ws28b11_Segments[mActualSegment].Speed % 10)) * 100);
 8004ab0:	4b5b      	ldr	r3, [pc, #364]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b5b      	ldr	r3, [pc, #364]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	0019      	movs	r1, r3
 8004aba:	000b      	movs	r3, r1
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	1a5b      	subs	r3, r3, r1
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	18d3      	adds	r3, r2, r3
 8004ac4:	8a9b      	ldrh	r3, [r3, #20]
 8004ac6:	210a      	movs	r1, #10
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fb fbab 	bl	8000224 <__aeabi_uidivmod>
 8004ace:	000b      	movs	r3, r1
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	001a      	movs	r2, r3
 8004ad4:	2309      	movs	r3, #9
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2264      	movs	r2, #100	; 0x64
 8004adc:	4353      	muls	r3, r2
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	1d3b      	adds	r3, r7, #4
 8004ae2:	32c8      	adds	r2, #200	; 0xc8
 8004ae4:	801a      	strh	r2, [r3, #0]
  uint16_t count = 2 * ((Ws28b11_Segments[mActualSegment].Speed / 100) + 1);
 8004ae6:	4b4e      	ldr	r3, [pc, #312]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b4e      	ldr	r3, [pc, #312]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	0019      	movs	r1, r3
 8004af0:	000b      	movs	r3, r1
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	1a5b      	subs	r3, r3, r1
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	18d3      	adds	r3, r2, r3
 8004afa:	8a9b      	ldrh	r3, [r3, #20]
 8004afc:	2164      	movs	r1, #100	; 0x64
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7fb fb0a 	bl	8000118 <__udivsi3>
 8004b04:	0003      	movs	r3, r0
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	003a      	movs	r2, r7
 8004b0e:	18db      	adds	r3, r3, r3
 8004b10:	8013      	strh	r3, [r2, #0]
  if(Ws28b11_Segments[mActualSegment].CounterModeStep < count)
 8004b12:	4b43      	ldr	r3, [pc, #268]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b43      	ldr	r3, [pc, #268]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	000b      	movs	r3, r1
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	1a5b      	subs	r3, r3, r1
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	18d3      	adds	r3, r2, r3
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	003b      	movs	r3, r7
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d247      	bcs.n	8004bc0 <mode_multi_strobe+0x168>
  {
    if((Ws28b11_Segments[mActualSegment].CounterModeStep & 1) == 0)
 8004b30:	4b3b      	ldr	r3, [pc, #236]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	4b3b      	ldr	r3, [pc, #236]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	0019      	movs	r1, r3
 8004b3a:	000b      	movs	r3, r1
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	1a5b      	subs	r3, r3, r1
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	18d3      	adds	r3, r2, r3
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2201      	movs	r2, #1
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d136      	bne.n	8004bba <mode_multi_strobe+0x162>
    {
      for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8004b4c:	4b34      	ldr	r3, [pc, #208]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b34      	ldr	r3, [pc, #208]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	0019      	movs	r1, r3
 8004b56:	000b      	movs	r3, r1
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	1a5b      	subs	r3, r3, r1
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	18d2      	adds	r2, r2, r3
 8004b60:	1cbb      	adds	r3, r7, #2
 8004b62:	8892      	ldrh	r2, [r2, #4]
 8004b64:	801a      	strh	r2, [r3, #0]
 8004b66:	e015      	b.n	8004b94 <mode_multi_strobe+0x13c>
      {
    	  WS2811_SetDiodeColor(i, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8004b68:	1cbb      	adds	r3, r7, #2
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	5e18      	ldrsh	r0, [r3, r0]
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	0019      	movs	r1, r3
 8004b78:	000b      	movs	r3, r1
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	1a5b      	subs	r3, r3, r1
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	18d3      	adds	r3, r2, r3
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	0019      	movs	r1, r3
 8004b86:	f7fc f945 	bl	8000e14 <WS2811_SetDiodeColor>
      for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8004b8a:	1cbb      	adds	r3, r7, #2
 8004b8c:	881a      	ldrh	r2, [r3, #0]
 8004b8e:	1cbb      	adds	r3, r7, #2
 8004b90:	3201      	adds	r2, #1
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b22      	ldr	r3, [pc, #136]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	000b      	movs	r3, r1
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	1a5b      	subs	r3, r3, r1
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	18d3      	adds	r3, r2, r3
 8004ba8:	88db      	ldrh	r3, [r3, #6]
 8004baa:	1cba      	adds	r2, r7, #2
 8004bac:	8812      	ldrh	r2, [r2, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d9da      	bls.n	8004b68 <mode_multi_strobe+0x110>
      }
      delay = 20;
 8004bb2:	1d3b      	adds	r3, r7, #4
 8004bb4:	2214      	movs	r2, #20
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	e002      	b.n	8004bc0 <mode_multi_strobe+0x168>
    }
    else
    {
      delay = 50;
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	2232      	movs	r2, #50	; 0x32
 8004bbe:	801a      	strh	r2, [r3, #0]
    }
  }
  Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % (count + 1);
 8004bc0:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	0019      	movs	r1, r3
 8004bca:	000b      	movs	r3, r1
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	1a5b      	subs	r3, r3, r1
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	18d3      	adds	r3, r2, r3
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	1c58      	adds	r0, r3, #1
 8004bd8:	003b      	movs	r3, r7
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	001d      	movs	r5, r3
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	0019      	movs	r1, r3
 8004bea:	000b      	movs	r3, r1
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	1a5b      	subs	r3, r3, r1
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	18d4      	adds	r4, r2, r3
 8004bf4:	0029      	movs	r1, r5
 8004bf6:	f7fb fb15 	bl	8000224 <__aeabi_uidivmod>
 8004bfa:	000b      	movs	r3, r1
 8004bfc:	6123      	str	r3, [r4, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = delay;
 8004bfe:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <mode_multi_strobe+0x1c8>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <mode_multi_strobe+0x1cc>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	0019      	movs	r1, r3
 8004c08:	000b      	movs	r3, r1
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	1a5b      	subs	r3, r3, r1
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	18d3      	adds	r3, r2, r3
 8004c12:	1d3a      	adds	r2, r7, #4
 8004c14:	8812      	ldrh	r2, [r2, #0]
 8004c16:	601a      	str	r2, [r3, #0]
}
 8004c18:	46c0      	nop			; (mov r8, r8)
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c20:	2000057c 	.word	0x2000057c
 8004c24:	20000754 	.word	0x20000754

08004c28 <chase>:
 * color chase function.
 * color1 = background color
 * color2 and color3 = colors of two adjacent leds
 */
void chase(uint32_t color1, uint32_t color2, uint32_t color3)
{
 8004c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint16_t a = Ws28b11_Segments[mActualSegment].CounterModeStep;
 8004c34:	4b9f      	ldr	r3, [pc, #636]	; (8004eb4 <chase+0x28c>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b9f      	ldr	r3, [pc, #636]	; (8004eb8 <chase+0x290>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	0019      	movs	r1, r3
 8004c3e:	000b      	movs	r3, r1
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	1a5b      	subs	r3, r3, r1
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	18d3      	adds	r3, r2, r3
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	2516      	movs	r5, #22
 8004c4c:	197b      	adds	r3, r7, r5
 8004c4e:	801a      	strh	r2, [r3, #0]
  uint16_t b = (a + 1) % SEGMENT_LENGTH;
 8004c50:	197b      	adds	r3, r7, r5
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	1c58      	adds	r0, r3, #1
 8004c56:	4b97      	ldr	r3, [pc, #604]	; (8004eb4 <chase+0x28c>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b97      	ldr	r3, [pc, #604]	; (8004eb8 <chase+0x290>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	0019      	movs	r1, r3
 8004c60:	000b      	movs	r3, r1
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	1a5b      	subs	r3, r3, r1
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	18d3      	adds	r3, r2, r3
 8004c6a:	88db      	ldrh	r3, [r3, #6]
 8004c6c:	001c      	movs	r4, r3
 8004c6e:	4b91      	ldr	r3, [pc, #580]	; (8004eb4 <chase+0x28c>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b91      	ldr	r3, [pc, #580]	; (8004eb8 <chase+0x290>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	0019      	movs	r1, r3
 8004c78:	000b      	movs	r3, r1
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	1a5b      	subs	r3, r3, r1
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	18d3      	adds	r3, r2, r3
 8004c82:	889b      	ldrh	r3, [r3, #4]
 8004c84:	1ae3      	subs	r3, r4, r3
 8004c86:	3301      	adds	r3, #1
 8004c88:	0019      	movs	r1, r3
 8004c8a:	f7fb fbb5 	bl	80003f8 <__aeabi_idivmod>
 8004c8e:	000b      	movs	r3, r1
 8004c90:	001a      	movs	r2, r3
 8004c92:	2614      	movs	r6, #20
 8004c94:	19bb      	adds	r3, r7, r6
 8004c96:	801a      	strh	r2, [r3, #0]
  uint16_t c = (b + 1) % SEGMENT_LENGTH;
 8004c98:	19bb      	adds	r3, r7, r6
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	1c58      	adds	r0, r3, #1
 8004c9e:	4b85      	ldr	r3, [pc, #532]	; (8004eb4 <chase+0x28c>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b85      	ldr	r3, [pc, #532]	; (8004eb8 <chase+0x290>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	000b      	movs	r3, r1
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	1a5b      	subs	r3, r3, r1
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	18d3      	adds	r3, r2, r3
 8004cb2:	88db      	ldrh	r3, [r3, #6]
 8004cb4:	001c      	movs	r4, r3
 8004cb6:	4b7f      	ldr	r3, [pc, #508]	; (8004eb4 <chase+0x28c>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b7f      	ldr	r3, [pc, #508]	; (8004eb8 <chase+0x290>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	000b      	movs	r3, r1
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	1a5b      	subs	r3, r3, r1
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	18d3      	adds	r3, r2, r3
 8004cca:	889b      	ldrh	r3, [r3, #4]
 8004ccc:	1ae3      	subs	r3, r4, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	f7fb fb91 	bl	80003f8 <__aeabi_idivmod>
 8004cd6:	000b      	movs	r3, r1
 8004cd8:	001a      	movs	r2, r3
 8004cda:	2412      	movs	r4, #18
 8004cdc:	193b      	adds	r3, r7, r4
 8004cde:	801a      	strh	r2, [r3, #0]
  if(IS_REVERSE) {
 8004ce0:	4b74      	ldr	r3, [pc, #464]	; (8004eb4 <chase+0x28c>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b74      	ldr	r3, [pc, #464]	; (8004eb8 <chase+0x290>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	0019      	movs	r1, r3
 8004cea:	000b      	movs	r3, r1
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	1a5b      	subs	r3, r3, r1
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	18d3      	adds	r3, r2, r3
 8004cf4:	7a9b      	ldrb	r3, [r3, #10]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d03f      	beq.n	8004d80 <chase+0x158>
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - a, color1);
 8004d00:	4b6c      	ldr	r3, [pc, #432]	; (8004eb4 <chase+0x28c>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b6c      	ldr	r3, [pc, #432]	; (8004eb8 <chase+0x290>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	0019      	movs	r1, r3
 8004d0a:	000b      	movs	r3, r1
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	1a5b      	subs	r3, r3, r1
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	18d3      	adds	r3, r2, r3
 8004d14:	88da      	ldrh	r2, [r3, #6]
 8004d16:	197b      	adds	r3, r7, r5
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	b21b      	sxth	r3, r3
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	0011      	movs	r1, r2
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7fc f875 	bl	8000e14 <WS2811_SetDiodeColor>
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - b, color2);
 8004d2a:	4b62      	ldr	r3, [pc, #392]	; (8004eb4 <chase+0x28c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b62      	ldr	r3, [pc, #392]	; (8004eb8 <chase+0x290>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	0019      	movs	r1, r3
 8004d34:	000b      	movs	r3, r1
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	1a5b      	subs	r3, r3, r1
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	18d3      	adds	r3, r2, r3
 8004d3e:	88da      	ldrh	r2, [r3, #6]
 8004d40:	19bb      	adds	r3, r7, r6
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0011      	movs	r1, r2
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f7fc f860 	bl	8000e14 <WS2811_SetDiodeColor>
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - c, color3);
 8004d54:	4b57      	ldr	r3, [pc, #348]	; (8004eb4 <chase+0x28c>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b57      	ldr	r3, [pc, #348]	; (8004eb8 <chase+0x290>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	000b      	movs	r3, r1
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	1a5b      	subs	r3, r3, r1
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	88da      	ldrh	r2, [r3, #6]
 8004d6a:	193b      	adds	r3, r7, r4
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	b21b      	sxth	r3, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7fc f84b 	bl	8000e14 <WS2811_SetDiodeColor>
 8004d7e:	e041      	b.n	8004e04 <chase+0x1dc>
  } else {
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + a, color1);
 8004d80:	4b4c      	ldr	r3, [pc, #304]	; (8004eb4 <chase+0x28c>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b4c      	ldr	r3, [pc, #304]	; (8004eb8 <chase+0x290>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	0019      	movs	r1, r3
 8004d8a:	000b      	movs	r3, r1
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	1a5b      	subs	r3, r3, r1
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	18d3      	adds	r3, r2, r3
 8004d94:	889a      	ldrh	r2, [r3, #4]
 8004d96:	2316      	movs	r3, #22
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	18d3      	adds	r3, r2, r3
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	b21b      	sxth	r3, r3
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	0011      	movs	r1, r2
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7fc f834 	bl	8000e14 <WS2811_SetDiodeColor>
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + b, color2);
 8004dac:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <chase+0x28c>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4b41      	ldr	r3, [pc, #260]	; (8004eb8 <chase+0x290>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	0019      	movs	r1, r3
 8004db6:	000b      	movs	r3, r1
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	1a5b      	subs	r3, r3, r1
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	18d3      	adds	r3, r2, r3
 8004dc0:	889a      	ldrh	r2, [r3, #4]
 8004dc2:	2314      	movs	r3, #20
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	18d3      	adds	r3, r2, r3
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	b21b      	sxth	r3, r3
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	0011      	movs	r1, r2
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7fc f81e 	bl	8000e14 <WS2811_SetDiodeColor>
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + c, color3);
 8004dd8:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <chase+0x28c>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <chase+0x290>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	0019      	movs	r1, r3
 8004de2:	000b      	movs	r3, r1
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	1a5b      	subs	r3, r3, r1
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	18d3      	adds	r3, r2, r3
 8004dec:	889a      	ldrh	r2, [r3, #4]
 8004dee:	2312      	movs	r3, #18
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	18d3      	adds	r3, r2, r3
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7fc f808 	bl	8000e14 <WS2811_SetDiodeColor>
  }

  if(b == 0) Ws28b11_Segments[mActualSegment].Cycle = 1;
 8004e04:	2314      	movs	r3, #20
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <chase+0x206>
 8004e0e:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <chase+0x28c>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <chase+0x290>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	0019      	movs	r1, r3
 8004e18:	000b      	movs	r3, r1
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	1a5b      	subs	r3, r3, r1
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	18d3      	adds	r3, r2, r3
 8004e22:	2230      	movs	r2, #48	; 0x30
 8004e24:	5c99      	ldrb	r1, [r3, r2]
 8004e26:	2001      	movs	r0, #1
 8004e28:	4301      	orrs	r1, r0
 8004e2a:	5499      	strb	r1, [r3, r2]
 8004e2c:	e00e      	b.n	8004e4c <chase+0x224>
  else Ws28b11_Segments[mActualSegment].Cycle = 0;
 8004e2e:	4b21      	ldr	r3, [pc, #132]	; (8004eb4 <chase+0x28c>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <chase+0x290>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	0019      	movs	r1, r3
 8004e38:	000b      	movs	r3, r1
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	1a5b      	subs	r3, r3, r1
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	18d3      	adds	r3, r2, r3
 8004e42:	2230      	movs	r2, #48	; 0x30
 8004e44:	5c99      	ldrb	r1, [r3, r2]
 8004e46:	2001      	movs	r0, #1
 8004e48:	4381      	bics	r1, r0
 8004e4a:	5499      	strb	r1, [r3, r2]

  Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % WS2811_LEDS;
 8004e4c:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <chase+0x28c>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <chase+0x290>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	0019      	movs	r1, r3
 8004e56:	000b      	movs	r3, r1
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	1a5b      	subs	r3, r3, r1
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	18d3      	adds	r3, r2, r3
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <chase+0x28c>)
 8004e66:	6819      	ldr	r1, [r3, #0]
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <chase+0x290>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	0003      	movs	r3, r0
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	1a1b      	subs	r3, r3, r0
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	18cb      	adds	r3, r1, r3
 8004e78:	211f      	movs	r1, #31
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <chase+0x28c>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <chase+0x290>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	0019      	movs	r1, r3
 8004e88:	000b      	movs	r3, r1
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	1a5b      	subs	r3, r3, r1
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	18d3      	adds	r3, r2, r3
 8004e92:	8a98      	ldrh	r0, [r3, #20]
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <chase+0x28c>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <chase+0x290>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	000b      	movs	r3, r1
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	1a5b      	subs	r3, r3, r1
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	18d3      	adds	r3, r2, r3
 8004ea8:	0002      	movs	r2, r0
 8004eaa:	601a      	str	r2, [r3, #0]
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b007      	add	sp, #28
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb4:	2000057c 	.word	0x2000057c
 8004eb8:	20000754 	.word	0x20000754

08004ebc <mode_bicolor_chase>:

/*
 * Bicolor chase mode
 */
void mode_bicolor_chase(void)
{
 8004ebc:	b5b0      	push	{r4, r5, r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  return chase(Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[1], Ws28b11_Segments[mActualSegment].ModeColor[2]);
 8004ec0:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <mode_bicolor_chase+0x50>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <mode_bicolor_chase+0x54>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	0019      	movs	r1, r3
 8004eca:	000b      	movs	r3, r1
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	1a5b      	subs	r3, r3, r1
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	18d3      	adds	r3, r2, r3
 8004ed4:	6998      	ldr	r0, [r3, #24]
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <mode_bicolor_chase+0x50>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b0d      	ldr	r3, [pc, #52]	; (8004f10 <mode_bicolor_chase+0x54>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	0019      	movs	r1, r3
 8004ee0:	000b      	movs	r3, r1
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	1a5b      	subs	r3, r3, r1
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	18d3      	adds	r3, r2, r3
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <mode_bicolor_chase+0x50>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <mode_bicolor_chase+0x54>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	001c      	movs	r4, r3
 8004ef6:	0023      	movs	r3, r4
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	1b1b      	subs	r3, r3, r4
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	18d3      	adds	r3, r2, r3
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	001a      	movs	r2, r3
 8004f04:	f7ff fe90 	bl	8004c28 <chase>
}
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0c:	2000057c 	.word	0x2000057c
 8004f10:	20000754 	.word	0x20000754

08004f14 <mode_chase_color>:

/*
 * White running on _color.
 */
void mode_chase_color(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  return chase(Ws28b11_Segments[mActualSegment].ModeColor[0], WHITE, WHITE);
 8004f18:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <mode_chase_color+0x28>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <mode_chase_color+0x2c>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	0019      	movs	r1, r3
 8004f22:	000b      	movs	r3, r1
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	1a5b      	subs	r3, r3, r1
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	18d3      	adds	r3, r2, r3
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	4a05      	ldr	r2, [pc, #20]	; (8004f44 <mode_chase_color+0x30>)
 8004f30:	4904      	ldr	r1, [pc, #16]	; (8004f44 <mode_chase_color+0x30>)
 8004f32:	0018      	movs	r0, r3
 8004f34:	f7ff fe78 	bl	8004c28 <chase>
}
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	2000057c 	.word	0x2000057c
 8004f40:	20000754 	.word	0x20000754
 8004f44:	00ffffff 	.word	0x00ffffff

08004f48 <mode_chase_blackout>:

/*
 * Black running on _color.
 */
void mode_chase_blackout(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  return chase(Ws28b11_Segments[mActualSegment].ModeColor[0], BLACK, BLACK);
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <mode_chase_blackout+0x28>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <mode_chase_blackout+0x2c>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	0019      	movs	r1, r3
 8004f56:	000b      	movs	r3, r1
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	1a5b      	subs	r3, r3, r1
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	18d3      	adds	r3, r2, r3
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2200      	movs	r2, #0
 8004f64:	2100      	movs	r1, #0
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7ff fe5e 	bl	8004c28 <chase>
}
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	2000057c 	.word	0x2000057c
 8004f74:	20000754 	.word	0x20000754

08004f78 <mode_chase_white>:

/*
 * _color running on white.
 */
void mode_chase_white(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  return chase(WHITE, Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8004f7c:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <mode_chase_white+0x3c>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <mode_chase_white+0x40>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	0019      	movs	r1, r3
 8004f86:	000b      	movs	r3, r1
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	1a5b      	subs	r3, r3, r1
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	18d3      	adds	r3, r2, r3
 8004f90:	6999      	ldr	r1, [r3, #24]
 8004f92:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <mode_chase_white+0x3c>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <mode_chase_white+0x40>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	1a1b      	subs	r3, r3, r0
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	18d3      	adds	r3, r2, r3
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	4804      	ldr	r0, [pc, #16]	; (8004fbc <mode_chase_white+0x44>)
 8004faa:	001a      	movs	r2, r3
 8004fac:	f7ff fe3c 	bl	8004c28 <chase>
}
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	2000057c 	.word	0x2000057c
 8004fb8:	20000754 	.word	0x20000754
 8004fbc:	00ffffff 	.word	0x00ffffff

08004fc0 <mode_chase_random>:

/*
 * White running followed by random color.
 */
void mode_chase_random(void)
{
 8004fc0:	b5b0      	push	{r4, r5, r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  if(Ws28b11_Segments[mActualSegment].CounterModeStep == 0)
 8004fc4:	4b20      	ldr	r3, [pc, #128]	; (8005048 <mode_chase_random+0x88>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4b20      	ldr	r3, [pc, #128]	; (800504c <mode_chase_random+0x8c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	0019      	movs	r1, r3
 8004fce:	000b      	movs	r3, r1
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	1a5b      	subs	r3, r3, r1
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	18d3      	adds	r3, r2, r3
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d11c      	bne.n	8005018 <mode_chase_random+0x58>
  {
    Ws28b11_Segments[mActualSegment].AuxParam = get_random_wheel_index(Ws28b11_Segments[mActualSegment].AuxParam);
 8004fde:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <mode_chase_random+0x88>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b1a      	ldr	r3, [pc, #104]	; (800504c <mode_chase_random+0x8c>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	000b      	movs	r3, r1
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	1a5b      	subs	r3, r3, r1
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	18d3      	adds	r3, r2, r3
 8004ff2:	222d      	movs	r2, #45	; 0x2d
 8004ff4:	5c99      	ldrb	r1, [r3, r2]
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <mode_chase_random+0x88>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b14      	ldr	r3, [pc, #80]	; (800504c <mode_chase_random+0x8c>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	0018      	movs	r0, r3
 8005000:	0003      	movs	r3, r0
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	1a1b      	subs	r3, r3, r0
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	18d4      	adds	r4, r2, r3
 800500a:	0008      	movs	r0, r1
 800500c:	f7fd f918 	bl	8002240 <get_random_wheel_index>
 8005010:	0003      	movs	r3, r0
 8005012:	001a      	movs	r2, r3
 8005014:	232d      	movs	r3, #45	; 0x2d
 8005016:	54e2      	strb	r2, [r4, r3]
  }
  return chase(color_wheel(Ws28b11_Segments[mActualSegment].AuxParam), WHITE, WHITE);
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <mode_chase_random+0x88>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <mode_chase_random+0x8c>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	0019      	movs	r1, r3
 8005022:	000b      	movs	r3, r1
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	1a5b      	subs	r3, r3, r1
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	18d3      	adds	r3, r2, r3
 800502c:	222d      	movs	r2, #45	; 0x2d
 800502e:	5c9b      	ldrb	r3, [r3, r2]
 8005030:	0018      	movs	r0, r3
 8005032:	f7fd f8b9 	bl	80021a8 <color_wheel>
 8005036:	0003      	movs	r3, r0
 8005038:	4a05      	ldr	r2, [pc, #20]	; (8005050 <mode_chase_random+0x90>)
 800503a:	4905      	ldr	r1, [pc, #20]	; (8005050 <mode_chase_random+0x90>)
 800503c:	0018      	movs	r0, r3
 800503e:	f7ff fdf3 	bl	8004c28 <chase>
}
 8005042:	46bd      	mov	sp, r7
 8005044:	bdb0      	pop	{r4, r5, r7, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	2000057c 	.word	0x2000057c
 800504c:	20000754 	.word	0x20000754
 8005050:	00ffffff 	.word	0x00ffffff

08005054 <mode_chase_rainbow_white>:

/*
 * Rainbow running on white.
 */
void mode_chase_rainbow_white(void)
{
 8005054:	b5b0      	push	{r4, r5, r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
  uint16_t n = Ws28b11_Segments[mActualSegment].CounterModeStep;
 800505a:	4b49      	ldr	r3, [pc, #292]	; (8005180 <mode_chase_rainbow_white+0x12c>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b49      	ldr	r3, [pc, #292]	; (8005184 <mode_chase_rainbow_white+0x130>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	0019      	movs	r1, r3
 8005064:	000b      	movs	r3, r1
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	1a5b      	subs	r3, r3, r1
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	18d3      	adds	r3, r2, r3
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	200e      	movs	r0, #14
 8005072:	183b      	adds	r3, r7, r0
 8005074:	801a      	strh	r2, [r3, #0]
  uint16_t m = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % WS2811_LEDS;
 8005076:	4b42      	ldr	r3, [pc, #264]	; (8005180 <mode_chase_rainbow_white+0x12c>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b42      	ldr	r3, [pc, #264]	; (8005184 <mode_chase_rainbow_white+0x130>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	0019      	movs	r1, r3
 8005080:	000b      	movs	r3, r1
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	1a5b      	subs	r3, r3, r1
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	18d3      	adds	r3, r2, r3
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	b29b      	uxth	r3, r3
 800508e:	3301      	adds	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	250c      	movs	r5, #12
 8005094:	197b      	adds	r3, r7, r5
 8005096:	211f      	movs	r1, #31
 8005098:	400a      	ands	r2, r1
 800509a:	801a      	strh	r2, [r3, #0]
  uint32_t color2 = color_wheel(((n * 256 / SEGMENT_LENGTH) + (Ws28b11_Segments[mActualSegment].CounterModeCall & 0xFF)) & 0xFF);
 800509c:	183b      	adds	r3, r7, r0
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	0218      	lsls	r0, r3, #8
 80050a2:	4b37      	ldr	r3, [pc, #220]	; (8005180 <mode_chase_rainbow_white+0x12c>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b37      	ldr	r3, [pc, #220]	; (8005184 <mode_chase_rainbow_white+0x130>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	0019      	movs	r1, r3
 80050ac:	000b      	movs	r3, r1
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	1a5b      	subs	r3, r3, r1
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	18d3      	adds	r3, r2, r3
 80050b6:	88db      	ldrh	r3, [r3, #6]
 80050b8:	001c      	movs	r4, r3
 80050ba:	4b31      	ldr	r3, [pc, #196]	; (8005180 <mode_chase_rainbow_white+0x12c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b31      	ldr	r3, [pc, #196]	; (8005184 <mode_chase_rainbow_white+0x130>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	0019      	movs	r1, r3
 80050c4:	000b      	movs	r3, r1
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	1a5b      	subs	r3, r3, r1
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	18d3      	adds	r3, r2, r3
 80050ce:	889b      	ldrh	r3, [r3, #4]
 80050d0:	1ae3      	subs	r3, r4, r3
 80050d2:	3301      	adds	r3, #1
 80050d4:	0019      	movs	r1, r3
 80050d6:	f7fb f8a9 	bl	800022c <__divsi3>
 80050da:	0003      	movs	r3, r0
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b28      	ldr	r3, [pc, #160]	; (8005180 <mode_chase_rainbow_white+0x12c>)
 80050e0:	6819      	ldr	r1, [r3, #0]
 80050e2:	4b28      	ldr	r3, [pc, #160]	; (8005184 <mode_chase_rainbow_white+0x130>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	0018      	movs	r0, r3
 80050e8:	0003      	movs	r3, r0
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	1a1b      	subs	r3, r3, r0
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	18cb      	adds	r3, r1, r3
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	18d3      	adds	r3, r2, r3
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7fd f854 	bl	80021a8 <color_wheel>
 8005100:	0003      	movs	r3, r0
 8005102:	60bb      	str	r3, [r7, #8]
  uint32_t color3 = color_wheel(((m * 256 / SEGMENT_LENGTH) + (Ws28b11_Segments[mActualSegment].CounterModeCall & 0xFF)) & 0xFF);
 8005104:	197b      	adds	r3, r7, r5
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	0218      	lsls	r0, r3, #8
 800510a:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <mode_chase_rainbow_white+0x12c>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <mode_chase_rainbow_white+0x130>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	0019      	movs	r1, r3
 8005114:	000b      	movs	r3, r1
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	1a5b      	subs	r3, r3, r1
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	18d3      	adds	r3, r2, r3
 800511e:	88db      	ldrh	r3, [r3, #6]
 8005120:	001c      	movs	r4, r3
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <mode_chase_rainbow_white+0x12c>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b17      	ldr	r3, [pc, #92]	; (8005184 <mode_chase_rainbow_white+0x130>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	0019      	movs	r1, r3
 800512c:	000b      	movs	r3, r1
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	1a5b      	subs	r3, r3, r1
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	18d3      	adds	r3, r2, r3
 8005136:	889b      	ldrh	r3, [r3, #4]
 8005138:	1ae3      	subs	r3, r4, r3
 800513a:	3301      	adds	r3, #1
 800513c:	0019      	movs	r1, r3
 800513e:	f7fb f875 	bl	800022c <__divsi3>
 8005142:	0003      	movs	r3, r0
 8005144:	b2da      	uxtb	r2, r3
 8005146:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <mode_chase_rainbow_white+0x12c>)
 8005148:	6819      	ldr	r1, [r3, #0]
 800514a:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <mode_chase_rainbow_white+0x130>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	0018      	movs	r0, r3
 8005150:	0003      	movs	r3, r0
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	1a1b      	subs	r3, r3, r0
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	18cb      	adds	r3, r1, r3
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	18d3      	adds	r3, r2, r3
 8005160:	b2db      	uxtb	r3, r3
 8005162:	0018      	movs	r0, r3
 8005164:	f7fd f820 	bl	80021a8 <color_wheel>
 8005168:	0003      	movs	r3, r0
 800516a:	607b      	str	r3, [r7, #4]

  return chase(WHITE, color2, color3);
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4805      	ldr	r0, [pc, #20]	; (8005188 <mode_chase_rainbow_white+0x134>)
 8005172:	0019      	movs	r1, r3
 8005174:	f7ff fd58 	bl	8004c28 <chase>
}
 8005178:	46bd      	mov	sp, r7
 800517a:	b004      	add	sp, #16
 800517c:	bdb0      	pop	{r4, r5, r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	2000057c 	.word	0x2000057c
 8005184:	20000754 	.word	0x20000754
 8005188:	00ffffff 	.word	0x00ffffff

0800518c <mode_chase_rainbow>:

/*
 * White running on rainbow.
 */
void mode_chase_rainbow(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
  uint8_t color_sep = 256 / SEGMENT_LENGTH;
 8005192:	4b28      	ldr	r3, [pc, #160]	; (8005234 <mode_chase_rainbow+0xa8>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b28      	ldr	r3, [pc, #160]	; (8005238 <mode_chase_rainbow+0xac>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	0019      	movs	r1, r3
 800519c:	000b      	movs	r3, r1
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	1a5b      	subs	r3, r3, r1
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	18d3      	adds	r3, r2, r3
 80051a6:	88db      	ldrh	r3, [r3, #6]
 80051a8:	0018      	movs	r0, r3
 80051aa:	4b22      	ldr	r3, [pc, #136]	; (8005234 <mode_chase_rainbow+0xa8>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b22      	ldr	r3, [pc, #136]	; (8005238 <mode_chase_rainbow+0xac>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	0019      	movs	r1, r3
 80051b4:	000b      	movs	r3, r1
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	1a5b      	subs	r3, r3, r1
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	18d3      	adds	r3, r2, r3
 80051be:	889b      	ldrh	r3, [r3, #4]
 80051c0:	1ac3      	subs	r3, r0, r3
 80051c2:	3301      	adds	r3, #1
 80051c4:	0019      	movs	r1, r3
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	0058      	lsls	r0, r3, #1
 80051ca:	f7fb f82f 	bl	800022c <__divsi3>
 80051ce:	0003      	movs	r3, r0
 80051d0:	001a      	movs	r2, r3
 80051d2:	1dfb      	adds	r3, r7, #7
 80051d4:	701a      	strb	r2, [r3, #0]
  uint8_t color_index = Ws28b11_Segments[mActualSegment].CounterModeCall & 0xFF;
 80051d6:	4b17      	ldr	r3, [pc, #92]	; (8005234 <mode_chase_rainbow+0xa8>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b17      	ldr	r3, [pc, #92]	; (8005238 <mode_chase_rainbow+0xac>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	0019      	movs	r1, r3
 80051e0:	000b      	movs	r3, r1
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	1a5b      	subs	r3, r3, r1
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	18d3      	adds	r3, r2, r3
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	1dbb      	adds	r3, r7, #6
 80051ee:	701a      	strb	r2, [r3, #0]
  uint32_t color = color_wheel(((Ws28b11_Segments[mActualSegment].CounterModeStep * color_sep) + color_index) & 0xFF);
 80051f0:	4b10      	ldr	r3, [pc, #64]	; (8005234 <mode_chase_rainbow+0xa8>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b10      	ldr	r3, [pc, #64]	; (8005238 <mode_chase_rainbow+0xac>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	0019      	movs	r1, r3
 80051fa:	000b      	movs	r3, r1
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	1a5b      	subs	r3, r3, r1
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	18d3      	adds	r3, r2, r3
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	1dfa      	adds	r2, r7, #7
 800520a:	7812      	ldrb	r2, [r2, #0]
 800520c:	4353      	muls	r3, r2
 800520e:	b2da      	uxtb	r2, r3
 8005210:	1dbb      	adds	r3, r7, #6
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	18d3      	adds	r3, r2, r3
 8005216:	b2db      	uxtb	r3, r3
 8005218:	0018      	movs	r0, r3
 800521a:	f7fc ffc5 	bl	80021a8 <color_wheel>
 800521e:	0003      	movs	r3, r0
 8005220:	603b      	str	r3, [r7, #0]

  return chase(color, WHITE, WHITE);
 8005222:	4a06      	ldr	r2, [pc, #24]	; (800523c <mode_chase_rainbow+0xb0>)
 8005224:	4905      	ldr	r1, [pc, #20]	; (800523c <mode_chase_rainbow+0xb0>)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	0018      	movs	r0, r3
 800522a:	f7ff fcfd 	bl	8004c28 <chase>
}
 800522e:	46bd      	mov	sp, r7
 8005230:	b002      	add	sp, #8
 8005232:	bd80      	pop	{r7, pc}
 8005234:	2000057c 	.word	0x2000057c
 8005238:	20000754 	.word	0x20000754
 800523c:	00ffffff 	.word	0x00ffffff

08005240 <mode_chase_blackout_rainbow>:

/*
 * Black running on rainbow.
 */
void mode_chase_blackout_rainbow(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  uint8_t color_sep = 256 / SEGMENT_LENGTH;
 8005246:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <mode_chase_blackout_rainbow+0xa8>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b28      	ldr	r3, [pc, #160]	; (80052ec <mode_chase_blackout_rainbow+0xac>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	0019      	movs	r1, r3
 8005250:	000b      	movs	r3, r1
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	1a5b      	subs	r3, r3, r1
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	18d3      	adds	r3, r2, r3
 800525a:	88db      	ldrh	r3, [r3, #6]
 800525c:	0018      	movs	r0, r3
 800525e:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <mode_chase_blackout_rainbow+0xa8>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b22      	ldr	r3, [pc, #136]	; (80052ec <mode_chase_blackout_rainbow+0xac>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	0019      	movs	r1, r3
 8005268:	000b      	movs	r3, r1
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	1a5b      	subs	r3, r3, r1
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	18d3      	adds	r3, r2, r3
 8005272:	889b      	ldrh	r3, [r3, #4]
 8005274:	1ac3      	subs	r3, r0, r3
 8005276:	3301      	adds	r3, #1
 8005278:	0019      	movs	r1, r3
 800527a:	2380      	movs	r3, #128	; 0x80
 800527c:	0058      	lsls	r0, r3, #1
 800527e:	f7fa ffd5 	bl	800022c <__divsi3>
 8005282:	0003      	movs	r3, r0
 8005284:	001a      	movs	r2, r3
 8005286:	1dfb      	adds	r3, r7, #7
 8005288:	701a      	strb	r2, [r3, #0]
  uint8_t color_index = Ws28b11_Segments[mActualSegment].CounterModeCall & 0xFF;
 800528a:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <mode_chase_blackout_rainbow+0xa8>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <mode_chase_blackout_rainbow+0xac>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	0019      	movs	r1, r3
 8005294:	000b      	movs	r3, r1
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	1a5b      	subs	r3, r3, r1
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	18d3      	adds	r3, r2, r3
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	1dbb      	adds	r3, r7, #6
 80052a2:	701a      	strb	r2, [r3, #0]
  uint32_t color = color_wheel(((Ws28b11_Segments[mActualSegment].CounterModeStep * color_sep) + color_index) & 0xFF);
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <mode_chase_blackout_rainbow+0xa8>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <mode_chase_blackout_rainbow+0xac>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	0019      	movs	r1, r3
 80052ae:	000b      	movs	r3, r1
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	1a5b      	subs	r3, r3, r1
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	18d3      	adds	r3, r2, r3
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	1dfa      	adds	r2, r7, #7
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	4353      	muls	r3, r2
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	1dbb      	adds	r3, r7, #6
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	18d3      	adds	r3, r2, r3
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	0018      	movs	r0, r3
 80052ce:	f7fc ff6b 	bl	80021a8 <color_wheel>
 80052d2:	0003      	movs	r3, r0
 80052d4:	603b      	str	r3, [r7, #0]

  return chase(color, 0, 0);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2200      	movs	r2, #0
 80052da:	2100      	movs	r1, #0
 80052dc:	0018      	movs	r0, r3
 80052de:	f7ff fca3 	bl	8004c28 <chase>
}
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b002      	add	sp, #8
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	2000057c 	.word	0x2000057c
 80052ec:	20000754 	.word	0x20000754

080052f0 <mode_chase_flash>:

/*
 * White flashes running on _color.
 */
void mode_chase_flash(void)
{
 80052f0:	b5b0      	push	{r4, r5, r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
  const static uint8_t flash_count = 4;
  uint8_t flash_step = Ws28b11_Segments[mActualSegment].CounterModeCall % ((flash_count * 2) + 1);
 80052f6:	4baf      	ldr	r3, [pc, #700]	; (80055b4 <mode_chase_flash+0x2c4>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4baf      	ldr	r3, [pc, #700]	; (80055b8 <mode_chase_flash+0x2c8>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	0019      	movs	r1, r3
 8005300:	000b      	movs	r3, r1
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	1a5b      	subs	r3, r3, r1
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	18d3      	adds	r3, r2, r3
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	4bab      	ldr	r3, [pc, #684]	; (80055bc <mode_chase_flash+0x2cc>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	3301      	adds	r3, #1
 8005314:	0019      	movs	r1, r3
 8005316:	0010      	movs	r0, r2
 8005318:	f7fa ff84 	bl	8000224 <__aeabi_uidivmod>
 800531c:	000b      	movs	r3, r1
 800531e:	001a      	movs	r2, r3
 8005320:	230b      	movs	r3, #11
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	701a      	strb	r2, [r3, #0]

  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8005326:	4ba3      	ldr	r3, [pc, #652]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4ba3      	ldr	r3, [pc, #652]	; (80055b8 <mode_chase_flash+0x2c8>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	0019      	movs	r1, r3
 8005330:	000b      	movs	r3, r1
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	1a5b      	subs	r3, r3, r1
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	18d2      	adds	r2, r2, r3
 800533a:	230e      	movs	r3, #14
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	8892      	ldrh	r2, [r2, #4]
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	e016      	b.n	8005372 <mode_chase_flash+0x82>
  {
    WS2811_SetDiodeColor(i, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8005344:	240e      	movs	r4, #14
 8005346:	193b      	adds	r3, r7, r4
 8005348:	2000      	movs	r0, #0
 800534a:	5e18      	ldrsh	r0, [r3, r0]
 800534c:	4b99      	ldr	r3, [pc, #612]	; (80055b4 <mode_chase_flash+0x2c4>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4b99      	ldr	r3, [pc, #612]	; (80055b8 <mode_chase_flash+0x2c8>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	0019      	movs	r1, r3
 8005356:	000b      	movs	r3, r1
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	1a5b      	subs	r3, r3, r1
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	18d3      	adds	r3, r2, r3
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	0019      	movs	r1, r3
 8005364:	f7fb fd56 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 8005368:	193b      	adds	r3, r7, r4
 800536a:	881a      	ldrh	r2, [r3, #0]
 800536c:	193b      	adds	r3, r7, r4
 800536e:	3201      	adds	r2, #1
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	4b90      	ldr	r3, [pc, #576]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b90      	ldr	r3, [pc, #576]	; (80055b8 <mode_chase_flash+0x2c8>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	0019      	movs	r1, r3
 800537c:	000b      	movs	r3, r1
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	1a5b      	subs	r3, r3, r1
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	18d3      	adds	r3, r2, r3
 8005386:	88db      	ldrh	r3, [r3, #6]
 8005388:	220e      	movs	r2, #14
 800538a:	18ba      	adds	r2, r7, r2
 800538c:	8812      	ldrh	r2, [r2, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d9d8      	bls.n	8005344 <mode_chase_flash+0x54>
  }

  uint16_t delay = Ws28b11_Segments[mActualSegment].Speed;
 8005392:	4b88      	ldr	r3, [pc, #544]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b88      	ldr	r3, [pc, #544]	; (80055b8 <mode_chase_flash+0x2c8>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	0019      	movs	r1, r3
 800539c:	000b      	movs	r3, r1
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	1a5b      	subs	r3, r3, r1
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	18d2      	adds	r2, r2, r3
 80053a6:	230c      	movs	r3, #12
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	8a92      	ldrh	r2, [r2, #20]
 80053ac:	801a      	strh	r2, [r3, #0]
  if(flash_step < (flash_count * 2))
 80053ae:	210b      	movs	r1, #11
 80053b0:	187b      	adds	r3, r7, r1
 80053b2:	781a      	ldrb	r2, [r3, #0]
 80053b4:	4b81      	ldr	r3, [pc, #516]	; (80055bc <mode_chase_flash+0x2cc>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	429a      	cmp	r2, r3
 80053bc:	db00      	blt.n	80053c0 <mode_chase_flash+0xd0>
 80053be:	e0b1      	b.n	8005524 <mode_chase_flash+0x234>
  {
    if(flash_step % 2 == 0)
 80053c0:	187b      	adds	r3, r7, r1
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	4013      	ands	r3, r2
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d000      	beq.n	80053d0 <mode_chase_flash+0xe0>
 80053ce:	e0a4      	b.n	800551a <mode_chase_flash+0x22a>
    {
      uint16_t n = Ws28b11_Segments[mActualSegment].CounterModeStep;
 80053d0:	4b78      	ldr	r3, [pc, #480]	; (80055b4 <mode_chase_flash+0x2c4>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b78      	ldr	r3, [pc, #480]	; (80055b8 <mode_chase_flash+0x2c8>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	0019      	movs	r1, r3
 80053da:	000b      	movs	r3, r1
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	1a5b      	subs	r3, r3, r1
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	18d3      	adds	r3, r2, r3
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	2508      	movs	r5, #8
 80053e8:	197b      	adds	r3, r7, r5
 80053ea:	801a      	strh	r2, [r3, #0]
      uint16_t m = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % SEGMENT_LENGTH;
 80053ec:	4b71      	ldr	r3, [pc, #452]	; (80055b4 <mode_chase_flash+0x2c4>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b71      	ldr	r3, [pc, #452]	; (80055b8 <mode_chase_flash+0x2c8>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	0019      	movs	r1, r3
 80053f6:	000b      	movs	r3, r1
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	1a5b      	subs	r3, r3, r1
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	18d3      	adds	r3, r2, r3
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	1c58      	adds	r0, r3, #1
 8005404:	4b6b      	ldr	r3, [pc, #428]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	4b6b      	ldr	r3, [pc, #428]	; (80055b8 <mode_chase_flash+0x2c8>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	0019      	movs	r1, r3
 800540e:	000b      	movs	r3, r1
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	1a5b      	subs	r3, r3, r1
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	18d3      	adds	r3, r2, r3
 8005418:	88db      	ldrh	r3, [r3, #6]
 800541a:	001c      	movs	r4, r3
 800541c:	4b65      	ldr	r3, [pc, #404]	; (80055b4 <mode_chase_flash+0x2c4>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b65      	ldr	r3, [pc, #404]	; (80055b8 <mode_chase_flash+0x2c8>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	0019      	movs	r1, r3
 8005426:	000b      	movs	r3, r1
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	1a5b      	subs	r3, r3, r1
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	18d3      	adds	r3, r2, r3
 8005430:	889b      	ldrh	r3, [r3, #4]
 8005432:	1ae3      	subs	r3, r4, r3
 8005434:	3301      	adds	r3, #1
 8005436:	0019      	movs	r1, r3
 8005438:	f7fa fef4 	bl	8000224 <__aeabi_uidivmod>
 800543c:	000b      	movs	r3, r1
 800543e:	001a      	movs	r2, r3
 8005440:	1dbb      	adds	r3, r7, #6
 8005442:	801a      	strh	r2, [r3, #0]
      if(IS_REVERSE)
 8005444:	4b5b      	ldr	r3, [pc, #364]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	4b5b      	ldr	r3, [pc, #364]	; (80055b8 <mode_chase_flash+0x2c8>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	0019      	movs	r1, r3
 800544e:	000b      	movs	r3, r1
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	1a5b      	subs	r3, r3, r1
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	18d3      	adds	r3, r2, r3
 8005458:	7a9b      	ldrb	r3, [r3, #10]
 800545a:	2201      	movs	r2, #1
 800545c:	4013      	ands	r3, r2
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02a      	beq.n	80054ba <mode_chase_flash+0x1ca>
      {
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - n, WHITE);
 8005464:	4b53      	ldr	r3, [pc, #332]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <mode_chase_flash+0x2c8>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	0019      	movs	r1, r3
 800546e:	000b      	movs	r3, r1
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	18d3      	adds	r3, r2, r3
 8005478:	88da      	ldrh	r2, [r3, #6]
 800547a:	197b      	adds	r3, r7, r5
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	b29b      	uxth	r3, r3
 8005482:	b21b      	sxth	r3, r3
 8005484:	4a4e      	ldr	r2, [pc, #312]	; (80055c0 <mode_chase_flash+0x2d0>)
 8005486:	0011      	movs	r1, r2
 8005488:	0018      	movs	r0, r3
 800548a:	f7fb fcc3 	bl	8000e14 <WS2811_SetDiodeColor>
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - m, WHITE);
 800548e:	4b49      	ldr	r3, [pc, #292]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b49      	ldr	r3, [pc, #292]	; (80055b8 <mode_chase_flash+0x2c8>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	0019      	movs	r1, r3
 8005498:	000b      	movs	r3, r1
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	1a5b      	subs	r3, r3, r1
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	18d3      	adds	r3, r2, r3
 80054a2:	88da      	ldrh	r2, [r3, #6]
 80054a4:	1dbb      	adds	r3, r7, #6
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	b21b      	sxth	r3, r3
 80054ae:	4a44      	ldr	r2, [pc, #272]	; (80055c0 <mode_chase_flash+0x2d0>)
 80054b0:	0011      	movs	r1, r2
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7fb fcae 	bl	8000e14 <WS2811_SetDiodeColor>
 80054b8:	e02a      	b.n	8005510 <mode_chase_flash+0x220>
      }
      else
      {
        WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + n, WHITE);
 80054ba:	4b3e      	ldr	r3, [pc, #248]	; (80055b4 <mode_chase_flash+0x2c4>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b3e      	ldr	r3, [pc, #248]	; (80055b8 <mode_chase_flash+0x2c8>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	0019      	movs	r1, r3
 80054c4:	000b      	movs	r3, r1
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	1a5b      	subs	r3, r3, r1
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	18d3      	adds	r3, r2, r3
 80054ce:	889a      	ldrh	r2, [r3, #4]
 80054d0:	2308      	movs	r3, #8
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	18d3      	adds	r3, r2, r3
 80054d8:	b29b      	uxth	r3, r3
 80054da:	b21b      	sxth	r3, r3
 80054dc:	4a38      	ldr	r2, [pc, #224]	; (80055c0 <mode_chase_flash+0x2d0>)
 80054de:	0011      	movs	r1, r2
 80054e0:	0018      	movs	r0, r3
 80054e2:	f7fb fc97 	bl	8000e14 <WS2811_SetDiodeColor>
        WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + m, WHITE);
 80054e6:	4b33      	ldr	r3, [pc, #204]	; (80055b4 <mode_chase_flash+0x2c4>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b33      	ldr	r3, [pc, #204]	; (80055b8 <mode_chase_flash+0x2c8>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	0019      	movs	r1, r3
 80054f0:	000b      	movs	r3, r1
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	1a5b      	subs	r3, r3, r1
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	18d3      	adds	r3, r2, r3
 80054fa:	889a      	ldrh	r2, [r3, #4]
 80054fc:	1dbb      	adds	r3, r7, #6
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	18d3      	adds	r3, r2, r3
 8005502:	b29b      	uxth	r3, r3
 8005504:	b21b      	sxth	r3, r3
 8005506:	4a2e      	ldr	r2, [pc, #184]	; (80055c0 <mode_chase_flash+0x2d0>)
 8005508:	0011      	movs	r1, r2
 800550a:	0018      	movs	r0, r3
 800550c:	f7fb fc82 	bl	8000e14 <WS2811_SetDiodeColor>
      }
      delay = 20;
 8005510:	230c      	movs	r3, #12
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	2214      	movs	r2, #20
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e039      	b.n	800558e <mode_chase_flash+0x29e>
    }
    else
    {
      delay = 30;
 800551a:	230c      	movs	r3, #12
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	221e      	movs	r2, #30
 8005520:	801a      	strh	r2, [r3, #0]
 8005522:	e034      	b.n	800558e <mode_chase_flash+0x29e>
    }
  }
  else
  {
    Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % SEGMENT_LENGTH;
 8005524:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <mode_chase_flash+0x2c8>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	0019      	movs	r1, r3
 800552e:	000b      	movs	r3, r1
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	1a5b      	subs	r3, r3, r1
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	18d3      	adds	r3, r2, r3
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	1c58      	adds	r0, r3, #1
 800553c:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <mode_chase_flash+0x2c4>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <mode_chase_flash+0x2c8>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	0019      	movs	r1, r3
 8005546:	000b      	movs	r3, r1
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	1a5b      	subs	r3, r3, r1
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	18d3      	adds	r3, r2, r3
 8005550:	88db      	ldrh	r3, [r3, #6]
 8005552:	001c      	movs	r4, r3
 8005554:	4b17      	ldr	r3, [pc, #92]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4b17      	ldr	r3, [pc, #92]	; (80055b8 <mode_chase_flash+0x2c8>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	0019      	movs	r1, r3
 800555e:	000b      	movs	r3, r1
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	1a5b      	subs	r3, r3, r1
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	18d3      	adds	r3, r2, r3
 8005568:	889b      	ldrh	r3, [r3, #4]
 800556a:	1ae3      	subs	r3, r4, r3
 800556c:	3301      	adds	r3, #1
 800556e:	001d      	movs	r5, r3
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4b10      	ldr	r3, [pc, #64]	; (80055b8 <mode_chase_flash+0x2c8>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	0019      	movs	r1, r3
 800557a:	000b      	movs	r3, r1
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	1a5b      	subs	r3, r3, r1
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	18d4      	adds	r4, r2, r3
 8005584:	0029      	movs	r1, r5
 8005586:	f7fa fe4d 	bl	8000224 <__aeabi_uidivmod>
 800558a:	000b      	movs	r3, r1
 800558c:	6123      	str	r3, [r4, #16]
  }
  Ws28b11_Segments[mActualSegment].ModeDelay = delay;
 800558e:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <mode_chase_flash+0x2c4>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <mode_chase_flash+0x2c8>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	0019      	movs	r1, r3
 8005598:	000b      	movs	r3, r1
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	1a5b      	subs	r3, r3, r1
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	18d3      	adds	r3, r2, r3
 80055a2:	220c      	movs	r2, #12
 80055a4:	18ba      	adds	r2, r7, r2
 80055a6:	8812      	ldrh	r2, [r2, #0]
 80055a8:	601a      	str	r2, [r3, #0]
}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b004      	add	sp, #16
 80055b0:	bdb0      	pop	{r4, r5, r7, pc}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	2000057c 	.word	0x2000057c
 80055b8:	20000754 	.word	0x20000754
 80055bc:	0800aee4 	.word	0x0800aee4
 80055c0:	00ffffff 	.word	0x00ffffff

080055c4 <mode_chase_flash_random>:

/*
 * White flashes running, followed by random color.
 */
void mode_chase_flash_random(void)
{
 80055c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
  const static uint8_t flash_count = 4;
  uint8_t flash_step = Ws28b11_Segments[mActualSegment].CounterModeCall % ((flash_count * 2) + 1);
 80055ca:	4bc6      	ldr	r3, [pc, #792]	; (80058e4 <mode_chase_flash_random+0x320>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4bc6      	ldr	r3, [pc, #792]	; (80058e8 <mode_chase_flash_random+0x324>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	0019      	movs	r1, r3
 80055d4:	000b      	movs	r3, r1
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	1a5b      	subs	r3, r3, r1
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	18d3      	adds	r3, r2, r3
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	4bc2      	ldr	r3, [pc, #776]	; (80058ec <mode_chase_flash_random+0x328>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	3301      	adds	r3, #1
 80055e8:	0019      	movs	r1, r3
 80055ea:	0010      	movs	r0, r2
 80055ec:	f7fa fe1a 	bl	8000224 <__aeabi_uidivmod>
 80055f0:	000b      	movs	r3, r1
 80055f2:	001a      	movs	r2, r3
 80055f4:	230b      	movs	r3, #11
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	701a      	strb	r2, [r3, #0]

  for(uint16_t i=0; i < Ws28b11_Segments[mActualSegment].CounterModeStep; i++)
 80055fa:	230e      	movs	r3, #14
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	2200      	movs	r2, #0
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	e029      	b.n	8005658 <mode_chase_flash_random+0x94>
  {
    WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + i, color_wheel(Ws28b11_Segments[mActualSegment].AuxParam));
 8005604:	4bb7      	ldr	r3, [pc, #732]	; (80058e4 <mode_chase_flash_random+0x320>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4bb7      	ldr	r3, [pc, #732]	; (80058e8 <mode_chase_flash_random+0x324>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	0019      	movs	r1, r3
 800560e:	000b      	movs	r3, r1
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	1a5b      	subs	r3, r3, r1
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	18d3      	adds	r3, r2, r3
 8005618:	889a      	ldrh	r2, [r3, #4]
 800561a:	250e      	movs	r5, #14
 800561c:	197b      	adds	r3, r7, r5
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	18d3      	adds	r3, r2, r3
 8005622:	b29b      	uxth	r3, r3
 8005624:	b21c      	sxth	r4, r3
 8005626:	4baf      	ldr	r3, [pc, #700]	; (80058e4 <mode_chase_flash_random+0x320>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4baf      	ldr	r3, [pc, #700]	; (80058e8 <mode_chase_flash_random+0x324>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	0019      	movs	r1, r3
 8005630:	000b      	movs	r3, r1
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	1a5b      	subs	r3, r3, r1
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	18d3      	adds	r3, r2, r3
 800563a:	222d      	movs	r2, #45	; 0x2d
 800563c:	5c9b      	ldrb	r3, [r3, r2]
 800563e:	0018      	movs	r0, r3
 8005640:	f7fc fdb2 	bl	80021a8 <color_wheel>
 8005644:	0003      	movs	r3, r0
 8005646:	0019      	movs	r1, r3
 8005648:	0020      	movs	r0, r4
 800564a:	f7fb fbe3 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=0; i < Ws28b11_Segments[mActualSegment].CounterModeStep; i++)
 800564e:	197b      	adds	r3, r7, r5
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	197b      	adds	r3, r7, r5
 8005654:	3201      	adds	r2, #1
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	230e      	movs	r3, #14
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	4ba1      	ldr	r3, [pc, #644]	; (80058e4 <mode_chase_flash_random+0x320>)
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	4ba1      	ldr	r3, [pc, #644]	; (80058e8 <mode_chase_flash_random+0x324>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	0018      	movs	r0, r3
 8005668:	0003      	movs	r3, r0
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	1a1b      	subs	r3, r3, r0
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	18cb      	adds	r3, r1, r3
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	429a      	cmp	r2, r3
 8005676:	d3c5      	bcc.n	8005604 <mode_chase_flash_random+0x40>
  }

  uint16_t delay = Ws28b11_Segments[mActualSegment].Speed;
 8005678:	4b9a      	ldr	r3, [pc, #616]	; (80058e4 <mode_chase_flash_random+0x320>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4b9a      	ldr	r3, [pc, #616]	; (80058e8 <mode_chase_flash_random+0x324>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	0019      	movs	r1, r3
 8005682:	000b      	movs	r3, r1
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	1a5b      	subs	r3, r3, r1
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	18d2      	adds	r2, r2, r3
 800568c:	250c      	movs	r5, #12
 800568e:	197b      	adds	r3, r7, r5
 8005690:	8a92      	ldrh	r2, [r2, #20]
 8005692:	801a      	strh	r2, [r3, #0]
  if(flash_step < (flash_count * 2))
 8005694:	260b      	movs	r6, #11
 8005696:	19bb      	adds	r3, r7, r6
 8005698:	781a      	ldrb	r2, [r3, #0]
 800569a:	4b94      	ldr	r3, [pc, #592]	; (80058ec <mode_chase_flash_random+0x328>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	429a      	cmp	r2, r3
 80056a2:	db00      	blt.n	80056a6 <mode_chase_flash_random+0xe2>
 80056a4:	e0ad      	b.n	8005802 <mode_chase_flash_random+0x23e>
  {
    uint16_t n = Ws28b11_Segments[mActualSegment].CounterModeStep;
 80056a6:	4b8f      	ldr	r3, [pc, #572]	; (80058e4 <mode_chase_flash_random+0x320>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b8f      	ldr	r3, [pc, #572]	; (80058e8 <mode_chase_flash_random+0x324>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	0019      	movs	r1, r3
 80056b0:	000b      	movs	r3, r1
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	1a5b      	subs	r3, r3, r1
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	18d3      	adds	r3, r2, r3
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	2308      	movs	r3, #8
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	801a      	strh	r2, [r3, #0]
    uint16_t m = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % SEGMENT_LENGTH;
 80056c2:	4b88      	ldr	r3, [pc, #544]	; (80058e4 <mode_chase_flash_random+0x320>)
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4b88      	ldr	r3, [pc, #544]	; (80058e8 <mode_chase_flash_random+0x324>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	0019      	movs	r1, r3
 80056cc:	000b      	movs	r3, r1
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	1a5b      	subs	r3, r3, r1
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	18d3      	adds	r3, r2, r3
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	1c58      	adds	r0, r3, #1
 80056da:	4b82      	ldr	r3, [pc, #520]	; (80058e4 <mode_chase_flash_random+0x320>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b82      	ldr	r3, [pc, #520]	; (80058e8 <mode_chase_flash_random+0x324>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	0019      	movs	r1, r3
 80056e4:	000b      	movs	r3, r1
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	1a5b      	subs	r3, r3, r1
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	18d3      	adds	r3, r2, r3
 80056ee:	88db      	ldrh	r3, [r3, #6]
 80056f0:	001c      	movs	r4, r3
 80056f2:	4b7c      	ldr	r3, [pc, #496]	; (80058e4 <mode_chase_flash_random+0x320>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4b7c      	ldr	r3, [pc, #496]	; (80058e8 <mode_chase_flash_random+0x324>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	0019      	movs	r1, r3
 80056fc:	000b      	movs	r3, r1
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	1a5b      	subs	r3, r3, r1
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	18d3      	adds	r3, r2, r3
 8005706:	889b      	ldrh	r3, [r3, #4]
 8005708:	1ae3      	subs	r3, r4, r3
 800570a:	3301      	adds	r3, #1
 800570c:	0019      	movs	r1, r3
 800570e:	f7fa fd89 	bl	8000224 <__aeabi_uidivmod>
 8005712:	000b      	movs	r3, r1
 8005714:	001a      	movs	r2, r3
 8005716:	1dbb      	adds	r3, r7, #6
 8005718:	801a      	strh	r2, [r3, #0]
    if(flash_step % 2 == 0)
 800571a:	19bb      	adds	r3, r7, r6
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	4013      	ands	r3, r2
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d12e      	bne.n	8005786 <mode_chase_flash_random+0x1c2>
    {
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + n, WHITE);
 8005728:	4b6e      	ldr	r3, [pc, #440]	; (80058e4 <mode_chase_flash_random+0x320>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b6e      	ldr	r3, [pc, #440]	; (80058e8 <mode_chase_flash_random+0x324>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	0019      	movs	r1, r3
 8005732:	000b      	movs	r3, r1
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	1a5b      	subs	r3, r3, r1
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	18d3      	adds	r3, r2, r3
 800573c:	889a      	ldrh	r2, [r3, #4]
 800573e:	2308      	movs	r3, #8
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	18d3      	adds	r3, r2, r3
 8005746:	b29b      	uxth	r3, r3
 8005748:	b21b      	sxth	r3, r3
 800574a:	4a69      	ldr	r2, [pc, #420]	; (80058f0 <mode_chase_flash_random+0x32c>)
 800574c:	0011      	movs	r1, r2
 800574e:	0018      	movs	r0, r3
 8005750:	f7fb fb60 	bl	8000e14 <WS2811_SetDiodeColor>
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + m, WHITE);
 8005754:	4b63      	ldr	r3, [pc, #396]	; (80058e4 <mode_chase_flash_random+0x320>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b63      	ldr	r3, [pc, #396]	; (80058e8 <mode_chase_flash_random+0x324>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	0019      	movs	r1, r3
 800575e:	000b      	movs	r3, r1
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	1a5b      	subs	r3, r3, r1
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	18d3      	adds	r3, r2, r3
 8005768:	889a      	ldrh	r2, [r3, #4]
 800576a:	1dbb      	adds	r3, r7, #6
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	18d3      	adds	r3, r2, r3
 8005770:	b29b      	uxth	r3, r3
 8005772:	b21b      	sxth	r3, r3
 8005774:	4a5e      	ldr	r2, [pc, #376]	; (80058f0 <mode_chase_flash_random+0x32c>)
 8005776:	0011      	movs	r1, r2
 8005778:	0018      	movs	r0, r3
 800577a:	f7fb fb4b 	bl	8000e14 <WS2811_SetDiodeColor>
      delay = 20;
 800577e:	197b      	adds	r3, r7, r5
 8005780:	2214      	movs	r2, #20
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	e09c      	b.n	80058c0 <mode_chase_flash_random+0x2fc>
    }
    else
    {
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + n, color_wheel(Ws28b11_Segments[mActualSegment].AuxParam));
 8005786:	4b57      	ldr	r3, [pc, #348]	; (80058e4 <mode_chase_flash_random+0x320>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b57      	ldr	r3, [pc, #348]	; (80058e8 <mode_chase_flash_random+0x324>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	0019      	movs	r1, r3
 8005790:	000b      	movs	r3, r1
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a5b      	subs	r3, r3, r1
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	18d3      	adds	r3, r2, r3
 800579a:	889a      	ldrh	r2, [r3, #4]
 800579c:	2308      	movs	r3, #8
 800579e:	18fb      	adds	r3, r7, r3
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	18d3      	adds	r3, r2, r3
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	b21c      	sxth	r4, r3
 80057a8:	4b4e      	ldr	r3, [pc, #312]	; (80058e4 <mode_chase_flash_random+0x320>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b4e      	ldr	r3, [pc, #312]	; (80058e8 <mode_chase_flash_random+0x324>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	0019      	movs	r1, r3
 80057b2:	000b      	movs	r3, r1
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	18d3      	adds	r3, r2, r3
 80057bc:	222d      	movs	r2, #45	; 0x2d
 80057be:	5c9b      	ldrb	r3, [r3, r2]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f7fc fcf1 	bl	80021a8 <color_wheel>
 80057c6:	0003      	movs	r3, r0
 80057c8:	0019      	movs	r1, r3
 80057ca:	0020      	movs	r0, r4
 80057cc:	f7fb fb22 	bl	8000e14 <WS2811_SetDiodeColor>
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + m, BLACK);
 80057d0:	4b44      	ldr	r3, [pc, #272]	; (80058e4 <mode_chase_flash_random+0x320>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b44      	ldr	r3, [pc, #272]	; (80058e8 <mode_chase_flash_random+0x324>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	0019      	movs	r1, r3
 80057da:	000b      	movs	r3, r1
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	1a5b      	subs	r3, r3, r1
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	18d3      	adds	r3, r2, r3
 80057e4:	889a      	ldrh	r2, [r3, #4]
 80057e6:	1dbb      	adds	r3, r7, #6
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	18d3      	adds	r3, r2, r3
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	b21b      	sxth	r3, r3
 80057f0:	2100      	movs	r1, #0
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7fb fb0e 	bl	8000e14 <WS2811_SetDiodeColor>
      delay = 30;
 80057f8:	230c      	movs	r3, #12
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	221e      	movs	r2, #30
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	e05e      	b.n	80058c0 <mode_chase_flash_random+0x2fc>
    }
  }
  else
  {
    Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % SEGMENT_LENGTH;
 8005802:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <mode_chase_flash_random+0x320>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4b38      	ldr	r3, [pc, #224]	; (80058e8 <mode_chase_flash_random+0x324>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	0019      	movs	r1, r3
 800580c:	000b      	movs	r3, r1
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	1a5b      	subs	r3, r3, r1
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	18d3      	adds	r3, r2, r3
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	1c58      	adds	r0, r3, #1
 800581a:	4b32      	ldr	r3, [pc, #200]	; (80058e4 <mode_chase_flash_random+0x320>)
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b32      	ldr	r3, [pc, #200]	; (80058e8 <mode_chase_flash_random+0x324>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	0019      	movs	r1, r3
 8005824:	000b      	movs	r3, r1
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	1a5b      	subs	r3, r3, r1
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	18d3      	adds	r3, r2, r3
 800582e:	88db      	ldrh	r3, [r3, #6]
 8005830:	001c      	movs	r4, r3
 8005832:	4b2c      	ldr	r3, [pc, #176]	; (80058e4 <mode_chase_flash_random+0x320>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4b2c      	ldr	r3, [pc, #176]	; (80058e8 <mode_chase_flash_random+0x324>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	0019      	movs	r1, r3
 800583c:	000b      	movs	r3, r1
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	1a5b      	subs	r3, r3, r1
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	18d3      	adds	r3, r2, r3
 8005846:	889b      	ldrh	r3, [r3, #4]
 8005848:	1ae3      	subs	r3, r4, r3
 800584a:	3301      	adds	r3, #1
 800584c:	001d      	movs	r5, r3
 800584e:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <mode_chase_flash_random+0x320>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <mode_chase_flash_random+0x324>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	0019      	movs	r1, r3
 8005858:	000b      	movs	r3, r1
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	1a5b      	subs	r3, r3, r1
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	18d4      	adds	r4, r2, r3
 8005862:	0029      	movs	r1, r5
 8005864:	f7fa fcde 	bl	8000224 <__aeabi_uidivmod>
 8005868:	000b      	movs	r3, r1
 800586a:	6123      	str	r3, [r4, #16]

    if(Ws28b11_Segments[mActualSegment].CounterModeStep == 0)
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <mode_chase_flash_random+0x320>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <mode_chase_flash_random+0x324>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	0019      	movs	r1, r3
 8005876:	000b      	movs	r3, r1
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	1a5b      	subs	r3, r3, r1
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	18d3      	adds	r3, r2, r3
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d11c      	bne.n	80058c0 <mode_chase_flash_random+0x2fc>
    {
      Ws28b11_Segments[mActualSegment].AuxParam = get_random_wheel_index(Ws28b11_Segments[mActualSegment].AuxParam);
 8005886:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <mode_chase_flash_random+0x320>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <mode_chase_flash_random+0x324>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	0019      	movs	r1, r3
 8005890:	000b      	movs	r3, r1
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	1a5b      	subs	r3, r3, r1
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	18d3      	adds	r3, r2, r3
 800589a:	222d      	movs	r2, #45	; 0x2d
 800589c:	5c99      	ldrb	r1, [r3, r2]
 800589e:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <mode_chase_flash_random+0x320>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <mode_chase_flash_random+0x324>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	0018      	movs	r0, r3
 80058a8:	0003      	movs	r3, r0
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	1a1b      	subs	r3, r3, r0
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	18d4      	adds	r4, r2, r3
 80058b2:	0008      	movs	r0, r1
 80058b4:	f7fc fcc4 	bl	8002240 <get_random_wheel_index>
 80058b8:	0003      	movs	r3, r0
 80058ba:	001a      	movs	r2, r3
 80058bc:	232d      	movs	r3, #45	; 0x2d
 80058be:	54e2      	strb	r2, [r4, r3]
    }
  }
  Ws28b11_Segments[mActualSegment].ModeDelay = delay;
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <mode_chase_flash_random+0x320>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <mode_chase_flash_random+0x324>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	0019      	movs	r1, r3
 80058ca:	000b      	movs	r3, r1
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	1a5b      	subs	r3, r3, r1
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	18d3      	adds	r3, r2, r3
 80058d4:	220c      	movs	r2, #12
 80058d6:	18ba      	adds	r2, r7, r2
 80058d8:	8812      	ldrh	r2, [r2, #0]
 80058da:	601a      	str	r2, [r3, #0]
}
 80058dc:	46c0      	nop			; (mov r8, r8)
 80058de:	46bd      	mov	sp, r7
 80058e0:	b005      	add	sp, #20
 80058e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e4:	2000057c 	.word	0x2000057c
 80058e8:	20000754 	.word	0x20000754
 80058ec:	0800aee5 	.word	0x0800aee5
 80058f0:	00ffffff 	.word	0x00ffffff

080058f4 <running>:

/*
 * Alternating pixels running function.
 */
void running(uint32_t color1, uint32_t color2)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++)
 80058fe:	230e      	movs	r3, #14
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	2200      	movs	r2, #0
 8005904:	801a      	strh	r2, [r3, #0]
 8005906:	e091      	b.n	8005a2c <running+0x138>
  {
    if((i + Ws28b11_Segments[mActualSegment].CounterModeStep) % 4 < 2)
 8005908:	240e      	movs	r4, #14
 800590a:	193b      	adds	r3, r7, r4
 800590c:	881a      	ldrh	r2, [r3, #0]
 800590e:	4b70      	ldr	r3, [pc, #448]	; (8005ad0 <running+0x1dc>)
 8005910:	6819      	ldr	r1, [r3, #0]
 8005912:	4b70      	ldr	r3, [pc, #448]	; (8005ad4 <running+0x1e0>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	0018      	movs	r0, r3
 8005918:	0003      	movs	r3, r0
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	1a1b      	subs	r3, r3, r0
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	18cb      	adds	r3, r1, r3
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	18d3      	adds	r3, r2, r3
 8005926:	2202      	movs	r2, #2
 8005928:	4013      	ands	r3, r2
 800592a:	d13c      	bne.n	80059a6 <running+0xb2>
    {
      if(IS_REVERSE) {
 800592c:	4b68      	ldr	r3, [pc, #416]	; (8005ad0 <running+0x1dc>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4b68      	ldr	r3, [pc, #416]	; (8005ad4 <running+0x1e0>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	0019      	movs	r1, r3
 8005936:	000b      	movs	r3, r1
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	1a5b      	subs	r3, r3, r1
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	18d3      	adds	r3, r2, r3
 8005940:	7a9b      	ldrb	r3, [r3, #10]
 8005942:	2201      	movs	r2, #1
 8005944:	4013      	ands	r3, r2
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <running+0x84>
    	  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + i, color1);
 800594c:	4b60      	ldr	r3, [pc, #384]	; (8005ad0 <running+0x1dc>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	4b60      	ldr	r3, [pc, #384]	; (8005ad4 <running+0x1e0>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	0019      	movs	r1, r3
 8005956:	000b      	movs	r3, r1
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	1a5b      	subs	r3, r3, r1
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	18d3      	adds	r3, r2, r3
 8005960:	889a      	ldrh	r2, [r3, #4]
 8005962:	193b      	adds	r3, r7, r4
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	18d3      	adds	r3, r2, r3
 8005968:	b29b      	uxth	r3, r3
 800596a:	b21b      	sxth	r3, r3
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	0011      	movs	r1, r2
 8005970:	0018      	movs	r0, r3
 8005972:	f7fb fa4f 	bl	8000e14 <WS2811_SetDiodeColor>
 8005976:	e053      	b.n	8005a20 <running+0x12c>
      } else {
        WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - i, color1);
 8005978:	4b55      	ldr	r3, [pc, #340]	; (8005ad0 <running+0x1dc>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b55      	ldr	r3, [pc, #340]	; (8005ad4 <running+0x1e0>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	0019      	movs	r1, r3
 8005982:	000b      	movs	r3, r1
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	1a5b      	subs	r3, r3, r1
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	18d3      	adds	r3, r2, r3
 800598c:	88da      	ldrh	r2, [r3, #6]
 800598e:	230e      	movs	r3, #14
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	b29b      	uxth	r3, r3
 8005998:	b21b      	sxth	r3, r3
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	0011      	movs	r1, r2
 800599e:	0018      	movs	r0, r3
 80059a0:	f7fb fa38 	bl	8000e14 <WS2811_SetDiodeColor>
 80059a4:	e03c      	b.n	8005a20 <running+0x12c>
      }
    } else {
      if(IS_REVERSE) {
 80059a6:	4b4a      	ldr	r3, [pc, #296]	; (8005ad0 <running+0x1dc>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <running+0x1e0>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	0019      	movs	r1, r3
 80059b0:	000b      	movs	r3, r1
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	1a5b      	subs	r3, r3, r1
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	18d3      	adds	r3, r2, r3
 80059ba:	7a9b      	ldrb	r3, [r3, #10]
 80059bc:	2201      	movs	r2, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <running+0x100>
        WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + i, color1);
 80059c6:	4b42      	ldr	r3, [pc, #264]	; (8005ad0 <running+0x1dc>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b42      	ldr	r3, [pc, #264]	; (8005ad4 <running+0x1e0>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	0019      	movs	r1, r3
 80059d0:	000b      	movs	r3, r1
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	1a5b      	subs	r3, r3, r1
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	18d3      	adds	r3, r2, r3
 80059da:	889a      	ldrh	r2, [r3, #4]
 80059dc:	230e      	movs	r3, #14
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	b21b      	sxth	r3, r3
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	0011      	movs	r1, r2
 80059ec:	0018      	movs	r0, r3
 80059ee:	f7fb fa11 	bl	8000e14 <WS2811_SetDiodeColor>
 80059f2:	e015      	b.n	8005a20 <running+0x12c>
      } else {
        WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - i, color2);
 80059f4:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <running+0x1dc>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b36      	ldr	r3, [pc, #216]	; (8005ad4 <running+0x1e0>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	0019      	movs	r1, r3
 80059fe:	000b      	movs	r3, r1
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	1a5b      	subs	r3, r3, r1
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	18d3      	adds	r3, r2, r3
 8005a08:	88da      	ldrh	r2, [r3, #6]
 8005a0a:	230e      	movs	r3, #14
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	0011      	movs	r1, r2
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f7fb f9fa 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++)
 8005a20:	210e      	movs	r1, #14
 8005a22:	187b      	adds	r3, r7, r1
 8005a24:	881a      	ldrh	r2, [r3, #0]
 8005a26:	187b      	adds	r3, r7, r1
 8005a28:	3201      	adds	r2, #1
 8005a2a:	801a      	strh	r2, [r3, #0]
 8005a2c:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <running+0x1dc>)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <running+0x1e0>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	0019      	movs	r1, r3
 8005a36:	000b      	movs	r3, r1
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	1a5b      	subs	r3, r3, r1
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	18d3      	adds	r3, r2, r3
 8005a40:	88db      	ldrh	r3, [r3, #6]
 8005a42:	0018      	movs	r0, r3
 8005a44:	4b22      	ldr	r3, [pc, #136]	; (8005ad0 <running+0x1dc>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <running+0x1e0>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	0019      	movs	r1, r3
 8005a4e:	000b      	movs	r3, r1
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	1a5b      	subs	r3, r3, r1
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	18d3      	adds	r3, r2, r3
 8005a58:	889b      	ldrh	r3, [r3, #4]
 8005a5a:	1ac2      	subs	r2, r0, r3
 8005a5c:	230e      	movs	r3, #14
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	db00      	blt.n	8005a68 <running+0x174>
 8005a66:	e74f      	b.n	8005908 <running+0x14>
      }
    }
  }

  Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) & 0x3;
 8005a68:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <running+0x1dc>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <running+0x1e0>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	0019      	movs	r1, r3
 8005a72:	000b      	movs	r3, r1
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	1a5b      	subs	r3, r3, r1
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	18d3      	adds	r3, r2, r3
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <running+0x1dc>)
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <running+0x1e0>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	1a1b      	subs	r3, r3, r0
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	18cb      	adds	r3, r1, r3
 8005a94:	2103      	movs	r1, #3
 8005a96:	400a      	ands	r2, r1
 8005a98:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <running+0x1dc>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <running+0x1e0>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	000b      	movs	r3, r1
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	1a5b      	subs	r3, r3, r1
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	18d3      	adds	r3, r2, r3
 8005aae:	8a98      	ldrh	r0, [r3, #20]
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <running+0x1dc>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	4b07      	ldr	r3, [pc, #28]	; (8005ad4 <running+0x1e0>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	0019      	movs	r1, r3
 8005aba:	000b      	movs	r3, r1
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	1a5b      	subs	r3, r3, r1
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	18d3      	adds	r3, r2, r3
 8005ac4:	0002      	movs	r2, r0
 8005ac6:	601a      	str	r2, [r3, #0]
}
 8005ac8:	46c0      	nop			; (mov r8, r8)
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b005      	add	sp, #20
 8005ace:	bd90      	pop	{r4, r7, pc}
 8005ad0:	2000057c 	.word	0x2000057c
 8005ad4:	20000754 	.word	0x20000754

08005ad8 <mode_running_color>:

/*
 * Alternating color/white pixels running.
 */
void mode_running_color(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  return running(Ws28b11_Segments[mActualSegment].ModeColor[0], WHITE);
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <mode_running_color+0x28>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <mode_running_color+0x2c>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	000b      	movs	r3, r1
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	1a5b      	subs	r3, r3, r1
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	18d3      	adds	r3, r2, r3
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	4a05      	ldr	r2, [pc, #20]	; (8005b08 <mode_running_color+0x30>)
 8005af4:	0011      	movs	r1, r2
 8005af6:	0018      	movs	r0, r3
 8005af8:	f7ff fefc 	bl	80058f4 <running>
}
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	2000057c 	.word	0x2000057c
 8005b04:	20000754 	.word	0x20000754
 8005b08:	00ffffff 	.word	0x00ffffff

08005b0c <mode_running_red_blue>:

/*
 * Alternating red/blue pixels running.
 */
void mode_running_red_blue(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  return running(RED, BLUE);
 8005b10:	23ff      	movs	r3, #255	; 0xff
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	21ff      	movs	r1, #255	; 0xff
 8005b16:	0018      	movs	r0, r3
 8005b18:	f7ff feec 	bl	80058f4 <running>
}
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <mode_merry_christmas>:

/*
 * Alternating red/green pixels running.
 */
void mode_merry_christmas(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  return running(RED, GREEN);
 8005b24:	23ff      	movs	r3, #255	; 0xff
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	23ff      	movs	r3, #255	; 0xff
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	0011      	movs	r1, r2
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f7ff fee0 	bl	80058f4 <running>
}
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <mode_halloween>:

/*
 * Alternating orange/purple pixels running.
 */
void mode_halloween(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  return running(PURPLE, ORANGE);
 8005b3c:	4a03      	ldr	r2, [pc, #12]	; (8005b4c <mode_halloween+0x14>)
 8005b3e:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <mode_halloween+0x18>)
 8005b40:	0011      	movs	r1, r2
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7ff fed6 	bl	80058f4 <running>
}
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	00ff3000 	.word	0x00ff3000
 8005b50:	00400080 	.word	0x00400080

08005b54 <mode_running_random>:

/*
 * Random colored pixels running.
 */
void mode_running_random(void) {
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
  for(uint16_t i=SEGMENT_LENGTH-1; i > 0; i--) {
 8005b5a:	4b9c      	ldr	r3, [pc, #624]	; (8005dcc <mode_running_random+0x278>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b9c      	ldr	r3, [pc, #624]	; (8005dd0 <mode_running_random+0x27c>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	0019      	movs	r1, r3
 8005b64:	000b      	movs	r3, r1
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	1a5b      	subs	r3, r3, r1
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	18d3      	adds	r3, r2, r3
 8005b6e:	88d9      	ldrh	r1, [r3, #6]
 8005b70:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <mode_running_random+0x278>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b96      	ldr	r3, [pc, #600]	; (8005dd0 <mode_running_random+0x27c>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	0018      	movs	r0, r3
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	1a1b      	subs	r3, r3, r0
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	18d3      	adds	r3, r2, r3
 8005b84:	889a      	ldrh	r2, [r3, #4]
 8005b86:	1dbb      	adds	r3, r7, #6
 8005b88:	1a8a      	subs	r2, r1, r2
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	e069      	b.n	8005c62 <mode_running_random+0x10e>
    if(IS_REVERSE) {
 8005b8e:	4b8f      	ldr	r3, [pc, #572]	; (8005dcc <mode_running_random+0x278>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b8f      	ldr	r3, [pc, #572]	; (8005dd0 <mode_running_random+0x27c>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	0019      	movs	r1, r3
 8005b98:	000b      	movs	r3, r1
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	1a5b      	subs	r3, r3, r1
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	18d3      	adds	r3, r2, r3
 8005ba2:	7a9b      	ldrb	r3, [r3, #10]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d02a      	beq.n	8005c04 <mode_running_random+0xb0>
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - i, WS2811_GetColor(Ws28b11_Segments[mActualSegment].IdStop - i + 1));
 8005bae:	4b87      	ldr	r3, [pc, #540]	; (8005dcc <mode_running_random+0x278>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b87      	ldr	r3, [pc, #540]	; (8005dd0 <mode_running_random+0x27c>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	0019      	movs	r1, r3
 8005bb8:	000b      	movs	r3, r1
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	1a5b      	subs	r3, r3, r1
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	18d3      	adds	r3, r2, r3
 8005bc2:	88da      	ldrh	r2, [r3, #6]
 8005bc4:	1dbb      	adds	r3, r7, #6
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	b21c      	sxth	r4, r3
 8005bce:	4b7f      	ldr	r3, [pc, #508]	; (8005dcc <mode_running_random+0x278>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b7f      	ldr	r3, [pc, #508]	; (8005dd0 <mode_running_random+0x27c>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	000b      	movs	r3, r1
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	1a5b      	subs	r3, r3, r1
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	18d3      	adds	r3, r2, r3
 8005be2:	88da      	ldrh	r2, [r3, #6]
 8005be4:	1dbb      	adds	r3, r7, #6
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3301      	adds	r3, #1
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7fb f9bc 	bl	8000f70 <WS2811_GetColor>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	0019      	movs	r1, r3
 8005bfc:	0020      	movs	r0, r4
 8005bfe:	f7fb f909 	bl	8000e14 <WS2811_SetDiodeColor>
 8005c02:	e029      	b.n	8005c58 <mode_running_random+0x104>
    } else {
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + i, WS2811_GetColor(Ws28b11_Segments[mActualSegment].IdStart + i - 1));
 8005c04:	4b71      	ldr	r3, [pc, #452]	; (8005dcc <mode_running_random+0x278>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4b71      	ldr	r3, [pc, #452]	; (8005dd0 <mode_running_random+0x27c>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	0019      	movs	r1, r3
 8005c0e:	000b      	movs	r3, r1
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	1a5b      	subs	r3, r3, r1
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	18d3      	adds	r3, r2, r3
 8005c18:	889a      	ldrh	r2, [r3, #4]
 8005c1a:	1dbb      	adds	r3, r7, #6
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	18d3      	adds	r3, r2, r3
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	b21c      	sxth	r4, r3
 8005c24:	4b69      	ldr	r3, [pc, #420]	; (8005dcc <mode_running_random+0x278>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4b69      	ldr	r3, [pc, #420]	; (8005dd0 <mode_running_random+0x27c>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	000b      	movs	r3, r1
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	1a5b      	subs	r3, r3, r1
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	18d3      	adds	r3, r2, r3
 8005c38:	889a      	ldrh	r2, [r3, #4]
 8005c3a:	1dbb      	adds	r3, r7, #6
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	18d3      	adds	r3, r2, r3
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	b21b      	sxth	r3, r3
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7fb f991 	bl	8000f70 <WS2811_GetColor>
 8005c4e:	0003      	movs	r3, r0
 8005c50:	0019      	movs	r1, r3
 8005c52:	0020      	movs	r0, r4
 8005c54:	f7fb f8de 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=SEGMENT_LENGTH-1; i > 0; i--) {
 8005c58:	1dbb      	adds	r3, r7, #6
 8005c5a:	881a      	ldrh	r2, [r3, #0]
 8005c5c:	1dbb      	adds	r3, r7, #6
 8005c5e:	3a01      	subs	r2, #1
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	1dbb      	adds	r3, r7, #6
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d191      	bne.n	8005b8e <mode_running_random+0x3a>
    }
  }

  if(Ws28b11_Segments[mActualSegment].CounterModeStep == 0)
 8005c6a:	4b58      	ldr	r3, [pc, #352]	; (8005dcc <mode_running_random+0x278>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4b58      	ldr	r3, [pc, #352]	; (8005dd0 <mode_running_random+0x27c>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	0019      	movs	r1, r3
 8005c74:	000b      	movs	r3, r1
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	1a5b      	subs	r3, r3, r1
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	18d3      	adds	r3, r2, r3
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d16d      	bne.n	8005d60 <mode_running_random+0x20c>
  {
    Ws28b11_Segments[mActualSegment].AuxParam = get_random_wheel_index(Ws28b11_Segments[mActualSegment].AuxParam);
 8005c84:	4b51      	ldr	r3, [pc, #324]	; (8005dcc <mode_running_random+0x278>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b51      	ldr	r3, [pc, #324]	; (8005dd0 <mode_running_random+0x27c>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	0019      	movs	r1, r3
 8005c8e:	000b      	movs	r3, r1
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	1a5b      	subs	r3, r3, r1
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	18d3      	adds	r3, r2, r3
 8005c98:	222d      	movs	r2, #45	; 0x2d
 8005c9a:	5c99      	ldrb	r1, [r3, r2]
 8005c9c:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <mode_running_random+0x278>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b4b      	ldr	r3, [pc, #300]	; (8005dd0 <mode_running_random+0x27c>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	1a1b      	subs	r3, r3, r0
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	18d4      	adds	r4, r2, r3
 8005cb0:	0008      	movs	r0, r1
 8005cb2:	f7fc fac5 	bl	8002240 <get_random_wheel_index>
 8005cb6:	0003      	movs	r3, r0
 8005cb8:	001a      	movs	r2, r3
 8005cba:	232d      	movs	r3, #45	; 0x2d
 8005cbc:	54e2      	strb	r2, [r4, r3]
    if(IS_REVERSE) {
 8005cbe:	4b43      	ldr	r3, [pc, #268]	; (8005dcc <mode_running_random+0x278>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b43      	ldr	r3, [pc, #268]	; (8005dd0 <mode_running_random+0x27c>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	000b      	movs	r3, r1
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	1a5b      	subs	r3, r3, r1
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	18d3      	adds	r3, r2, r3
 8005cd2:	7a9b      	ldrb	r3, [r3, #10]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d020      	beq.n	8005d20 <mode_running_random+0x1cc>
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop, color_wheel(Ws28b11_Segments[mActualSegment].AuxParam));
 8005cde:	4b3b      	ldr	r3, [pc, #236]	; (8005dcc <mode_running_random+0x278>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b3b      	ldr	r3, [pc, #236]	; (8005dd0 <mode_running_random+0x27c>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	000b      	movs	r3, r1
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	1a5b      	subs	r3, r3, r1
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	18d3      	adds	r3, r2, r3
 8005cf2:	88db      	ldrh	r3, [r3, #6]
 8005cf4:	b21c      	sxth	r4, r3
 8005cf6:	4b35      	ldr	r3, [pc, #212]	; (8005dcc <mode_running_random+0x278>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <mode_running_random+0x27c>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	0019      	movs	r1, r3
 8005d00:	000b      	movs	r3, r1
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	1a5b      	subs	r3, r3, r1
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	18d3      	adds	r3, r2, r3
 8005d0a:	222d      	movs	r2, #45	; 0x2d
 8005d0c:	5c9b      	ldrb	r3, [r3, r2]
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f7fc fa4a 	bl	80021a8 <color_wheel>
 8005d14:	0003      	movs	r3, r0
 8005d16:	0019      	movs	r1, r3
 8005d18:	0020      	movs	r0, r4
 8005d1a:	f7fb f87b 	bl	8000e14 <WS2811_SetDiodeColor>
 8005d1e:	e01f      	b.n	8005d60 <mode_running_random+0x20c>
    } else {
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart, color_wheel(Ws28b11_Segments[mActualSegment].AuxParam));
 8005d20:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <mode_running_random+0x278>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <mode_running_random+0x27c>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	0019      	movs	r1, r3
 8005d2a:	000b      	movs	r3, r1
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	1a5b      	subs	r3, r3, r1
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	18d3      	adds	r3, r2, r3
 8005d34:	889b      	ldrh	r3, [r3, #4]
 8005d36:	b21c      	sxth	r4, r3
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <mode_running_random+0x278>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <mode_running_random+0x27c>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	0019      	movs	r1, r3
 8005d42:	000b      	movs	r3, r1
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	18d3      	adds	r3, r2, r3
 8005d4c:	222d      	movs	r2, #45	; 0x2d
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7fc fa29 	bl	80021a8 <color_wheel>
 8005d56:	0003      	movs	r3, r0
 8005d58:	0019      	movs	r1, r3
 8005d5a:	0020      	movs	r0, r4
 8005d5c:	f7fb f85a 	bl	8000e14 <WS2811_SetDiodeColor>
    }
  }

  Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep == 0) ? 1 : 0;
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <mode_running_random+0x278>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <mode_running_random+0x27c>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	0019      	movs	r1, r3
 8005d6a:	000b      	movs	r3, r1
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	1a5b      	subs	r3, r3, r1
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	18d3      	adds	r3, r2, r3
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	425a      	negs	r2, r3
 8005d78:	4153      	adcs	r3, r2
 8005d7a:	b2d8      	uxtb	r0, r3
 8005d7c:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <mode_running_random+0x278>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4b13      	ldr	r3, [pc, #76]	; (8005dd0 <mode_running_random+0x27c>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	0019      	movs	r1, r3
 8005d86:	000b      	movs	r3, r1
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	1a5b      	subs	r3, r3, r1
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	18d3      	adds	r3, r2, r3
 8005d90:	0002      	movs	r2, r0
 8005d92:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8005d94:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <mode_running_random+0x278>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <mode_running_random+0x27c>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	0019      	movs	r1, r3
 8005d9e:	000b      	movs	r3, r1
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	1a5b      	subs	r3, r3, r1
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	18d3      	adds	r3, r2, r3
 8005da8:	8a98      	ldrh	r0, [r3, #20]
 8005daa:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <mode_running_random+0x278>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <mode_running_random+0x27c>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	0019      	movs	r1, r3
 8005db4:	000b      	movs	r3, r1
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	1a5b      	subs	r3, r3, r1
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	18d3      	adds	r3, r2, r3
 8005dbe:	0002      	movs	r2, r0
 8005dc0:	601a      	str	r2, [r3, #0]
}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b003      	add	sp, #12
 8005dc8:	bd90      	pop	{r4, r7, pc}
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	2000057c 	.word	0x2000057c
 8005dd0:	20000754 	.word	0x20000754

08005dd4 <mode_larson_scanner>:


/*
 * K.I.T.T.
 */
void mode_larson_scanner(void) {
 8005dd4:	b5b0      	push	{r4, r5, r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  fade_out();
 8005dd8:	f7fc fa84 	bl	80022e4 <fade_out>

  if(Ws28b11_Segments[mActualSegment].CounterModeStep < SEGMENT_LENGTH)
 8005ddc:	4bdf      	ldr	r3, [pc, #892]	; (800615c <mode_larson_scanner+0x388>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4bdf      	ldr	r3, [pc, #892]	; (8006160 <mode_larson_scanner+0x38c>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	0019      	movs	r1, r3
 8005de6:	000b      	movs	r3, r1
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	1a5b      	subs	r3, r3, r1
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	18d3      	adds	r3, r2, r3
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	4bda      	ldr	r3, [pc, #872]	; (800615c <mode_larson_scanner+0x388>)
 8005df4:	6819      	ldr	r1, [r3, #0]
 8005df6:	4bda      	ldr	r3, [pc, #872]	; (8006160 <mode_larson_scanner+0x38c>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	1a1b      	subs	r3, r3, r0
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	18cb      	adds	r3, r1, r3
 8005e06:	88db      	ldrh	r3, [r3, #6]
 8005e08:	001c      	movs	r4, r3
 8005e0a:	4bd4      	ldr	r3, [pc, #848]	; (800615c <mode_larson_scanner+0x388>)
 8005e0c:	6819      	ldr	r1, [r3, #0]
 8005e0e:	4bd4      	ldr	r3, [pc, #848]	; (8006160 <mode_larson_scanner+0x38c>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	0018      	movs	r0, r3
 8005e14:	0003      	movs	r3, r0
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	1a1b      	subs	r3, r3, r0
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	18cb      	adds	r3, r1, r3
 8005e1e:	889b      	ldrh	r3, [r3, #4]
 8005e20:	1ae3      	subs	r3, r4, r3
 8005e22:	3301      	adds	r3, #1
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d261      	bcs.n	8005eec <mode_larson_scanner+0x118>
  {
    if(IS_REVERSE) {
 8005e28:	4bcc      	ldr	r3, [pc, #816]	; (800615c <mode_larson_scanner+0x388>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	4bcc      	ldr	r3, [pc, #816]	; (8006160 <mode_larson_scanner+0x38c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	0019      	movs	r1, r3
 8005e32:	000b      	movs	r3, r1
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	1a5b      	subs	r3, r3, r1
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	18d3      	adds	r3, r2, r3
 8005e3c:	7a9b      	ldrb	r3, [r3, #10]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	4013      	ands	r3, r2
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d028      	beq.n	8005e9a <mode_larson_scanner+0xc6>
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - Ws28b11_Segments[mActualSegment].CounterModeStep, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8005e48:	4bc4      	ldr	r3, [pc, #784]	; (800615c <mode_larson_scanner+0x388>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4bc4      	ldr	r3, [pc, #784]	; (8006160 <mode_larson_scanner+0x38c>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	0019      	movs	r1, r3
 8005e52:	000b      	movs	r3, r1
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	1a5b      	subs	r3, r3, r1
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	18d3      	adds	r3, r2, r3
 8005e5c:	88da      	ldrh	r2, [r3, #6]
 8005e5e:	4bbf      	ldr	r3, [pc, #764]	; (800615c <mode_larson_scanner+0x388>)
 8005e60:	6819      	ldr	r1, [r3, #0]
 8005e62:	4bbf      	ldr	r3, [pc, #764]	; (8006160 <mode_larson_scanner+0x38c>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	0018      	movs	r0, r3
 8005e68:	0003      	movs	r3, r0
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	1a1b      	subs	r3, r3, r0
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	18cb      	adds	r3, r1, r3
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	b218      	sxth	r0, r3
 8005e7c:	4bb7      	ldr	r3, [pc, #732]	; (800615c <mode_larson_scanner+0x388>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4bb7      	ldr	r3, [pc, #732]	; (8006160 <mode_larson_scanner+0x38c>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	0019      	movs	r1, r3
 8005e86:	000b      	movs	r3, r1
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	1a5b      	subs	r3, r3, r1
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	18d3      	adds	r3, r2, r3
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	0019      	movs	r1, r3
 8005e94:	f7fa ffbe 	bl	8000e14 <WS2811_SetDiodeColor>
 8005e98:	e0c9      	b.n	800602e <mode_larson_scanner+0x25a>
    } else {
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + Ws28b11_Segments[mActualSegment].CounterModeStep, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8005e9a:	4bb0      	ldr	r3, [pc, #704]	; (800615c <mode_larson_scanner+0x388>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4bb0      	ldr	r3, [pc, #704]	; (8006160 <mode_larson_scanner+0x38c>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	000b      	movs	r3, r1
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	1a5b      	subs	r3, r3, r1
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	18d3      	adds	r3, r2, r3
 8005eae:	889a      	ldrh	r2, [r3, #4]
 8005eb0:	4baa      	ldr	r3, [pc, #680]	; (800615c <mode_larson_scanner+0x388>)
 8005eb2:	6819      	ldr	r1, [r3, #0]
 8005eb4:	4baa      	ldr	r3, [pc, #680]	; (8006160 <mode_larson_scanner+0x38c>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	0003      	movs	r3, r0
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	1a1b      	subs	r3, r3, r0
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	18cb      	adds	r3, r1, r3
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	18d3      	adds	r3, r2, r3
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	b218      	sxth	r0, r3
 8005ece:	4ba3      	ldr	r3, [pc, #652]	; (800615c <mode_larson_scanner+0x388>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4ba3      	ldr	r3, [pc, #652]	; (8006160 <mode_larson_scanner+0x38c>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	000b      	movs	r3, r1
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	1a5b      	subs	r3, r3, r1
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	18d3      	adds	r3, r2, r3
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	0019      	movs	r1, r3
 8005ee6:	f7fa ff95 	bl	8000e14 <WS2811_SetDiodeColor>
 8005eea:	e0a0      	b.n	800602e <mode_larson_scanner+0x25a>
    }
  }
  else
  {
    if(IS_REVERSE) {
 8005eec:	4b9b      	ldr	r3, [pc, #620]	; (800615c <mode_larson_scanner+0x388>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b9b      	ldr	r3, [pc, #620]	; (8006160 <mode_larson_scanner+0x38c>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	0019      	movs	r1, r3
 8005ef6:	000b      	movs	r3, r1
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	1a5b      	subs	r3, r3, r1
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	18d3      	adds	r3, r2, r3
 8005f00:	7a9b      	ldrb	r3, [r3, #10]
 8005f02:	2201      	movs	r2, #1
 8005f04:	4013      	ands	r3, r2
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d048      	beq.n	8005f9e <mode_larson_scanner+0x1ca>
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - ((SEGMENT_LENGTH * 2) - Ws28b11_Segments[mActualSegment].CounterModeStep) + 2, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8005f0c:	4b93      	ldr	r3, [pc, #588]	; (800615c <mode_larson_scanner+0x388>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b93      	ldr	r3, [pc, #588]	; (8006160 <mode_larson_scanner+0x38c>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	0019      	movs	r1, r3
 8005f16:	000b      	movs	r3, r1
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	1a5b      	subs	r3, r3, r1
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	18d3      	adds	r3, r2, r3
 8005f20:	88da      	ldrh	r2, [r3, #6]
 8005f22:	4b8e      	ldr	r3, [pc, #568]	; (800615c <mode_larson_scanner+0x388>)
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	4b8e      	ldr	r3, [pc, #568]	; (8006160 <mode_larson_scanner+0x38c>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	1a1b      	subs	r3, r3, r0
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	18cb      	adds	r3, r1, r3
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	b299      	uxth	r1, r3
 8005f3a:	4b88      	ldr	r3, [pc, #544]	; (800615c <mode_larson_scanner+0x388>)
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	4b88      	ldr	r3, [pc, #544]	; (8006160 <mode_larson_scanner+0x38c>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	001c      	movs	r4, r3
 8005f44:	0023      	movs	r3, r4
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	1b1b      	subs	r3, r3, r4
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	18c3      	adds	r3, r0, r3
 8005f4e:	88db      	ldrh	r3, [r3, #6]
 8005f50:	001d      	movs	r5, r3
 8005f52:	4b82      	ldr	r3, [pc, #520]	; (800615c <mode_larson_scanner+0x388>)
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	4b82      	ldr	r3, [pc, #520]	; (8006160 <mode_larson_scanner+0x38c>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	001c      	movs	r4, r3
 8005f5c:	0023      	movs	r3, r4
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	1b1b      	subs	r3, r3, r4
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	18c3      	adds	r3, r0, r3
 8005f66:	889b      	ldrh	r3, [r3, #4]
 8005f68:	1aeb      	subs	r3, r5, r3
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	18db      	adds	r3, r3, r3
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	1acb      	subs	r3, r1, r3
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	18d3      	adds	r3, r2, r3
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	b218      	sxth	r0, r3
 8005f80:	4b76      	ldr	r3, [pc, #472]	; (800615c <mode_larson_scanner+0x388>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b76      	ldr	r3, [pc, #472]	; (8006160 <mode_larson_scanner+0x38c>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	0019      	movs	r1, r3
 8005f8a:	000b      	movs	r3, r1
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	1a5b      	subs	r3, r3, r1
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	18d3      	adds	r3, r2, r3
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	0019      	movs	r1, r3
 8005f98:	f7fa ff3c 	bl	8000e14 <WS2811_SetDiodeColor>
 8005f9c:	e047      	b.n	800602e <mode_larson_scanner+0x25a>
    } else {
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + ((SEGMENT_LENGTH * 2) - Ws28b11_Segments[mActualSegment].CounterModeStep) - 2, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8005f9e:	4b6f      	ldr	r3, [pc, #444]	; (800615c <mode_larson_scanner+0x388>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b6f      	ldr	r3, [pc, #444]	; (8006160 <mode_larson_scanner+0x38c>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	0019      	movs	r1, r3
 8005fa8:	000b      	movs	r3, r1
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	1a5b      	subs	r3, r3, r1
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	18d3      	adds	r3, r2, r3
 8005fb2:	889a      	ldrh	r2, [r3, #4]
 8005fb4:	4b69      	ldr	r3, [pc, #420]	; (800615c <mode_larson_scanner+0x388>)
 8005fb6:	6819      	ldr	r1, [r3, #0]
 8005fb8:	4b69      	ldr	r3, [pc, #420]	; (8006160 <mode_larson_scanner+0x38c>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	1a1b      	subs	r3, r3, r0
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	18cb      	adds	r3, r1, r3
 8005fc8:	88db      	ldrh	r3, [r3, #6]
 8005fca:	001c      	movs	r4, r3
 8005fcc:	4b63      	ldr	r3, [pc, #396]	; (800615c <mode_larson_scanner+0x388>)
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	4b63      	ldr	r3, [pc, #396]	; (8006160 <mode_larson_scanner+0x38c>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	0003      	movs	r3, r0
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	1a1b      	subs	r3, r3, r0
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	18cb      	adds	r3, r1, r3
 8005fe0:	889b      	ldrh	r3, [r3, #4]
 8005fe2:	1ae3      	subs	r3, r4, r3
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	18db      	adds	r3, r3, r3
 8005fea:	b299      	uxth	r1, r3
 8005fec:	4b5b      	ldr	r3, [pc, #364]	; (800615c <mode_larson_scanner+0x388>)
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	4b5b      	ldr	r3, [pc, #364]	; (8006160 <mode_larson_scanner+0x38c>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	001c      	movs	r4, r3
 8005ff6:	0023      	movs	r3, r4
 8005ff8:	00db      	lsls	r3, r3, #3
 8005ffa:	1b1b      	subs	r3, r3, r4
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	18c3      	adds	r3, r0, r3
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	b29b      	uxth	r3, r3
 8006004:	1acb      	subs	r3, r1, r3
 8006006:	b29b      	uxth	r3, r3
 8006008:	18d3      	adds	r3, r2, r3
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b02      	subs	r3, #2
 800600e:	b29b      	uxth	r3, r3
 8006010:	b218      	sxth	r0, r3
 8006012:	4b52      	ldr	r3, [pc, #328]	; (800615c <mode_larson_scanner+0x388>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b52      	ldr	r3, [pc, #328]	; (8006160 <mode_larson_scanner+0x38c>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	0019      	movs	r1, r3
 800601c:	000b      	movs	r3, r1
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	1a5b      	subs	r3, r3, r1
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	18d3      	adds	r3, r2, r3
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	0019      	movs	r1, r3
 800602a:	f7fa fef3 	bl	8000e14 <WS2811_SetDiodeColor>
    }
  }

  if(Ws28b11_Segments[mActualSegment].CounterModeStep % SEGMENT_LENGTH  == 0) Ws28b11_Segments[mActualSegment].Cycle = 1;
 800602e:	4b4b      	ldr	r3, [pc, #300]	; (800615c <mode_larson_scanner+0x388>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b4b      	ldr	r3, [pc, #300]	; (8006160 <mode_larson_scanner+0x38c>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	0019      	movs	r1, r3
 8006038:	000b      	movs	r3, r1
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	1a5b      	subs	r3, r3, r1
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	18d3      	adds	r3, r2, r3
 8006042:	6918      	ldr	r0, [r3, #16]
 8006044:	4b45      	ldr	r3, [pc, #276]	; (800615c <mode_larson_scanner+0x388>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	4b45      	ldr	r3, [pc, #276]	; (8006160 <mode_larson_scanner+0x38c>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	0019      	movs	r1, r3
 800604e:	000b      	movs	r3, r1
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	1a5b      	subs	r3, r3, r1
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	18d3      	adds	r3, r2, r3
 8006058:	88db      	ldrh	r3, [r3, #6]
 800605a:	001c      	movs	r4, r3
 800605c:	4b3f      	ldr	r3, [pc, #252]	; (800615c <mode_larson_scanner+0x388>)
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <mode_larson_scanner+0x38c>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	0019      	movs	r1, r3
 8006066:	000b      	movs	r3, r1
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	1a5b      	subs	r3, r3, r1
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	18d3      	adds	r3, r2, r3
 8006070:	889b      	ldrh	r3, [r3, #4]
 8006072:	1ae3      	subs	r3, r4, r3
 8006074:	3301      	adds	r3, #1
 8006076:	0019      	movs	r1, r3
 8006078:	f7fa f8d4 	bl	8000224 <__aeabi_uidivmod>
 800607c:	1e0b      	subs	r3, r1, #0
 800607e:	d10f      	bne.n	80060a0 <mode_larson_scanner+0x2cc>
 8006080:	4b36      	ldr	r3, [pc, #216]	; (800615c <mode_larson_scanner+0x388>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b36      	ldr	r3, [pc, #216]	; (8006160 <mode_larson_scanner+0x38c>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	0019      	movs	r1, r3
 800608a:	000b      	movs	r3, r1
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	1a5b      	subs	r3, r3, r1
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	18d3      	adds	r3, r2, r3
 8006094:	2230      	movs	r2, #48	; 0x30
 8006096:	5c99      	ldrb	r1, [r3, r2]
 8006098:	2001      	movs	r0, #1
 800609a:	4301      	orrs	r1, r0
 800609c:	5499      	strb	r1, [r3, r2]
 800609e:	e00e      	b.n	80060be <mode_larson_scanner+0x2ea>
  else Ws28b11_Segments[mActualSegment].Cycle = 1;
 80060a0:	4b2e      	ldr	r3, [pc, #184]	; (800615c <mode_larson_scanner+0x388>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	4b2e      	ldr	r3, [pc, #184]	; (8006160 <mode_larson_scanner+0x38c>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	0019      	movs	r1, r3
 80060aa:	000b      	movs	r3, r1
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	1a5b      	subs	r3, r3, r1
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	18d3      	adds	r3, r2, r3
 80060b4:	2230      	movs	r2, #48	; 0x30
 80060b6:	5c99      	ldrb	r1, [r3, r2]
 80060b8:	2001      	movs	r0, #1
 80060ba:	4301      	orrs	r1, r0
 80060bc:	5499      	strb	r1, [r3, r2]

  Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % ((SEGMENT_LENGTH * 2) - 2);
 80060be:	4b27      	ldr	r3, [pc, #156]	; (800615c <mode_larson_scanner+0x388>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b27      	ldr	r3, [pc, #156]	; (8006160 <mode_larson_scanner+0x38c>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	0019      	movs	r1, r3
 80060c8:	000b      	movs	r3, r1
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	1a5b      	subs	r3, r3, r1
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	18d3      	adds	r3, r2, r3
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	1c58      	adds	r0, r3, #1
 80060d6:	4b21      	ldr	r3, [pc, #132]	; (800615c <mode_larson_scanner+0x388>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	4b21      	ldr	r3, [pc, #132]	; (8006160 <mode_larson_scanner+0x38c>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	0019      	movs	r1, r3
 80060e0:	000b      	movs	r3, r1
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	1a5b      	subs	r3, r3, r1
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	18d3      	adds	r3, r2, r3
 80060ea:	88db      	ldrh	r3, [r3, #6]
 80060ec:	001c      	movs	r4, r3
 80060ee:	4b1b      	ldr	r3, [pc, #108]	; (800615c <mode_larson_scanner+0x388>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b1b      	ldr	r3, [pc, #108]	; (8006160 <mode_larson_scanner+0x38c>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	0019      	movs	r1, r3
 80060f8:	000b      	movs	r3, r1
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	1a5b      	subs	r3, r3, r1
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	18d3      	adds	r3, r2, r3
 8006102:	889b      	ldrh	r3, [r3, #4]
 8006104:	1ae3      	subs	r3, r4, r3
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	001d      	movs	r5, r3
 800610a:	4b14      	ldr	r3, [pc, #80]	; (800615c <mode_larson_scanner+0x388>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <mode_larson_scanner+0x38c>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	0019      	movs	r1, r3
 8006114:	000b      	movs	r3, r1
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	1a5b      	subs	r3, r3, r1
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	18d4      	adds	r4, r2, r3
 800611e:	0029      	movs	r1, r5
 8006120:	f7fa f880 	bl	8000224 <__aeabi_uidivmod>
 8006124:	000b      	movs	r3, r1
 8006126:	6123      	str	r3, [r4, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8006128:	4b0c      	ldr	r3, [pc, #48]	; (800615c <mode_larson_scanner+0x388>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <mode_larson_scanner+0x38c>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	0019      	movs	r1, r3
 8006132:	000b      	movs	r3, r1
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	1a5b      	subs	r3, r3, r1
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	18d3      	adds	r3, r2, r3
 800613c:	8a98      	ldrh	r0, [r3, #20]
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <mode_larson_scanner+0x388>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b07      	ldr	r3, [pc, #28]	; (8006160 <mode_larson_scanner+0x38c>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	0019      	movs	r1, r3
 8006148:	000b      	movs	r3, r1
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	1a5b      	subs	r3, r3, r1
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	18d3      	adds	r3, r2, r3
 8006152:	0002      	movs	r2, r0
 8006154:	601a      	str	r2, [r3, #0]
}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	46bd      	mov	sp, r7
 800615a:	bdb0      	pop	{r4, r5, r7, pc}
 800615c:	2000057c 	.word	0x2000057c
 8006160:	20000754 	.word	0x20000754

08006164 <mode_comet>:


/*
 * Firing comets from one end.
 */
void mode_comet(void) {
 8006164:	b5b0      	push	{r4, r5, r7, lr}
 8006166:	af00      	add	r7, sp, #0
  fade_out();
 8006168:	f7fc f8bc 	bl	80022e4 <fade_out>

  if(IS_REVERSE) {
 800616c:	4b57      	ldr	r3, [pc, #348]	; (80062cc <mode_comet+0x168>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b57      	ldr	r3, [pc, #348]	; (80062d0 <mode_comet+0x16c>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	0019      	movs	r1, r3
 8006176:	000b      	movs	r3, r1
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	1a5b      	subs	r3, r3, r1
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	18d3      	adds	r3, r2, r3
 8006180:	7a9b      	ldrb	r3, [r3, #10]
 8006182:	2201      	movs	r2, #1
 8006184:	4013      	ands	r3, r2
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d028      	beq.n	80061de <mode_comet+0x7a>
	  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - Ws28b11_Segments[mActualSegment].CounterModeStep, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 800618c:	4b4f      	ldr	r3, [pc, #316]	; (80062cc <mode_comet+0x168>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b4f      	ldr	r3, [pc, #316]	; (80062d0 <mode_comet+0x16c>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	0019      	movs	r1, r3
 8006196:	000b      	movs	r3, r1
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	1a5b      	subs	r3, r3, r1
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	18d3      	adds	r3, r2, r3
 80061a0:	88da      	ldrh	r2, [r3, #6]
 80061a2:	4b4a      	ldr	r3, [pc, #296]	; (80062cc <mode_comet+0x168>)
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	4b4a      	ldr	r3, [pc, #296]	; (80062d0 <mode_comet+0x16c>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	0018      	movs	r0, r3
 80061ac:	0003      	movs	r3, r0
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	1a1b      	subs	r3, r3, r0
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	18cb      	adds	r3, r1, r3
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	b29b      	uxth	r3, r3
 80061be:	b218      	sxth	r0, r3
 80061c0:	4b42      	ldr	r3, [pc, #264]	; (80062cc <mode_comet+0x168>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b42      	ldr	r3, [pc, #264]	; (80062d0 <mode_comet+0x16c>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	0019      	movs	r1, r3
 80061ca:	000b      	movs	r3, r1
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	1a5b      	subs	r3, r3, r1
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	18d3      	adds	r3, r2, r3
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	0019      	movs	r1, r3
 80061d8:	f7fa fe1c 	bl	8000e14 <WS2811_SetDiodeColor>
 80061dc:	e027      	b.n	800622e <mode_comet+0xca>
  } else {
	  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + Ws28b11_Segments[mActualSegment].CounterModeStep, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 80061de:	4b3b      	ldr	r3, [pc, #236]	; (80062cc <mode_comet+0x168>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b3b      	ldr	r3, [pc, #236]	; (80062d0 <mode_comet+0x16c>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	0019      	movs	r1, r3
 80061e8:	000b      	movs	r3, r1
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	1a5b      	subs	r3, r3, r1
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	18d3      	adds	r3, r2, r3
 80061f2:	889a      	ldrh	r2, [r3, #4]
 80061f4:	4b35      	ldr	r3, [pc, #212]	; (80062cc <mode_comet+0x168>)
 80061f6:	6819      	ldr	r1, [r3, #0]
 80061f8:	4b35      	ldr	r3, [pc, #212]	; (80062d0 <mode_comet+0x16c>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	0018      	movs	r0, r3
 80061fe:	0003      	movs	r3, r0
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	1a1b      	subs	r3, r3, r0
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	18cb      	adds	r3, r1, r3
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	b29b      	uxth	r3, r3
 800620c:	18d3      	adds	r3, r2, r3
 800620e:	b29b      	uxth	r3, r3
 8006210:	b218      	sxth	r0, r3
 8006212:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <mode_comet+0x168>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	4b2e      	ldr	r3, [pc, #184]	; (80062d0 <mode_comet+0x16c>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	0019      	movs	r1, r3
 800621c:	000b      	movs	r3, r1
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	1a5b      	subs	r3, r3, r1
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	18d3      	adds	r3, r2, r3
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	0019      	movs	r1, r3
 800622a:	f7fa fdf3 	bl	8000e14 <WS2811_SetDiodeColor>
  }

  Ws28b11_Segments[mActualSegment].CounterModeStep = (Ws28b11_Segments[mActualSegment].CounterModeStep + 1) % SEGMENT_LENGTH;
 800622e:	4b27      	ldr	r3, [pc, #156]	; (80062cc <mode_comet+0x168>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b27      	ldr	r3, [pc, #156]	; (80062d0 <mode_comet+0x16c>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	0019      	movs	r1, r3
 8006238:	000b      	movs	r3, r1
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	1a5b      	subs	r3, r3, r1
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	18d3      	adds	r3, r2, r3
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	1c58      	adds	r0, r3, #1
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <mode_comet+0x168>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <mode_comet+0x16c>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	0019      	movs	r1, r3
 8006250:	000b      	movs	r3, r1
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	1a5b      	subs	r3, r3, r1
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	18d3      	adds	r3, r2, r3
 800625a:	88db      	ldrh	r3, [r3, #6]
 800625c:	001c      	movs	r4, r3
 800625e:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <mode_comet+0x168>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <mode_comet+0x16c>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	0019      	movs	r1, r3
 8006268:	000b      	movs	r3, r1
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	1a5b      	subs	r3, r3, r1
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	18d3      	adds	r3, r2, r3
 8006272:	889b      	ldrh	r3, [r3, #4]
 8006274:	1ae3      	subs	r3, r4, r3
 8006276:	3301      	adds	r3, #1
 8006278:	001d      	movs	r5, r3
 800627a:	4b14      	ldr	r3, [pc, #80]	; (80062cc <mode_comet+0x168>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <mode_comet+0x16c>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	0019      	movs	r1, r3
 8006284:	000b      	movs	r3, r1
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	1a5b      	subs	r3, r3, r1
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	18d4      	adds	r4, r2, r3
 800628e:	0029      	movs	r1, r5
 8006290:	f7f9 ffc8 	bl	8000224 <__aeabi_uidivmod>
 8006294:	000b      	movs	r3, r1
 8006296:	6123      	str	r3, [r4, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8006298:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <mode_comet+0x168>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <mode_comet+0x16c>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	0019      	movs	r1, r3
 80062a2:	000b      	movs	r3, r1
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	1a5b      	subs	r3, r3, r1
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	18d3      	adds	r3, r2, r3
 80062ac:	8a98      	ldrh	r0, [r3, #20]
 80062ae:	4b07      	ldr	r3, [pc, #28]	; (80062cc <mode_comet+0x168>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <mode_comet+0x16c>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	0019      	movs	r1, r3
 80062b8:	000b      	movs	r3, r1
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	1a5b      	subs	r3, r3, r1
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	18d3      	adds	r3, r2, r3
 80062c2:	0002      	movs	r2, r0
 80062c4:	601a      	str	r2, [r3, #0]
}
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bdb0      	pop	{r4, r5, r7, pc}
 80062cc:	2000057c 	.word	0x2000057c
 80062d0:	20000754 	.word	0x20000754

080062d4 <fireworks>:


/*
 * Fireworks function.
 */
void fireworks(uint32_t color) {
 80062d4:	b5b0      	push	{r4, r5, r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  fade_out();
 80062dc:	f7fc f802 	bl	80022e4 <fade_out>
    WS2811_SetDiodeColor(i, prevLed + thisLed + nextLed);
  }
*/

// the new way, manipulate the Adafruit_NeoPixels pixels[] array directly, about 5x faster
  uint8_t *pixels = WS2811_GetPixels();
 80062e0:	f7fa fe80 	bl	8000fe4 <WS2811_GetPixels>
 80062e4:	0003      	movs	r3, r0
 80062e6:	617b      	str	r3, [r7, #20]
  uint8_t pixelsPerLed = 3;
 80062e8:	2013      	movs	r0, #19
 80062ea:	183b      	adds	r3, r7, r0
 80062ec:	2203      	movs	r2, #3
 80062ee:	701a      	strb	r2, [r3, #0]
  uint16_t startPixel = Ws28b11_Segments[mActualSegment].IdStart * pixelsPerLed + pixelsPerLed;
 80062f0:	4bab      	ldr	r3, [pc, #684]	; (80065a0 <fireworks+0x2cc>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4bab      	ldr	r3, [pc, #684]	; (80065a4 <fireworks+0x2d0>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	0019      	movs	r1, r3
 80062fa:	000b      	movs	r3, r1
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	1a5b      	subs	r3, r3, r1
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	18d3      	adds	r3, r2, r3
 8006304:	889b      	ldrh	r3, [r3, #4]
 8006306:	3301      	adds	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	183b      	adds	r3, r7, r0
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b299      	uxth	r1, r3
 8006310:	2410      	movs	r4, #16
 8006312:	193b      	adds	r3, r7, r4
 8006314:	434a      	muls	r2, r1
 8006316:	801a      	strh	r2, [r3, #0]
  uint16_t stopPixel = Ws28b11_Segments[mActualSegment].IdStop * pixelsPerLed ;
 8006318:	4ba1      	ldr	r3, [pc, #644]	; (80065a0 <fireworks+0x2cc>)
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	4ba1      	ldr	r3, [pc, #644]	; (80065a4 <fireworks+0x2d0>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	0019      	movs	r1, r3
 8006322:	000b      	movs	r3, r1
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	1a5b      	subs	r3, r3, r1
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	18d3      	adds	r3, r2, r3
 800632c:	88da      	ldrh	r2, [r3, #6]
 800632e:	183b      	adds	r3, r7, r0
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	b299      	uxth	r1, r3
 8006334:	230e      	movs	r3, #14
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	434a      	muls	r2, r1
 800633a:	801a      	strh	r2, [r3, #0]
  for(uint16_t i=startPixel; i <stopPixel; i++)
 800633c:	231e      	movs	r3, #30
 800633e:	18fb      	adds	r3, r7, r3
 8006340:	193a      	adds	r2, r7, r4
 8006342:	8812      	ldrh	r2, [r2, #0]
 8006344:	801a      	strh	r2, [r3, #0]
 8006346:	e039      	b.n	80063bc <fireworks+0xe8>
  {
    uint16_t tmpPixel = (pixels[i - pixelsPerLed] >> 2) +
 8006348:	211e      	movs	r1, #30
 800634a:	187b      	adds	r3, r7, r1
 800634c:	881a      	ldrh	r2, [r3, #0]
 800634e:	2413      	movs	r4, #19
 8006350:	193b      	adds	r3, r7, r4
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	001a      	movs	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	189b      	adds	r3, r3, r2
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	089b      	lsrs	r3, r3, #2
 8006360:	b2db      	uxtb	r3, r3
 8006362:	b29a      	uxth	r2, r3
      pixels[i] +
 8006364:	0008      	movs	r0, r1
 8006366:	187b      	adds	r3, r7, r1
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	18cb      	adds	r3, r1, r3
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
    uint16_t tmpPixel = (pixels[i - pixelsPerLed] >> 2) +
 8006372:	18d3      	adds	r3, r2, r3
 8006374:	b299      	uxth	r1, r3
      (pixels[i + pixelsPerLed] >> 2);
 8006376:	183b      	adds	r3, r7, r0
 8006378:	881a      	ldrh	r2, [r3, #0]
 800637a:	193b      	adds	r3, r7, r4
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	18d3      	adds	r3, r2, r3
 8006380:	001a      	movs	r2, r3
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	189b      	adds	r3, r3, r2
 8006386:	781b      	ldrb	r3, [r3, #0]
      pixels[i] +
 8006388:	089b      	lsrs	r3, r3, #2
 800638a:	b2db      	uxtb	r3, r3
 800638c:	b29a      	uxth	r2, r3
    uint16_t tmpPixel = (pixels[i - pixelsPerLed] >> 2) +
 800638e:	200c      	movs	r0, #12
 8006390:	183b      	adds	r3, r7, r0
 8006392:	188a      	adds	r2, r1, r2
 8006394:	801a      	strh	r2, [r3, #0]
    pixels[i] =  tmpPixel > 255 ? 255 : tmpPixel;
 8006396:	183b      	adds	r3, r7, r0
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29a      	uxth	r2, r3
 800639c:	2aff      	cmp	r2, #255	; 0xff
 800639e:	d900      	bls.n	80063a2 <fireworks+0xce>
 80063a0:	23ff      	movs	r3, #255	; 0xff
 80063a2:	b299      	uxth	r1, r3
 80063a4:	201e      	movs	r0, #30
 80063a6:	183b      	adds	r3, r7, r0
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	18d3      	adds	r3, r2, r3
 80063ae:	b2ca      	uxtb	r2, r1
 80063b0:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=startPixel; i <stopPixel; i++)
 80063b2:	183b      	adds	r3, r7, r0
 80063b4:	881a      	ldrh	r2, [r3, #0]
 80063b6:	183b      	adds	r3, r7, r0
 80063b8:	3201      	adds	r2, #1
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	231e      	movs	r3, #30
 80063be:	18fa      	adds	r2, r7, r3
 80063c0:	230e      	movs	r3, #14
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	8812      	ldrh	r2, [r2, #0]
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d3bd      	bcc.n	8006348 <fireworks+0x74>
  }

  if(!mTriggered)
 80063cc:	4b76      	ldr	r3, [pc, #472]	; (80065a8 <fireworks+0x2d4>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d14c      	bne.n	800646e <fireworks+0x19a>
  {
    for(uint16_t i=0; i<MAX(1, WS2811_LEDS/20); i++)
 80063d4:	231c      	movs	r3, #28
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	2200      	movs	r2, #0
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	e041      	b.n	8006462 <fireworks+0x18e>
    {
      if(rand()%10 == 0)
 80063de:	f003 fd19 	bl	8009e14 <rand>
 80063e2:	0003      	movs	r3, r0
 80063e4:	210a      	movs	r1, #10
 80063e6:	0018      	movs	r0, r3
 80063e8:	f7fa f806 	bl	80003f8 <__aeabi_idivmod>
 80063ec:	1e0b      	subs	r3, r1, #0
 80063ee:	d132      	bne.n	8006456 <fireworks+0x182>
      {
        WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + rand() % SEGMENT_LENGTH, color);
 80063f0:	4b6b      	ldr	r3, [pc, #428]	; (80065a0 <fireworks+0x2cc>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b6b      	ldr	r3, [pc, #428]	; (80065a4 <fireworks+0x2d0>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	0019      	movs	r1, r3
 80063fa:	000b      	movs	r3, r1
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	1a5b      	subs	r3, r3, r1
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	18d3      	adds	r3, r2, r3
 8006404:	889c      	ldrh	r4, [r3, #4]
 8006406:	f003 fd05 	bl	8009e14 <rand>
 800640a:	4b65      	ldr	r3, [pc, #404]	; (80065a0 <fireworks+0x2cc>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4b65      	ldr	r3, [pc, #404]	; (80065a4 <fireworks+0x2d0>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	0019      	movs	r1, r3
 8006414:	000b      	movs	r3, r1
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	1a5b      	subs	r3, r3, r1
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	18d3      	adds	r3, r2, r3
 800641e:	88db      	ldrh	r3, [r3, #6]
 8006420:	001d      	movs	r5, r3
 8006422:	4b5f      	ldr	r3, [pc, #380]	; (80065a0 <fireworks+0x2cc>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b5f      	ldr	r3, [pc, #380]	; (80065a4 <fireworks+0x2d0>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	0019      	movs	r1, r3
 800642c:	000b      	movs	r3, r1
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	1a5b      	subs	r3, r3, r1
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	18d3      	adds	r3, r2, r3
 8006436:	889b      	ldrh	r3, [r3, #4]
 8006438:	1aeb      	subs	r3, r5, r3
 800643a:	3301      	adds	r3, #1
 800643c:	0019      	movs	r1, r3
 800643e:	f7f9 ffdb 	bl	80003f8 <__aeabi_idivmod>
 8006442:	000b      	movs	r3, r1
 8006444:	b29b      	uxth	r3, r3
 8006446:	18e3      	adds	r3, r4, r3
 8006448:	b29b      	uxth	r3, r3
 800644a:	b21b      	sxth	r3, r3
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	0011      	movs	r1, r2
 8006450:	0018      	movs	r0, r3
 8006452:	f7fa fcdf 	bl	8000e14 <WS2811_SetDiodeColor>
    for(uint16_t i=0; i<MAX(1, WS2811_LEDS/20); i++)
 8006456:	211c      	movs	r1, #28
 8006458:	187b      	adds	r3, r7, r1
 800645a:	881a      	ldrh	r2, [r3, #0]
 800645c:	187b      	adds	r3, r7, r1
 800645e:	3201      	adds	r2, #1
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	231c      	movs	r3, #28
 8006464:	18fb      	adds	r3, r7, r3
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0b8      	beq.n	80063de <fireworks+0x10a>
 800646c:	e07d      	b.n	800656a <fireworks+0x296>
      }
    }
  }
  else
  {
    for(uint16_t i=0; i<MAX(1, SEGMENT_LENGTH/10); i++)
 800646e:	231a      	movs	r3, #26
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	2200      	movs	r2, #0
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e038      	b.n	80064ea <fireworks+0x216>
    {
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + rand() % SEGMENT_LENGTH, color);
 8006478:	4b49      	ldr	r3, [pc, #292]	; (80065a0 <fireworks+0x2cc>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <fireworks+0x2d0>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	0019      	movs	r1, r3
 8006482:	000b      	movs	r3, r1
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	1a5b      	subs	r3, r3, r1
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	18d3      	adds	r3, r2, r3
 800648c:	889c      	ldrh	r4, [r3, #4]
 800648e:	f003 fcc1 	bl	8009e14 <rand>
 8006492:	4b43      	ldr	r3, [pc, #268]	; (80065a0 <fireworks+0x2cc>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b43      	ldr	r3, [pc, #268]	; (80065a4 <fireworks+0x2d0>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	0019      	movs	r1, r3
 800649c:	000b      	movs	r3, r1
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	1a5b      	subs	r3, r3, r1
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	18d3      	adds	r3, r2, r3
 80064a6:	88db      	ldrh	r3, [r3, #6]
 80064a8:	001d      	movs	r5, r3
 80064aa:	4b3d      	ldr	r3, [pc, #244]	; (80065a0 <fireworks+0x2cc>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4b3d      	ldr	r3, [pc, #244]	; (80065a4 <fireworks+0x2d0>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	0019      	movs	r1, r3
 80064b4:	000b      	movs	r3, r1
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	1a5b      	subs	r3, r3, r1
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	18d3      	adds	r3, r2, r3
 80064be:	889b      	ldrh	r3, [r3, #4]
 80064c0:	1aeb      	subs	r3, r5, r3
 80064c2:	3301      	adds	r3, #1
 80064c4:	0019      	movs	r1, r3
 80064c6:	f7f9 ff97 	bl	80003f8 <__aeabi_idivmod>
 80064ca:	000b      	movs	r3, r1
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	18e3      	adds	r3, r4, r3
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	b21b      	sxth	r3, r3
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	0011      	movs	r1, r2
 80064d8:	0018      	movs	r0, r3
 80064da:	f7fa fc9b 	bl	8000e14 <WS2811_SetDiodeColor>
    for(uint16_t i=0; i<MAX(1, SEGMENT_LENGTH/10); i++)
 80064de:	211a      	movs	r1, #26
 80064e0:	187b      	adds	r3, r7, r1
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	187b      	adds	r3, r7, r1
 80064e6:	3201      	adds	r2, #1
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	231a      	movs	r3, #26
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	881c      	ldrh	r4, [r3, #0]
 80064f0:	4b2b      	ldr	r3, [pc, #172]	; (80065a0 <fireworks+0x2cc>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b2b      	ldr	r3, [pc, #172]	; (80065a4 <fireworks+0x2d0>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	0019      	movs	r1, r3
 80064fa:	000b      	movs	r3, r1
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	1a5b      	subs	r3, r3, r1
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	18d3      	adds	r3, r2, r3
 8006504:	88db      	ldrh	r3, [r3, #6]
 8006506:	0018      	movs	r0, r3
 8006508:	4b25      	ldr	r3, [pc, #148]	; (80065a0 <fireworks+0x2cc>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b25      	ldr	r3, [pc, #148]	; (80065a4 <fireworks+0x2d0>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	0019      	movs	r1, r3
 8006512:	000b      	movs	r3, r1
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	1a5b      	subs	r3, r3, r1
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	18d3      	adds	r3, r2, r3
 800651c:	889b      	ldrh	r3, [r3, #4]
 800651e:	1ac3      	subs	r3, r0, r3
 8006520:	2b12      	cmp	r3, #18
 8006522:	dd1e      	ble.n	8006562 <fireworks+0x28e>
 8006524:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <fireworks+0x2cc>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <fireworks+0x2d0>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	0019      	movs	r1, r3
 800652e:	000b      	movs	r3, r1
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	1a5b      	subs	r3, r3, r1
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	18d3      	adds	r3, r2, r3
 8006538:	88db      	ldrh	r3, [r3, #6]
 800653a:	0018      	movs	r0, r3
 800653c:	4b18      	ldr	r3, [pc, #96]	; (80065a0 <fireworks+0x2cc>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <fireworks+0x2d0>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	0019      	movs	r1, r3
 8006546:	000b      	movs	r3, r1
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	1a5b      	subs	r3, r3, r1
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	18d3      	adds	r3, r2, r3
 8006550:	889b      	ldrh	r3, [r3, #4]
 8006552:	1ac3      	subs	r3, r0, r3
 8006554:	3301      	adds	r3, #1
 8006556:	210a      	movs	r1, #10
 8006558:	0018      	movs	r0, r3
 800655a:	f7f9 fe67 	bl	800022c <__divsi3>
 800655e:	0003      	movs	r3, r0
 8006560:	e000      	b.n	8006564 <fireworks+0x290>
 8006562:	2301      	movs	r3, #1
 8006564:	42a3      	cmp	r3, r4
 8006566:	dd00      	ble.n	800656a <fireworks+0x296>
 8006568:	e786      	b.n	8006478 <fireworks+0x1a4>
    }
  }
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 800656a:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <fireworks+0x2cc>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <fireworks+0x2d0>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	0019      	movs	r1, r3
 8006574:	000b      	movs	r3, r1
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	1a5b      	subs	r3, r3, r1
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	18d3      	adds	r3, r2, r3
 800657e:	8a98      	ldrh	r0, [r3, #20]
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <fireworks+0x2cc>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4b07      	ldr	r3, [pc, #28]	; (80065a4 <fireworks+0x2d0>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	0019      	movs	r1, r3
 800658a:	000b      	movs	r3, r1
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	1a5b      	subs	r3, r3, r1
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	18d3      	adds	r3, r2, r3
 8006594:	0002      	movs	r2, r0
 8006596:	601a      	str	r2, [r3, #0]
}
 8006598:	46c0      	nop			; (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	b008      	add	sp, #32
 800659e:	bdb0      	pop	{r4, r5, r7, pc}
 80065a0:	2000057c 	.word	0x2000057c
 80065a4:	20000754 	.word	0x20000754
 80065a8:	20000761 	.word	0x20000761

080065ac <mode_fireworks>:

/*
 * Firework sparks.
 */
void mode_fireworks(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  return fireworks(Ws28b11_Segments[mActualSegment].ModeColor[0]);
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <mode_fireworks+0x24>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <mode_fireworks+0x28>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	0019      	movs	r1, r3
 80065ba:	000b      	movs	r3, r1
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	1a5b      	subs	r3, r3, r1
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	18d3      	adds	r3, r2, r3
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7ff fe84 	bl	80062d4 <fireworks>
}
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	2000057c 	.word	0x2000057c
 80065d4:	20000754 	.word	0x20000754

080065d8 <mode_fireworks_random>:

/*
 * Random colored firework sparks.
 */
void mode_fireworks_random(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
  return fireworks(color_wheel(rand()%256));
 80065dc:	f003 fc1a 	bl	8009e14 <rand>
 80065e0:	0003      	movs	r3, r0
 80065e2:	4a08      	ldr	r2, [pc, #32]	; (8006604 <mode_fireworks_random+0x2c>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	d503      	bpl.n	80065f0 <mode_fireworks_random+0x18>
 80065e8:	3b01      	subs	r3, #1
 80065ea:	4a07      	ldr	r2, [pc, #28]	; (8006608 <mode_fireworks_random+0x30>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	3301      	adds	r3, #1
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	0018      	movs	r0, r3
 80065f4:	f7fb fdd8 	bl	80021a8 <color_wheel>
 80065f8:	0003      	movs	r3, r0
 80065fa:	0018      	movs	r0, r3
 80065fc:	f7ff fe6a 	bl	80062d4 <fireworks>
}
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	800000ff 	.word	0x800000ff
 8006608:	ffffff00 	.word	0xffffff00

0800660c <fire_flicker>:

/*
 * Fire flicker function
 */
void fire_flicker(int rev_intensity)
{
 800660c:	b590      	push	{r4, r7, lr}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint8_t r = (Ws28b11_Segments[mActualSegment].ModeColor[0] >> 16) & 0xFF;
 8006614:	4b59      	ldr	r3, [pc, #356]	; (800677c <fire_flicker+0x170>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4b59      	ldr	r3, [pc, #356]	; (8006780 <fire_flicker+0x174>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	0019      	movs	r1, r3
 800661e:	000b      	movs	r3, r1
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	1a5b      	subs	r3, r3, r1
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	18d3      	adds	r3, r2, r3
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	0c1a      	lsrs	r2, r3, #16
 800662c:	2315      	movs	r3, #21
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	701a      	strb	r2, [r3, #0]
  uint8_t g = (Ws28b11_Segments[mActualSegment].ModeColor[0] >>  8) & 0xFF;
 8006632:	4b52      	ldr	r3, [pc, #328]	; (800677c <fire_flicker+0x170>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b52      	ldr	r3, [pc, #328]	; (8006780 <fire_flicker+0x174>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	0019      	movs	r1, r3
 800663c:	000b      	movs	r3, r1
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	1a5b      	subs	r3, r3, r1
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	18d3      	adds	r3, r2, r3
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	0a1a      	lsrs	r2, r3, #8
 800664a:	2014      	movs	r0, #20
 800664c:	183b      	adds	r3, r7, r0
 800664e:	701a      	strb	r2, [r3, #0]
  uint8_t b = (Ws28b11_Segments[mActualSegment].ModeColor[0]        & 0xFF);
 8006650:	4b4a      	ldr	r3, [pc, #296]	; (800677c <fire_flicker+0x170>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4b4a      	ldr	r3, [pc, #296]	; (8006780 <fire_flicker+0x174>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	0019      	movs	r1, r3
 800665a:	000b      	movs	r3, r1
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	1a5b      	subs	r3, r3, r1
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	18d3      	adds	r3, r2, r3
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	2113      	movs	r1, #19
 8006668:	187b      	adds	r3, r7, r1
 800666a:	701a      	strb	r2, [r3, #0]
  uint8_t lum = MAX(r, MAX(g, b)) / rev_intensity;
 800666c:	183b      	adds	r3, r7, r0
 800666e:	187a      	adds	r2, r7, r1
 8006670:	7810      	ldrb	r0, [r2, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	b2d9      	uxtb	r1, r3
 8006676:	b2c2      	uxtb	r2, r0
 8006678:	4291      	cmp	r1, r2
 800667a:	d200      	bcs.n	800667e <fire_flicker+0x72>
 800667c:	1c03      	adds	r3, r0, #0
 800667e:	b2da      	uxtb	r2, r3
 8006680:	2315      	movs	r3, #21
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	1c10      	adds	r0, r2, #0
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b2d9      	uxtb	r1, r3
 800668a:	b2c2      	uxtb	r2, r0
 800668c:	4291      	cmp	r1, r2
 800668e:	d200      	bcs.n	8006692 <fire_flicker+0x86>
 8006690:	1c03      	adds	r3, r0, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	0018      	movs	r0, r3
 8006698:	f7f9 fdc8 	bl	800022c <__divsi3>
 800669c:	0003      	movs	r3, r0
 800669e:	001a      	movs	r2, r3
 80066a0:	2312      	movs	r3, #18
 80066a2:	18fb      	adds	r3, r7, r3
 80066a4:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 80066a6:	4b35      	ldr	r3, [pc, #212]	; (800677c <fire_flicker+0x170>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b35      	ldr	r3, [pc, #212]	; (8006780 <fire_flicker+0x174>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	0019      	movs	r1, r3
 80066b0:	000b      	movs	r3, r1
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	1a5b      	subs	r3, r3, r1
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	18d2      	adds	r2, r2, r3
 80066ba:	2316      	movs	r3, #22
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	8892      	ldrh	r2, [r2, #4]
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	e030      	b.n	8006726 <fire_flicker+0x11a>
  {
    int flicker = rand()%lum;
 80066c4:	f003 fba6 	bl	8009e14 <rand>
 80066c8:	0002      	movs	r2, r0
 80066ca:	2312      	movs	r3, #18
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	0019      	movs	r1, r3
 80066d2:	0010      	movs	r0, r2
 80066d4:	f7f9 fe90 	bl	80003f8 <__aeabi_idivmod>
 80066d8:	000b      	movs	r3, r1
 80066da:	60fb      	str	r3, [r7, #12]
    WS2811_SetDiodeRGB(i, MAX(r - flicker, 0), MAX(g - flicker, 0), MAX(b - flicker, 0));
 80066dc:	2316      	movs	r3, #22
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	2000      	movs	r0, #0
 80066e2:	5e18      	ldrsh	r0, [r3, r0]
 80066e4:	2315      	movs	r3, #21
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	d500      	bpl.n	80066f2 <fire_flicker+0xe6>
 80066f0:	2300      	movs	r3, #0
 80066f2:	b2d9      	uxtb	r1, r3
 80066f4:	2314      	movs	r3, #20
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	d500      	bpl.n	8006702 <fire_flicker+0xf6>
 8006700:	2300      	movs	r3, #0
 8006702:	b2dc      	uxtb	r4, r3
 8006704:	2313      	movs	r3, #19
 8006706:	18fb      	adds	r3, r7, r3
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	d500      	bpl.n	8006712 <fire_flicker+0x106>
 8006710:	2300      	movs	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	0022      	movs	r2, r4
 8006716:	f7fa fbe5 	bl	8000ee4 <WS2811_SetDiodeRGB>
  for(uint16_t i=Ws28b11_Segments[mActualSegment].IdStart; i <= Ws28b11_Segments[mActualSegment].IdStop; i++)
 800671a:	2116      	movs	r1, #22
 800671c:	187b      	adds	r3, r7, r1
 800671e:	881a      	ldrh	r2, [r3, #0]
 8006720:	187b      	adds	r3, r7, r1
 8006722:	3201      	adds	r2, #1
 8006724:	801a      	strh	r2, [r3, #0]
 8006726:	4b15      	ldr	r3, [pc, #84]	; (800677c <fire_flicker+0x170>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <fire_flicker+0x174>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	0019      	movs	r1, r3
 8006730:	000b      	movs	r3, r1
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	1a5b      	subs	r3, r3, r1
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	18d3      	adds	r3, r2, r3
 800673a:	88db      	ldrh	r3, [r3, #6]
 800673c:	2216      	movs	r2, #22
 800673e:	18ba      	adds	r2, r7, r2
 8006740:	8812      	ldrh	r2, [r2, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d9be      	bls.n	80066c4 <fire_flicker+0xb8>
  }
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <fire_flicker+0x170>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <fire_flicker+0x174>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	0019      	movs	r1, r3
 8006750:	000b      	movs	r3, r1
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	1a5b      	subs	r3, r3, r1
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	18d3      	adds	r3, r2, r3
 800675a:	8a98      	ldrh	r0, [r3, #20]
 800675c:	4b07      	ldr	r3, [pc, #28]	; (800677c <fire_flicker+0x170>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <fire_flicker+0x174>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	0019      	movs	r1, r3
 8006766:	000b      	movs	r3, r1
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	1a5b      	subs	r3, r3, r1
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	18d3      	adds	r3, r2, r3
 8006770:	0002      	movs	r2, r0
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	46c0      	nop			; (mov r8, r8)
 8006776:	46bd      	mov	sp, r7
 8006778:	b007      	add	sp, #28
 800677a:	bd90      	pop	{r4, r7, pc}
 800677c:	2000057c 	.word	0x2000057c
 8006780:	20000754 	.word	0x20000754

08006784 <mode_fire_flicker>:

/*
 * Random flickering.
 */
void mode_fire_flicker(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  return fire_flicker(3);
 8006788:	2003      	movs	r0, #3
 800678a:	f7ff ff3f 	bl	800660c <fire_flicker>
}
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <mode_fire_flicker_soft>:

/*
* Random flickering, less intensity.
*/
void mode_fire_flicker_soft(void)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	af00      	add	r7, sp, #0
  return fire_flicker(6);
 8006796:	2006      	movs	r0, #6
 8006798:	f7ff ff38 	bl	800660c <fire_flicker>
}
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <mode_fire_flicker_intense>:

/*
* Random flickering, more intensity.
*/
void mode_fire_flicker_intense(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  return fire_flicker(1.7);
 80067a4:	2001      	movs	r0, #1
 80067a6:	f7ff ff31 	bl	800660c <fire_flicker>
}
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <tricolor_chase>:

/*
 * Tricolor chase function
 */
void tricolor_chase(uint32_t color1, uint32_t color2, uint32_t color3)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  uint16_t index = Ws28b11_Segments[mActualSegment].CounterModeStep % 6;
 80067bc:	4b60      	ldr	r3, [pc, #384]	; (8006940 <tricolor_chase+0x190>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4b60      	ldr	r3, [pc, #384]	; (8006944 <tricolor_chase+0x194>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	0019      	movs	r1, r3
 80067c6:	000b      	movs	r3, r1
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	1a5b      	subs	r3, r3, r1
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	18d3      	adds	r3, r2, r3
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2106      	movs	r1, #6
 80067d4:	0018      	movs	r0, r3
 80067d6:	f7f9 fd25 	bl	8000224 <__aeabi_uidivmod>
 80067da:	000b      	movs	r3, r1
 80067dc:	001a      	movs	r2, r3
 80067de:	2316      	movs	r3, #22
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	801a      	strh	r2, [r3, #0]
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++, index++)
 80067e4:	2314      	movs	r3, #20
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	2200      	movs	r2, #0
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e061      	b.n	80068b2 <tricolor_chase+0x102>
  {
    if(index > 5) index = 0;
 80067ee:	2216      	movs	r2, #22
 80067f0:	18bb      	adds	r3, r7, r2
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	2b05      	cmp	r3, #5
 80067f6:	d902      	bls.n	80067fe <tricolor_chase+0x4e>
 80067f8:	18bb      	adds	r3, r7, r2
 80067fa:	2200      	movs	r2, #0
 80067fc:	801a      	strh	r2, [r3, #0]

    uint32_t color = color3;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	613b      	str	r3, [r7, #16]
    if(index < 2) color = color1;
 8006802:	2316      	movs	r3, #22
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d802      	bhi.n	8006812 <tricolor_chase+0x62>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	e006      	b.n	8006820 <tricolor_chase+0x70>
    else if(index < 4) color = color2;
 8006812:	2316      	movs	r3, #22
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d801      	bhi.n	8006820 <tricolor_chase+0x70>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	613b      	str	r3, [r7, #16]

    if(IS_REVERSE) {
 8006820:	4b47      	ldr	r3, [pc, #284]	; (8006940 <tricolor_chase+0x190>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b47      	ldr	r3, [pc, #284]	; (8006944 <tricolor_chase+0x194>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	0019      	movs	r1, r3
 800682a:	000b      	movs	r3, r1
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	1a5b      	subs	r3, r3, r1
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	18d3      	adds	r3, r2, r3
 8006834:	7a9b      	ldrb	r3, [r3, #10]
 8006836:	2201      	movs	r2, #1
 8006838:	4013      	ands	r3, r2
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d016      	beq.n	800686e <tricolor_chase+0xbe>
    	WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + i, color);
 8006840:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <tricolor_chase+0x190>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	4b3f      	ldr	r3, [pc, #252]	; (8006944 <tricolor_chase+0x194>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	0019      	movs	r1, r3
 800684a:	000b      	movs	r3, r1
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	1a5b      	subs	r3, r3, r1
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	18d3      	adds	r3, r2, r3
 8006854:	889a      	ldrh	r2, [r3, #4]
 8006856:	2314      	movs	r3, #20
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	18d3      	adds	r3, r2, r3
 800685e:	b29b      	uxth	r3, r3
 8006860:	b21b      	sxth	r3, r3
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	0011      	movs	r1, r2
 8006866:	0018      	movs	r0, r3
 8006868:	f7fa fad4 	bl	8000e14 <WS2811_SetDiodeColor>
 800686c:	e015      	b.n	800689a <tricolor_chase+0xea>
    } else {
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStop - i, color);
 800686e:	4b34      	ldr	r3, [pc, #208]	; (8006940 <tricolor_chase+0x190>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b34      	ldr	r3, [pc, #208]	; (8006944 <tricolor_chase+0x194>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	0019      	movs	r1, r3
 8006878:	000b      	movs	r3, r1
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	1a5b      	subs	r3, r3, r1
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	18d3      	adds	r3, r2, r3
 8006882:	88da      	ldrh	r2, [r3, #6]
 8006884:	2314      	movs	r3, #20
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	b29b      	uxth	r3, r3
 800688e:	b21b      	sxth	r3, r3
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	0011      	movs	r1, r2
 8006894:	0018      	movs	r0, r3
 8006896:	f7fa fabd 	bl	8000e14 <WS2811_SetDiodeColor>
  for(uint16_t i=0; i < SEGMENT_LENGTH; i++, index++)
 800689a:	2114      	movs	r1, #20
 800689c:	187b      	adds	r3, r7, r1
 800689e:	881a      	ldrh	r2, [r3, #0]
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	3201      	adds	r2, #1
 80068a4:	801a      	strh	r2, [r3, #0]
 80068a6:	2116      	movs	r1, #22
 80068a8:	187b      	adds	r3, r7, r1
 80068aa:	881a      	ldrh	r2, [r3, #0]
 80068ac:	187b      	adds	r3, r7, r1
 80068ae:	3201      	adds	r2, #1
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	4b23      	ldr	r3, [pc, #140]	; (8006940 <tricolor_chase+0x190>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4b23      	ldr	r3, [pc, #140]	; (8006944 <tricolor_chase+0x194>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	0019      	movs	r1, r3
 80068bc:	000b      	movs	r3, r1
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	1a5b      	subs	r3, r3, r1
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	18d3      	adds	r3, r2, r3
 80068c6:	88db      	ldrh	r3, [r3, #6]
 80068c8:	0018      	movs	r0, r3
 80068ca:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <tricolor_chase+0x190>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b1d      	ldr	r3, [pc, #116]	; (8006944 <tricolor_chase+0x194>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	0019      	movs	r1, r3
 80068d4:	000b      	movs	r3, r1
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	1a5b      	subs	r3, r3, r1
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	18d3      	adds	r3, r2, r3
 80068de:	889b      	ldrh	r3, [r3, #4]
 80068e0:	1ac2      	subs	r2, r0, r3
 80068e2:	2314      	movs	r3, #20
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	db00      	blt.n	80068ee <tricolor_chase+0x13e>
 80068ec:	e77f      	b.n	80067ee <tricolor_chase+0x3e>
    }
  }

  Ws28b11_Segments[mActualSegment].CounterModeStep++;
 80068ee:	4b14      	ldr	r3, [pc, #80]	; (8006940 <tricolor_chase+0x190>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4b14      	ldr	r3, [pc, #80]	; (8006944 <tricolor_chase+0x194>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	0019      	movs	r1, r3
 80068f8:	000b      	movs	r3, r1
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	1a5b      	subs	r3, r3, r1
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	18d3      	adds	r3, r2, r3
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	3201      	adds	r2, #1
 8006906:	611a      	str	r2, [r3, #16]
  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8006908:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <tricolor_chase+0x190>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <tricolor_chase+0x194>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	0019      	movs	r1, r3
 8006912:	000b      	movs	r3, r1
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	1a5b      	subs	r3, r3, r1
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	18d3      	adds	r3, r2, r3
 800691c:	8a98      	ldrh	r0, [r3, #20]
 800691e:	4b08      	ldr	r3, [pc, #32]	; (8006940 <tricolor_chase+0x190>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b08      	ldr	r3, [pc, #32]	; (8006944 <tricolor_chase+0x194>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	0019      	movs	r1, r3
 8006928:	000b      	movs	r3, r1
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	1a5b      	subs	r3, r3, r1
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	18d3      	adds	r3, r2, r3
 8006932:	0002      	movs	r2, r0
 8006934:	601a      	str	r2, [r3, #0]
}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	46bd      	mov	sp, r7
 800693a:	b006      	add	sp, #24
 800693c:	bd80      	pop	{r7, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	2000057c 	.word	0x2000057c
 8006944:	20000754 	.word	0x20000754

08006948 <mode_tricolor_chase>:

/*
 * Tricolor chase mode
 */
void mode_tricolor_chase(void)
{
 8006948:	b5b0      	push	{r4, r5, r7, lr}
 800694a:	af00      	add	r7, sp, #0
  return tricolor_chase(Ws28b11_Segments[mActualSegment].ModeColor[0], Ws28b11_Segments[mActualSegment].ModeColor[1], Ws28b11_Segments[mActualSegment].ModeColor[2]);
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <mode_tricolor_chase+0x50>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	4b12      	ldr	r3, [pc, #72]	; (800699c <mode_tricolor_chase+0x54>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	0019      	movs	r1, r3
 8006956:	000b      	movs	r3, r1
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	1a5b      	subs	r3, r3, r1
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	18d3      	adds	r3, r2, r3
 8006960:	6998      	ldr	r0, [r3, #24]
 8006962:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <mode_tricolor_chase+0x50>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b0d      	ldr	r3, [pc, #52]	; (800699c <mode_tricolor_chase+0x54>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	0019      	movs	r1, r3
 800696c:	000b      	movs	r3, r1
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	1a5b      	subs	r3, r3, r1
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	18d3      	adds	r3, r2, r3
 8006976:	69d9      	ldr	r1, [r3, #28]
 8006978:	4b07      	ldr	r3, [pc, #28]	; (8006998 <mode_tricolor_chase+0x50>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b07      	ldr	r3, [pc, #28]	; (800699c <mode_tricolor_chase+0x54>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	001c      	movs	r4, r3
 8006982:	0023      	movs	r3, r4
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	1b1b      	subs	r3, r3, r4
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	18d3      	adds	r3, r2, r3
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	001a      	movs	r2, r3
 8006990:	f7ff ff0e 	bl	80067b0 <tricolor_chase>
}
 8006994:	46bd      	mov	sp, r7
 8006996:	bdb0      	pop	{r4, r5, r7, pc}
 8006998:	2000057c 	.word	0x2000057c
 800699c:	20000754 	.word	0x20000754

080069a0 <mode_circus_combustus>:

/*
 * Alternating white/red/black pixels running.
 */
void mode_circus_combustus(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  return tricolor_chase(RED, WHITE, BLACK);
 80069a4:	4904      	ldr	r1, [pc, #16]	; (80069b8 <mode_circus_combustus+0x18>)
 80069a6:	23ff      	movs	r3, #255	; 0xff
 80069a8:	041b      	lsls	r3, r3, #16
 80069aa:	2200      	movs	r2, #0
 80069ac:	0018      	movs	r0, r3
 80069ae:	f7ff feff 	bl	80067b0 <tricolor_chase>
}
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	00ffffff 	.word	0x00ffffff

080069bc <mode_icu>:

/*
 * ICU mode
 */
void mode_icu(void)
{
 80069bc:	b590      	push	{r4, r7, lr}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
  uint16_t dest = Ws28b11_Segments[mActualSegment].CounterModeStep & 0xFFFF;
 80069c2:	4bba      	ldr	r3, [pc, #744]	; (8006cac <mode_icu+0x2f0>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4bba      	ldr	r3, [pc, #744]	; (8006cb0 <mode_icu+0x2f4>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	0019      	movs	r1, r3
 80069cc:	000b      	movs	r3, r1
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	1a5b      	subs	r3, r3, r1
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	18d3      	adds	r3, r2, r3
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	1dbb      	adds	r3, r7, #6
 80069da:	801a      	strh	r2, [r3, #0]

  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + dest, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 80069dc:	4bb3      	ldr	r3, [pc, #716]	; (8006cac <mode_icu+0x2f0>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4bb3      	ldr	r3, [pc, #716]	; (8006cb0 <mode_icu+0x2f4>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	0019      	movs	r1, r3
 80069e6:	000b      	movs	r3, r1
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	1a5b      	subs	r3, r3, r1
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	18d3      	adds	r3, r2, r3
 80069f0:	889a      	ldrh	r2, [r3, #4]
 80069f2:	1dbb      	adds	r3, r7, #6
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	18d3      	adds	r3, r2, r3
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	b218      	sxth	r0, r3
 80069fc:	4bab      	ldr	r3, [pc, #684]	; (8006cac <mode_icu+0x2f0>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4bab      	ldr	r3, [pc, #684]	; (8006cb0 <mode_icu+0x2f4>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	0019      	movs	r1, r3
 8006a06:	000b      	movs	r3, r1
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	1a5b      	subs	r3, r3, r1
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	18d3      	adds	r3, r2, r3
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	0019      	movs	r1, r3
 8006a14:	f7fa f9fe 	bl	8000e14 <WS2811_SetDiodeColor>
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + dest + WS2811_LEDS/2, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8006a18:	4ba4      	ldr	r3, [pc, #656]	; (8006cac <mode_icu+0x2f0>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	4ba4      	ldr	r3, [pc, #656]	; (8006cb0 <mode_icu+0x2f4>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	0019      	movs	r1, r3
 8006a22:	000b      	movs	r3, r1
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	1a5b      	subs	r3, r3, r1
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	18d3      	adds	r3, r2, r3
 8006a2c:	889a      	ldrh	r2, [r3, #4]
 8006a2e:	1dbb      	adds	r3, r7, #6
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	18d3      	adds	r3, r2, r3
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	3310      	adds	r3, #16
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	b218      	sxth	r0, r3
 8006a3c:	4b9b      	ldr	r3, [pc, #620]	; (8006cac <mode_icu+0x2f0>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b9b      	ldr	r3, [pc, #620]	; (8006cb0 <mode_icu+0x2f4>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	0019      	movs	r1, r3
 8006a46:	000b      	movs	r3, r1
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	1a5b      	subs	r3, r3, r1
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	18d3      	adds	r3, r2, r3
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	0019      	movs	r1, r3
 8006a54:	f7fa f9de 	bl	8000e14 <WS2811_SetDiodeColor>

  if(Ws28b11_Segments[mActualSegment].AuxParam16b == dest)
 8006a58:	4b94      	ldr	r3, [pc, #592]	; (8006cac <mode_icu+0x2f0>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	4b94      	ldr	r3, [pc, #592]	; (8006cb0 <mode_icu+0x2f4>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	0019      	movs	r1, r3
 8006a62:	000b      	movs	r3, r1
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	1a5b      	subs	r3, r3, r1
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	18d3      	adds	r3, r2, r3
 8006a6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a6e:	1dba      	adds	r2, r7, #6
 8006a70:	8812      	ldrh	r2, [r2, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d000      	beq.n	8006a78 <mode_icu+0xbc>
 8006a76:	e0a4      	b.n	8006bc2 <mode_icu+0x206>
  { // pause between eye movements
    if(rand()%6 == 0)
 8006a78:	f003 f9cc 	bl	8009e14 <rand>
 8006a7c:	0003      	movs	r3, r0
 8006a7e:	2106      	movs	r1, #6
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7f9 fcb9 	bl	80003f8 <__aeabi_idivmod>
 8006a86:	1e0b      	subs	r3, r1, #0
 8006a88:	d153      	bne.n	8006b32 <mode_icu+0x176>
    { // blink once in a while
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + dest, BLACK);
 8006a8a:	4b88      	ldr	r3, [pc, #544]	; (8006cac <mode_icu+0x2f0>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b88      	ldr	r3, [pc, #544]	; (8006cb0 <mode_icu+0x2f4>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	0019      	movs	r1, r3
 8006a94:	000b      	movs	r3, r1
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	1a5b      	subs	r3, r3, r1
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	18d3      	adds	r3, r2, r3
 8006a9e:	889a      	ldrh	r2, [r3, #4]
 8006aa0:	1dbb      	adds	r3, r7, #6
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	18d3      	adds	r3, r2, r3
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	b21b      	sxth	r3, r3
 8006aaa:	2100      	movs	r1, #0
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7fa f9b1 	bl	8000e14 <WS2811_SetDiodeColor>
      WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + dest + SEGMENT_LENGTH/2, BLACK);
 8006ab2:	4b7e      	ldr	r3, [pc, #504]	; (8006cac <mode_icu+0x2f0>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4b7e      	ldr	r3, [pc, #504]	; (8006cb0 <mode_icu+0x2f4>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	0019      	movs	r1, r3
 8006abc:	000b      	movs	r3, r1
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	1a5b      	subs	r3, r3, r1
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	18d3      	adds	r3, r2, r3
 8006ac6:	889a      	ldrh	r2, [r3, #4]
 8006ac8:	1dbb      	adds	r3, r7, #6
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	18d3      	adds	r3, r2, r3
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	4b76      	ldr	r3, [pc, #472]	; (8006cac <mode_icu+0x2f0>)
 8006ad2:	6819      	ldr	r1, [r3, #0]
 8006ad4:	4b76      	ldr	r3, [pc, #472]	; (8006cb0 <mode_icu+0x2f4>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	0003      	movs	r3, r0
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	1a1b      	subs	r3, r3, r0
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	18cb      	adds	r3, r1, r3
 8006ae4:	88db      	ldrh	r3, [r3, #6]
 8006ae6:	001c      	movs	r4, r3
 8006ae8:	4b70      	ldr	r3, [pc, #448]	; (8006cac <mode_icu+0x2f0>)
 8006aea:	6819      	ldr	r1, [r3, #0]
 8006aec:	4b70      	ldr	r3, [pc, #448]	; (8006cb0 <mode_icu+0x2f4>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	0018      	movs	r0, r3
 8006af2:	0003      	movs	r3, r0
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	1a1b      	subs	r3, r3, r0
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	18cb      	adds	r3, r1, r3
 8006afc:	889b      	ldrh	r3, [r3, #4]
 8006afe:	1ae3      	subs	r3, r4, r3
 8006b00:	3301      	adds	r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	da00      	bge.n	8006b08 <mode_icu+0x14c>
 8006b06:	3301      	adds	r3, #1
 8006b08:	105b      	asrs	r3, r3, #1
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	18d3      	adds	r3, r2, r3
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	b21b      	sxth	r3, r3
 8006b12:	2100      	movs	r1, #0
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7fa f97d 	bl	8000e14 <WS2811_SetDiodeColor>
      Ws28b11_Segments[mActualSegment].ModeDelay = 200;
 8006b1a:	4b64      	ldr	r3, [pc, #400]	; (8006cac <mode_icu+0x2f0>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b64      	ldr	r3, [pc, #400]	; (8006cb0 <mode_icu+0x2f4>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	0019      	movs	r1, r3
 8006b24:	000b      	movs	r3, r1
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	1a5b      	subs	r3, r3, r1
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	18d3      	adds	r3, r2, r3
 8006b2e:	22c8      	movs	r2, #200	; 0xc8
 8006b30:	601a      	str	r2, [r3, #0]
    }
    Ws28b11_Segments[mActualSegment].AuxParam16b = rand() %(SEGMENT_LENGTH/2);
 8006b32:	f003 f96f 	bl	8009e14 <rand>
 8006b36:	4b5d      	ldr	r3, [pc, #372]	; (8006cac <mode_icu+0x2f0>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b5d      	ldr	r3, [pc, #372]	; (8006cb0 <mode_icu+0x2f4>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	0019      	movs	r1, r3
 8006b40:	000b      	movs	r3, r1
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	1a5b      	subs	r3, r3, r1
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	18d3      	adds	r3, r2, r3
 8006b4a:	88db      	ldrh	r3, [r3, #6]
 8006b4c:	001c      	movs	r4, r3
 8006b4e:	4b57      	ldr	r3, [pc, #348]	; (8006cac <mode_icu+0x2f0>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b57      	ldr	r3, [pc, #348]	; (8006cb0 <mode_icu+0x2f4>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	0019      	movs	r1, r3
 8006b58:	000b      	movs	r3, r1
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	1a5b      	subs	r3, r3, r1
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	18d3      	adds	r3, r2, r3
 8006b62:	889b      	ldrh	r3, [r3, #4]
 8006b64:	1ae3      	subs	r3, r4, r3
 8006b66:	3301      	adds	r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da00      	bge.n	8006b6e <mode_icu+0x1b2>
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	105b      	asrs	r3, r3, #1
 8006b70:	0019      	movs	r1, r3
 8006b72:	f7f9 fc41 	bl	80003f8 <__aeabi_idivmod>
 8006b76:	000b      	movs	r3, r1
 8006b78:	0018      	movs	r0, r3
 8006b7a:	4b4c      	ldr	r3, [pc, #304]	; (8006cac <mode_icu+0x2f0>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b4c      	ldr	r3, [pc, #304]	; (8006cb0 <mode_icu+0x2f4>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	0019      	movs	r1, r3
 8006b84:	000b      	movs	r3, r1
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	1a5b      	subs	r3, r3, r1
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	18d3      	adds	r3, r2, r3
 8006b8e:	b282      	uxth	r2, r0
 8006b90:	85da      	strh	r2, [r3, #46]	; 0x2e
    Ws28b11_Segments[mActualSegment].ModeDelay = 1000 + rand() %2000;
 8006b92:	f003 f93f 	bl	8009e14 <rand>
 8006b96:	0002      	movs	r2, r0
 8006b98:	23fa      	movs	r3, #250	; 0xfa
 8006b9a:	00d9      	lsls	r1, r3, #3
 8006b9c:	0010      	movs	r0, r2
 8006b9e:	f7f9 fc2b 	bl	80003f8 <__aeabi_idivmod>
 8006ba2:	000b      	movs	r3, r1
 8006ba4:	22fa      	movs	r2, #250	; 0xfa
 8006ba6:	0092      	lsls	r2, r2, #2
 8006ba8:	1898      	adds	r0, r3, r2
 8006baa:	4b40      	ldr	r3, [pc, #256]	; (8006cac <mode_icu+0x2f0>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b40      	ldr	r3, [pc, #256]	; (8006cb0 <mode_icu+0x2f4>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	0019      	movs	r1, r3
 8006bb4:	000b      	movs	r3, r1
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	1a5b      	subs	r3, r3, r1
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	18d3      	adds	r3, r2, r3
 8006bbe:	0002      	movs	r2, r0
 8006bc0:	601a      	str	r2, [r3, #0]
  }

  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + dest, BLACK);
 8006bc2:	4b3a      	ldr	r3, [pc, #232]	; (8006cac <mode_icu+0x2f0>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b3a      	ldr	r3, [pc, #232]	; (8006cb0 <mode_icu+0x2f4>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	0019      	movs	r1, r3
 8006bcc:	000b      	movs	r3, r1
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	1a5b      	subs	r3, r3, r1
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	18d3      	adds	r3, r2, r3
 8006bd6:	889a      	ldrh	r2, [r3, #4]
 8006bd8:	1dbb      	adds	r3, r7, #6
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	18d3      	adds	r3, r2, r3
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b21b      	sxth	r3, r3
 8006be2:	2100      	movs	r1, #0
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7fa f915 	bl	8000e14 <WS2811_SetDiodeColor>
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + dest + SEGMENT_LENGTH/2, BLACK);
 8006bea:	4b30      	ldr	r3, [pc, #192]	; (8006cac <mode_icu+0x2f0>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	4b30      	ldr	r3, [pc, #192]	; (8006cb0 <mode_icu+0x2f4>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	0019      	movs	r1, r3
 8006bf4:	000b      	movs	r3, r1
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	1a5b      	subs	r3, r3, r1
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	18d3      	adds	r3, r2, r3
 8006bfe:	889a      	ldrh	r2, [r3, #4]
 8006c00:	1dbb      	adds	r3, r7, #6
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	18d3      	adds	r3, r2, r3
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	4b28      	ldr	r3, [pc, #160]	; (8006cac <mode_icu+0x2f0>)
 8006c0a:	6819      	ldr	r1, [r3, #0]
 8006c0c:	4b28      	ldr	r3, [pc, #160]	; (8006cb0 <mode_icu+0x2f4>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	0018      	movs	r0, r3
 8006c12:	0003      	movs	r3, r0
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	1a1b      	subs	r3, r3, r0
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	18cb      	adds	r3, r1, r3
 8006c1c:	88db      	ldrh	r3, [r3, #6]
 8006c1e:	001c      	movs	r4, r3
 8006c20:	4b22      	ldr	r3, [pc, #136]	; (8006cac <mode_icu+0x2f0>)
 8006c22:	6819      	ldr	r1, [r3, #0]
 8006c24:	4b22      	ldr	r3, [pc, #136]	; (8006cb0 <mode_icu+0x2f4>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	0018      	movs	r0, r3
 8006c2a:	0003      	movs	r3, r0
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	1a1b      	subs	r3, r3, r0
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	18cb      	adds	r3, r1, r3
 8006c34:	889b      	ldrh	r3, [r3, #4]
 8006c36:	1ae3      	subs	r3, r4, r3
 8006c38:	3301      	adds	r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	da00      	bge.n	8006c40 <mode_icu+0x284>
 8006c3e:	3301      	adds	r3, #1
 8006c40:	105b      	asrs	r3, r3, #1
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	18d3      	adds	r3, r2, r3
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	b21b      	sxth	r3, r3
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7fa f8e1 	bl	8000e14 <WS2811_SetDiodeColor>

  if(Ws28b11_Segments[mActualSegment].AuxParam16b > Ws28b11_Segments[mActualSegment].CounterModeStep)
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <mode_icu+0x2f0>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <mode_icu+0x2f4>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	0019      	movs	r1, r3
 8006c5c:	000b      	movs	r3, r1
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	1a5b      	subs	r3, r3, r1
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	18d3      	adds	r3, r2, r3
 8006c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c68:	0018      	movs	r0, r3
 8006c6a:	4b10      	ldr	r3, [pc, #64]	; (8006cac <mode_icu+0x2f0>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <mode_icu+0x2f4>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	0019      	movs	r1, r3
 8006c74:	000b      	movs	r3, r1
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	1a5b      	subs	r3, r3, r1
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	18d3      	adds	r3, r2, r3
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	4298      	cmp	r0, r3
 8006c82:	d917      	bls.n	8006cb4 <mode_icu+0x2f8>
  {
    Ws28b11_Segments[mActualSegment].CounterModeStep++;
 8006c84:	4b09      	ldr	r3, [pc, #36]	; (8006cac <mode_icu+0x2f0>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <mode_icu+0x2f4>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	0019      	movs	r1, r3
 8006c8e:	000b      	movs	r3, r1
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	1a5b      	subs	r3, r3, r1
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	18d3      	adds	r3, r2, r3
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	3201      	adds	r2, #1
 8006c9c:	611a      	str	r2, [r3, #16]
    dest++;
 8006c9e:	1dbb      	adds	r3, r7, #6
 8006ca0:	881a      	ldrh	r2, [r3, #0]
 8006ca2:	1dbb      	adds	r3, r7, #6
 8006ca4:	3201      	adds	r2, #1
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	e02f      	b.n	8006d0a <mode_icu+0x34e>
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	2000057c 	.word	0x2000057c
 8006cb0:	20000754 	.word	0x20000754
  } else if (Ws28b11_Segments[mActualSegment].AuxParam16b < Ws28b11_Segments[mActualSegment].CounterModeStep)
 8006cb4:	4b50      	ldr	r3, [pc, #320]	; (8006df8 <mode_icu+0x43c>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	4b50      	ldr	r3, [pc, #320]	; (8006dfc <mode_icu+0x440>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	0019      	movs	r1, r3
 8006cbe:	000b      	movs	r3, r1
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	1a5b      	subs	r3, r3, r1
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	18d3      	adds	r3, r2, r3
 8006cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cca:	0018      	movs	r0, r3
 8006ccc:	4b4a      	ldr	r3, [pc, #296]	; (8006df8 <mode_icu+0x43c>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	4b4a      	ldr	r3, [pc, #296]	; (8006dfc <mode_icu+0x440>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	0019      	movs	r1, r3
 8006cd6:	000b      	movs	r3, r1
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	1a5b      	subs	r3, r3, r1
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	18d3      	adds	r3, r2, r3
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	4298      	cmp	r0, r3
 8006ce4:	d211      	bcs.n	8006d0a <mode_icu+0x34e>
  {
    Ws28b11_Segments[mActualSegment].CounterModeStep--;
 8006ce6:	4b44      	ldr	r3, [pc, #272]	; (8006df8 <mode_icu+0x43c>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b44      	ldr	r3, [pc, #272]	; (8006dfc <mode_icu+0x440>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	0019      	movs	r1, r3
 8006cf0:	000b      	movs	r3, r1
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	1a5b      	subs	r3, r3, r1
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	18d3      	adds	r3, r2, r3
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	3a01      	subs	r2, #1
 8006cfe:	611a      	str	r2, [r3, #16]
    dest--;
 8006d00:	1dbb      	adds	r3, r7, #6
 8006d02:	881a      	ldrh	r2, [r3, #0]
 8006d04:	1dbb      	adds	r3, r7, #6
 8006d06:	3a01      	subs	r2, #1
 8006d08:	801a      	strh	r2, [r3, #0]
  }

  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + dest, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8006d0a:	4b3b      	ldr	r3, [pc, #236]	; (8006df8 <mode_icu+0x43c>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <mode_icu+0x440>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	0019      	movs	r1, r3
 8006d14:	000b      	movs	r3, r1
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	1a5b      	subs	r3, r3, r1
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	18d3      	adds	r3, r2, r3
 8006d1e:	889a      	ldrh	r2, [r3, #4]
 8006d20:	1dbb      	adds	r3, r7, #6
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	18d3      	adds	r3, r2, r3
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	b218      	sxth	r0, r3
 8006d2a:	4b33      	ldr	r3, [pc, #204]	; (8006df8 <mode_icu+0x43c>)
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4b33      	ldr	r3, [pc, #204]	; (8006dfc <mode_icu+0x440>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	0019      	movs	r1, r3
 8006d34:	000b      	movs	r3, r1
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	1a5b      	subs	r3, r3, r1
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	18d3      	adds	r3, r2, r3
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	0019      	movs	r1, r3
 8006d42:	f7fa f867 	bl	8000e14 <WS2811_SetDiodeColor>
  WS2811_SetDiodeColor(Ws28b11_Segments[mActualSegment].IdStart + dest + SEGMENT_LENGTH/2, Ws28b11_Segments[mActualSegment].ModeColor[0]);
 8006d46:	4b2c      	ldr	r3, [pc, #176]	; (8006df8 <mode_icu+0x43c>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b2c      	ldr	r3, [pc, #176]	; (8006dfc <mode_icu+0x440>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	0019      	movs	r1, r3
 8006d50:	000b      	movs	r3, r1
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	1a5b      	subs	r3, r3, r1
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	18d3      	adds	r3, r2, r3
 8006d5a:	889a      	ldrh	r2, [r3, #4]
 8006d5c:	1dbb      	adds	r3, r7, #6
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	18d3      	adds	r3, r2, r3
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <mode_icu+0x43c>)
 8006d66:	6819      	ldr	r1, [r3, #0]
 8006d68:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <mode_icu+0x440>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	0003      	movs	r3, r0
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	1a1b      	subs	r3, r3, r0
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	18cb      	adds	r3, r1, r3
 8006d78:	88db      	ldrh	r3, [r3, #6]
 8006d7a:	001c      	movs	r4, r3
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <mode_icu+0x43c>)
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <mode_icu+0x440>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	0018      	movs	r0, r3
 8006d86:	0003      	movs	r3, r0
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	1a1b      	subs	r3, r3, r0
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	18cb      	adds	r3, r1, r3
 8006d90:	889b      	ldrh	r3, [r3, #4]
 8006d92:	1ae3      	subs	r3, r4, r3
 8006d94:	3301      	adds	r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	da00      	bge.n	8006d9c <mode_icu+0x3e0>
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	105b      	asrs	r3, r3, #1
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	18d3      	adds	r3, r2, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	b218      	sxth	r0, r3
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <mode_icu+0x43c>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <mode_icu+0x440>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	0019      	movs	r1, r3
 8006db0:	000b      	movs	r3, r1
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	1a5b      	subs	r3, r3, r1
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	18d3      	adds	r3, r2, r3
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	0019      	movs	r1, r3
 8006dbe:	f7fa f829 	bl	8000e14 <WS2811_SetDiodeColor>

  Ws28b11_Segments[mActualSegment].ModeDelay = Ws28b11_Segments[mActualSegment].Speed;
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <mode_icu+0x43c>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4b0d      	ldr	r3, [pc, #52]	; (8006dfc <mode_icu+0x440>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	0019      	movs	r1, r3
 8006dcc:	000b      	movs	r3, r1
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	1a5b      	subs	r3, r3, r1
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	18d3      	adds	r3, r2, r3
 8006dd6:	8a98      	ldrh	r0, [r3, #20]
 8006dd8:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <mode_icu+0x43c>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <mode_icu+0x440>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	0019      	movs	r1, r3
 8006de2:	000b      	movs	r3, r1
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	1a5b      	subs	r3, r3, r1
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	18d3      	adds	r3, r2, r3
 8006dec:	0002      	movs	r2, r0
 8006dee:	601a      	str	r2, [r3, #0]
}
 8006df0:	46c0      	nop			; (mov r8, r8)
 8006df2:	46bd      	mov	sp, r7
 8006df4:	b003      	add	sp, #12
 8006df6:	bd90      	pop	{r4, r7, pc}
 8006df8:	2000057c 	.word	0x2000057c
 8006dfc:	20000754 	.word	0x20000754

08006e00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006e00:	480d      	ldr	r0, [pc, #52]	; (8006e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006e02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006e04:	f7f9 ff5a 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e08:	480c      	ldr	r0, [pc, #48]	; (8006e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8006e0a:	490d      	ldr	r1, [pc, #52]	; (8006e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006e0c:	4a0d      	ldr	r2, [pc, #52]	; (8006e44 <LoopForever+0xe>)
  movs r3, #0
 8006e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e10:	e002      	b.n	8006e18 <LoopCopyDataInit>

08006e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e16:	3304      	adds	r3, #4

08006e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e1c:	d3f9      	bcc.n	8006e12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e1e:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006e20:	4c0a      	ldr	r4, [pc, #40]	; (8006e4c <LoopForever+0x16>)
  movs r3, #0
 8006e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e24:	e001      	b.n	8006e2a <LoopFillZerobss>

08006e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e28:	3204      	adds	r2, #4

08006e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e2c:	d3fb      	bcc.n	8006e26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006e2e:	f002 fef1 	bl	8009c14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006e32:	f7f9 fc9f 	bl	8000774 <main>

08006e36 <LoopForever>:

LoopForever:
  b LoopForever
 8006e36:	e7fe      	b.n	8006e36 <LoopForever>
  ldr   r0, =_estack
 8006e38:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8006e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e40:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8006e44:	0800b06c 	.word	0x0800b06c
  ldr r2, =_sbss
 8006e48:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8006e4c:	20000778 	.word	0x20000778

08006e50 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e50:	e7fe      	b.n	8006e50 <ADC1_COMP_IRQHandler>
	...

08006e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006e5a:	1dfb      	adds	r3, r7, #7
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e60:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <HAL_Init+0x3c>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <HAL_Init+0x3c>)
 8006e66:	2180      	movs	r1, #128	; 0x80
 8006e68:	0049      	lsls	r1, r1, #1
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006e6e:	2000      	movs	r0, #0
 8006e70:	f000 f810 	bl	8006e94 <HAL_InitTick>
 8006e74:	1e03      	subs	r3, r0, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006e78:	1dfb      	adds	r3, r7, #7
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	e001      	b.n	8006e84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006e80:	f7f9 fe10 	bl	8000aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006e84:	1dfb      	adds	r3, r7, #7
 8006e86:	781b      	ldrb	r3, [r3, #0]
}
 8006e88:	0018      	movs	r0, r3
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	b002      	add	sp, #8
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40022000 	.word	0x40022000

08006e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e94:	b590      	push	{r4, r7, lr}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006e9c:	230f      	movs	r3, #15
 8006e9e:	18fb      	adds	r3, r7, r3
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006ea4:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <HAL_InitTick+0x88>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d02b      	beq.n	8006f04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006eac:	4b1c      	ldr	r3, [pc, #112]	; (8006f20 <HAL_InitTick+0x8c>)
 8006eae:	681c      	ldr	r4, [r3, #0]
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <HAL_InitTick+0x88>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	0019      	movs	r1, r3
 8006eb6:	23fa      	movs	r3, #250	; 0xfa
 8006eb8:	0098      	lsls	r0, r3, #2
 8006eba:	f7f9 f92d 	bl	8000118 <__udivsi3>
 8006ebe:	0003      	movs	r3, r0
 8006ec0:	0019      	movs	r1, r3
 8006ec2:	0020      	movs	r0, r4
 8006ec4:	f7f9 f928 	bl	8000118 <__udivsi3>
 8006ec8:	0003      	movs	r3, r0
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f000 f953 	bl	8007176 <HAL_SYSTICK_Config>
 8006ed0:	1e03      	subs	r3, r0, #0
 8006ed2:	d112      	bne.n	8006efa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d80a      	bhi.n	8006ef0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	2301      	movs	r3, #1
 8006ede:	425b      	negs	r3, r3
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f000 f922 	bl	800712c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <HAL_InitTick+0x90>)
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e00d      	b.n	8006f0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006ef0:	230f      	movs	r3, #15
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e008      	b.n	8006f0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006efa:	230f      	movs	r3, #15
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	2201      	movs	r2, #1
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	e003      	b.n	8006f0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006f04:	230f      	movs	r3, #15
 8006f06:	18fb      	adds	r3, r7, r3
 8006f08:	2201      	movs	r2, #1
 8006f0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006f0c:	230f      	movs	r3, #15
 8006f0e:	18fb      	adds	r3, r7, r3
 8006f10:	781b      	ldrb	r3, [r3, #0]
}
 8006f12:	0018      	movs	r0, r3
 8006f14:	46bd      	mov	sp, r7
 8006f16:	b005      	add	sp, #20
 8006f18:	bd90      	pop	{r4, r7, pc}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	200000f0 	.word	0x200000f0
 8006f20:	20000000 	.word	0x20000000
 8006f24:	200000ec 	.word	0x200000ec

08006f28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006f2c:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <HAL_IncTick+0x1c>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	001a      	movs	r2, r3
 8006f32:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <HAL_IncTick+0x20>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	18d2      	adds	r2, r2, r3
 8006f38:	4b03      	ldr	r3, [pc, #12]	; (8006f48 <HAL_IncTick+0x20>)
 8006f3a:	601a      	str	r2, [r3, #0]
}
 8006f3c:	46c0      	nop			; (mov r8, r8)
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	200000f0 	.word	0x200000f0
 8006f48:	20000764 	.word	0x20000764

08006f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8006f50:	4b02      	ldr	r3, [pc, #8]	; (8006f5c <HAL_GetTick+0x10>)
 8006f52:	681b      	ldr	r3, [r3, #0]
}
 8006f54:	0018      	movs	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	20000764 	.word	0x20000764

08006f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f68:	f7ff fff0 	bl	8006f4c <HAL_GetTick>
 8006f6c:	0003      	movs	r3, r0
 8006f6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	d005      	beq.n	8006f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f7a:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <HAL_Delay+0x44>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	001a      	movs	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	f7ff ffe0 	bl	8006f4c <HAL_GetTick>
 8006f8c:	0002      	movs	r2, r0
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d8f7      	bhi.n	8006f88 <HAL_Delay+0x28>
  {
  }
}
 8006f98:	46c0      	nop			; (mov r8, r8)
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	b004      	add	sp, #16
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	200000f0 	.word	0x200000f0

08006fa8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a06      	ldr	r2, [pc, #24]	; (8006fd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	0019      	movs	r1, r3
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	601a      	str	r2, [r3, #0]
}
 8006fc2:	46c0      	nop			; (mov r8, r8)
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	b002      	add	sp, #8
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	fffff9ff 	.word	0xfffff9ff

08006fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	0002      	movs	r2, r0
 8006fdc:	1dfb      	adds	r3, r7, #7
 8006fde:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006fe0:	1dfb      	adds	r3, r7, #7
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe6:	d809      	bhi.n	8006ffc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fe8:	1dfb      	adds	r3, r7, #7
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	001a      	movs	r2, r3
 8006fee:	231f      	movs	r3, #31
 8006ff0:	401a      	ands	r2, r3
 8006ff2:	4b04      	ldr	r3, [pc, #16]	; (8007004 <__NVIC_EnableIRQ+0x30>)
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	4091      	lsls	r1, r2
 8006ff8:	000a      	movs	r2, r1
 8006ffa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006ffc:	46c0      	nop			; (mov r8, r8)
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b002      	add	sp, #8
 8007002:	bd80      	pop	{r7, pc}
 8007004:	e000e100 	.word	0xe000e100

08007008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007008:	b590      	push	{r4, r7, lr}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	0002      	movs	r2, r0
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	1dfb      	adds	r3, r7, #7
 8007014:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007016:	1dfb      	adds	r3, r7, #7
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b7f      	cmp	r3, #127	; 0x7f
 800701c:	d828      	bhi.n	8007070 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800701e:	4a2f      	ldr	r2, [pc, #188]	; (80070dc <__NVIC_SetPriority+0xd4>)
 8007020:	1dfb      	adds	r3, r7, #7
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	b25b      	sxtb	r3, r3
 8007026:	089b      	lsrs	r3, r3, #2
 8007028:	33c0      	adds	r3, #192	; 0xc0
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	589b      	ldr	r3, [r3, r2]
 800702e:	1dfa      	adds	r2, r7, #7
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	0011      	movs	r1, r2
 8007034:	2203      	movs	r2, #3
 8007036:	400a      	ands	r2, r1
 8007038:	00d2      	lsls	r2, r2, #3
 800703a:	21ff      	movs	r1, #255	; 0xff
 800703c:	4091      	lsls	r1, r2
 800703e:	000a      	movs	r2, r1
 8007040:	43d2      	mvns	r2, r2
 8007042:	401a      	ands	r2, r3
 8007044:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	019b      	lsls	r3, r3, #6
 800704a:	22ff      	movs	r2, #255	; 0xff
 800704c:	401a      	ands	r2, r3
 800704e:	1dfb      	adds	r3, r7, #7
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	0018      	movs	r0, r3
 8007054:	2303      	movs	r3, #3
 8007056:	4003      	ands	r3, r0
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800705c:	481f      	ldr	r0, [pc, #124]	; (80070dc <__NVIC_SetPriority+0xd4>)
 800705e:	1dfb      	adds	r3, r7, #7
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	b25b      	sxtb	r3, r3
 8007064:	089b      	lsrs	r3, r3, #2
 8007066:	430a      	orrs	r2, r1
 8007068:	33c0      	adds	r3, #192	; 0xc0
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800706e:	e031      	b.n	80070d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007070:	4a1b      	ldr	r2, [pc, #108]	; (80070e0 <__NVIC_SetPriority+0xd8>)
 8007072:	1dfb      	adds	r3, r7, #7
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	0019      	movs	r1, r3
 8007078:	230f      	movs	r3, #15
 800707a:	400b      	ands	r3, r1
 800707c:	3b08      	subs	r3, #8
 800707e:	089b      	lsrs	r3, r3, #2
 8007080:	3306      	adds	r3, #6
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	18d3      	adds	r3, r2, r3
 8007086:	3304      	adds	r3, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	1dfa      	adds	r2, r7, #7
 800708c:	7812      	ldrb	r2, [r2, #0]
 800708e:	0011      	movs	r1, r2
 8007090:	2203      	movs	r2, #3
 8007092:	400a      	ands	r2, r1
 8007094:	00d2      	lsls	r2, r2, #3
 8007096:	21ff      	movs	r1, #255	; 0xff
 8007098:	4091      	lsls	r1, r2
 800709a:	000a      	movs	r2, r1
 800709c:	43d2      	mvns	r2, r2
 800709e:	401a      	ands	r2, r3
 80070a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	019b      	lsls	r3, r3, #6
 80070a6:	22ff      	movs	r2, #255	; 0xff
 80070a8:	401a      	ands	r2, r3
 80070aa:	1dfb      	adds	r3, r7, #7
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	0018      	movs	r0, r3
 80070b0:	2303      	movs	r3, #3
 80070b2:	4003      	ands	r3, r0
 80070b4:	00db      	lsls	r3, r3, #3
 80070b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070b8:	4809      	ldr	r0, [pc, #36]	; (80070e0 <__NVIC_SetPriority+0xd8>)
 80070ba:	1dfb      	adds	r3, r7, #7
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	001c      	movs	r4, r3
 80070c0:	230f      	movs	r3, #15
 80070c2:	4023      	ands	r3, r4
 80070c4:	3b08      	subs	r3, #8
 80070c6:	089b      	lsrs	r3, r3, #2
 80070c8:	430a      	orrs	r2, r1
 80070ca:	3306      	adds	r3, #6
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	18c3      	adds	r3, r0, r3
 80070d0:	3304      	adds	r3, #4
 80070d2:	601a      	str	r2, [r3, #0]
}
 80070d4:	46c0      	nop			; (mov r8, r8)
 80070d6:	46bd      	mov	sp, r7
 80070d8:	b003      	add	sp, #12
 80070da:	bd90      	pop	{r4, r7, pc}
 80070dc:	e000e100 	.word	0xe000e100
 80070e0:	e000ed00 	.word	0xe000ed00

080070e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	1e5a      	subs	r2, r3, #1
 80070f0:	2380      	movs	r3, #128	; 0x80
 80070f2:	045b      	lsls	r3, r3, #17
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d301      	bcc.n	80070fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070f8:	2301      	movs	r3, #1
 80070fa:	e010      	b.n	800711e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <SysTick_Config+0x44>)
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	3a01      	subs	r2, #1
 8007102:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007104:	2301      	movs	r3, #1
 8007106:	425b      	negs	r3, r3
 8007108:	2103      	movs	r1, #3
 800710a:	0018      	movs	r0, r3
 800710c:	f7ff ff7c 	bl	8007008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <SysTick_Config+0x44>)
 8007112:	2200      	movs	r2, #0
 8007114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007116:	4b04      	ldr	r3, [pc, #16]	; (8007128 <SysTick_Config+0x44>)
 8007118:	2207      	movs	r2, #7
 800711a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800711c:	2300      	movs	r3, #0
}
 800711e:	0018      	movs	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	b002      	add	sp, #8
 8007124:	bd80      	pop	{r7, pc}
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	e000e010 	.word	0xe000e010

0800712c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
 8007136:	210f      	movs	r1, #15
 8007138:	187b      	adds	r3, r7, r1
 800713a:	1c02      	adds	r2, r0, #0
 800713c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	187b      	adds	r3, r7, r1
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	b25b      	sxtb	r3, r3
 8007146:	0011      	movs	r1, r2
 8007148:	0018      	movs	r0, r3
 800714a:	f7ff ff5d 	bl	8007008 <__NVIC_SetPriority>
}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	46bd      	mov	sp, r7
 8007152:	b004      	add	sp, #16
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	0002      	movs	r2, r0
 800715e:	1dfb      	adds	r3, r7, #7
 8007160:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007162:	1dfb      	adds	r3, r7, #7
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	b25b      	sxtb	r3, r3
 8007168:	0018      	movs	r0, r3
 800716a:	f7ff ff33 	bl	8006fd4 <__NVIC_EnableIRQ>
}
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	46bd      	mov	sp, r7
 8007172:	b002      	add	sp, #8
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	0018      	movs	r0, r3
 8007182:	f7ff ffaf 	bl	80070e4 <SysTick_Config>
 8007186:	0003      	movs	r3, r0
}
 8007188:	0018      	movs	r0, r3
 800718a:	46bd      	mov	sp, r7
 800718c:	b002      	add	sp, #8
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e077      	b.n	8007292 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a3d      	ldr	r2, [pc, #244]	; (800729c <HAL_DMA_Init+0x10c>)
 80071a8:	4694      	mov	ip, r2
 80071aa:	4463      	add	r3, ip
 80071ac:	2114      	movs	r1, #20
 80071ae:	0018      	movs	r0, r3
 80071b0:	f7f8 ffb2 	bl	8000118 <__udivsi3>
 80071b4:	0003      	movs	r3, r0
 80071b6:	009a      	lsls	r2, r3, #2
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2225      	movs	r2, #37	; 0x25
 80071c0:	2102      	movs	r1, #2
 80071c2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4934      	ldr	r1, [pc, #208]	; (80072a0 <HAL_DMA_Init+0x110>)
 80071d0:	400a      	ands	r2, r1
 80071d2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6819      	ldr	r1, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	431a      	orrs	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	0018      	movs	r0, r3
 800720e:	f000 fa2f 	bl	8007670 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	2380      	movs	r3, #128	; 0x80
 8007218:	01db      	lsls	r3, r3, #7
 800721a:	429a      	cmp	r2, r3
 800721c:	d102      	bne.n	8007224 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722c:	213f      	movs	r1, #63	; 0x3f
 800722e:	400a      	ands	r2, r1
 8007230:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800723a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d011      	beq.n	8007268 <HAL_DMA_Init+0xd8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b04      	cmp	r3, #4
 800724a:	d80d      	bhi.n	8007268 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	0018      	movs	r0, r3
 8007250:	f000 fa3a 	bl	80076c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	e008      	b.n	800727a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2225      	movs	r2, #37	; 0x25
 8007284:	2101      	movs	r1, #1
 8007286:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2224      	movs	r2, #36	; 0x24
 800728c:	2100      	movs	r1, #0
 800728e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	0018      	movs	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	b002      	add	sp, #8
 8007298:	bd80      	pop	{r7, pc}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	bffdfff8 	.word	0xbffdfff8
 80072a0:	ffff800f 	.word	0xffff800f

080072a4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072b2:	2317      	movs	r3, #23
 80072b4:	18fb      	adds	r3, r7, r3
 80072b6:	2200      	movs	r2, #0
 80072b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2224      	movs	r2, #36	; 0x24
 80072be:	5c9b      	ldrb	r3, [r3, r2]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_DMA_Start_IT+0x24>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e06f      	b.n	80073a8 <HAL_DMA_Start_IT+0x104>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2224      	movs	r2, #36	; 0x24
 80072cc:	2101      	movs	r1, #1
 80072ce:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2225      	movs	r2, #37	; 0x25
 80072d4:	5c9b      	ldrb	r3, [r3, r2]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d157      	bne.n	800738c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2225      	movs	r2, #37	; 0x25
 80072e0:	2102      	movs	r1, #2
 80072e2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2101      	movs	r1, #1
 80072f6:	438a      	bics	r2, r1
 80072f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f975 	bl	80075f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	2b00      	cmp	r3, #0
 800730c:	d008      	beq.n	8007320 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	210e      	movs	r1, #14
 800731a:	430a      	orrs	r2, r1
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e00f      	b.n	8007340 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2104      	movs	r1, #4
 800732c:	438a      	bics	r2, r1
 800732e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	210a      	movs	r1, #10
 800733c:	430a      	orrs	r2, r1
 800733e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	2380      	movs	r3, #128	; 0x80
 8007348:	025b      	lsls	r3, r3, #9
 800734a:	4013      	ands	r3, r2
 800734c:	d008      	beq.n	8007360 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007358:	2180      	movs	r1, #128	; 0x80
 800735a:	0049      	lsls	r1, r1, #1
 800735c:	430a      	orrs	r2, r1
 800735e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007372:	2180      	movs	r1, #128	; 0x80
 8007374:	0049      	lsls	r1, r1, #1
 8007376:	430a      	orrs	r2, r1
 8007378:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2101      	movs	r1, #1
 8007386:	430a      	orrs	r2, r1
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	e00a      	b.n	80073a2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2280      	movs	r2, #128	; 0x80
 8007390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2224      	movs	r2, #36	; 0x24
 8007396:	2100      	movs	r1, #0
 8007398:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800739a:	2317      	movs	r3, #23
 800739c:	18fb      	adds	r3, r7, r3
 800739e:	2201      	movs	r2, #1
 80073a0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80073a2:	2317      	movs	r3, #23
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	781b      	ldrb	r3, [r3, #0]
}
 80073a8:	0018      	movs	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b006      	add	sp, #24
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e050      	b.n	8007464 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2225      	movs	r2, #37	; 0x25
 80073c6:	5c9b      	ldrb	r3, [r3, r2]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d008      	beq.n	80073e0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2204      	movs	r2, #4
 80073d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2224      	movs	r2, #36	; 0x24
 80073d8:	2100      	movs	r1, #0
 80073da:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e041      	b.n	8007464 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	210e      	movs	r1, #14
 80073ec:	438a      	bics	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	491c      	ldr	r1, [pc, #112]	; (800746c <HAL_DMA_Abort+0xbc>)
 80073fc:	400a      	ands	r2, r1
 80073fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2101      	movs	r1, #1
 800740c:	438a      	bics	r2, r1
 800740e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007410:	4b17      	ldr	r3, [pc, #92]	; (8007470 <HAL_DMA_Abort+0xc0>)
 8007412:	6859      	ldr	r1, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	221c      	movs	r2, #28
 800741a:	4013      	ands	r3, r2
 800741c:	2201      	movs	r2, #1
 800741e:	409a      	lsls	r2, r3
 8007420:	4b13      	ldr	r3, [pc, #76]	; (8007470 <HAL_DMA_Abort+0xc0>)
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800742e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00c      	beq.n	8007452 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007442:	490a      	ldr	r1, [pc, #40]	; (800746c <HAL_DMA_Abort+0xbc>)
 8007444:	400a      	ands	r2, r1
 8007446:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007450:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2225      	movs	r2, #37	; 0x25
 8007456:	2101      	movs	r1, #1
 8007458:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2224      	movs	r2, #36	; 0x24
 800745e:	2100      	movs	r1, #0
 8007460:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	0018      	movs	r0, r3
 8007466:	46bd      	mov	sp, r7
 8007468:	b002      	add	sp, #8
 800746a:	bd80      	pop	{r7, pc}
 800746c:	fffffeff 	.word	0xfffffeff
 8007470:	40020000 	.word	0x40020000

08007474 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800747c:	4b55      	ldr	r3, [pc, #340]	; (80075d4 <HAL_DMA_IRQHandler+0x160>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	221c      	movs	r2, #28
 8007490:	4013      	ands	r3, r2
 8007492:	2204      	movs	r2, #4
 8007494:	409a      	lsls	r2, r3
 8007496:	0013      	movs	r3, r2
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4013      	ands	r3, r2
 800749c:	d027      	beq.n	80074ee <HAL_DMA_IRQHandler+0x7a>
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2204      	movs	r2, #4
 80074a2:	4013      	ands	r3, r2
 80074a4:	d023      	beq.n	80074ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2220      	movs	r2, #32
 80074ae:	4013      	ands	r3, r2
 80074b0:	d107      	bne.n	80074c2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2104      	movs	r1, #4
 80074be:	438a      	bics	r2, r1
 80074c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80074c2:	4b44      	ldr	r3, [pc, #272]	; (80075d4 <HAL_DMA_IRQHandler+0x160>)
 80074c4:	6859      	ldr	r1, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	221c      	movs	r2, #28
 80074cc:	4013      	ands	r3, r2
 80074ce:	2204      	movs	r2, #4
 80074d0:	409a      	lsls	r2, r3
 80074d2:	4b40      	ldr	r3, [pc, #256]	; (80075d4 <HAL_DMA_IRQHandler+0x160>)
 80074d4:	430a      	orrs	r2, r1
 80074d6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d100      	bne.n	80074e2 <HAL_DMA_IRQHandler+0x6e>
 80074e0:	e073      	b.n	80075ca <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	0010      	movs	r0, r2
 80074ea:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80074ec:	e06d      	b.n	80075ca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	221c      	movs	r2, #28
 80074f4:	4013      	ands	r3, r2
 80074f6:	2202      	movs	r2, #2
 80074f8:	409a      	lsls	r2, r3
 80074fa:	0013      	movs	r3, r2
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4013      	ands	r3, r2
 8007500:	d02e      	beq.n	8007560 <HAL_DMA_IRQHandler+0xec>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2202      	movs	r2, #2
 8007506:	4013      	ands	r3, r2
 8007508:	d02a      	beq.n	8007560 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2220      	movs	r2, #32
 8007512:	4013      	ands	r3, r2
 8007514:	d10b      	bne.n	800752e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	210a      	movs	r1, #10
 8007522:	438a      	bics	r2, r1
 8007524:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2225      	movs	r2, #37	; 0x25
 800752a:	2101      	movs	r1, #1
 800752c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800752e:	4b29      	ldr	r3, [pc, #164]	; (80075d4 <HAL_DMA_IRQHandler+0x160>)
 8007530:	6859      	ldr	r1, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	221c      	movs	r2, #28
 8007538:	4013      	ands	r3, r2
 800753a:	2202      	movs	r2, #2
 800753c:	409a      	lsls	r2, r3
 800753e:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <HAL_DMA_IRQHandler+0x160>)
 8007540:	430a      	orrs	r2, r1
 8007542:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2224      	movs	r2, #36	; 0x24
 8007548:	2100      	movs	r1, #0
 800754a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d03a      	beq.n	80075ca <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	0010      	movs	r0, r2
 800755c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800755e:	e034      	b.n	80075ca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	221c      	movs	r2, #28
 8007566:	4013      	ands	r3, r2
 8007568:	2208      	movs	r2, #8
 800756a:	409a      	lsls	r2, r3
 800756c:	0013      	movs	r3, r2
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4013      	ands	r3, r2
 8007572:	d02b      	beq.n	80075cc <HAL_DMA_IRQHandler+0x158>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2208      	movs	r2, #8
 8007578:	4013      	ands	r3, r2
 800757a:	d027      	beq.n	80075cc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	210e      	movs	r1, #14
 8007588:	438a      	bics	r2, r1
 800758a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800758c:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <HAL_DMA_IRQHandler+0x160>)
 800758e:	6859      	ldr	r1, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	221c      	movs	r2, #28
 8007596:	4013      	ands	r3, r2
 8007598:	2201      	movs	r2, #1
 800759a:	409a      	lsls	r2, r3
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <HAL_DMA_IRQHandler+0x160>)
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2225      	movs	r2, #37	; 0x25
 80075ac:	2101      	movs	r1, #1
 80075ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2224      	movs	r2, #36	; 0x24
 80075b4:	2100      	movs	r1, #0
 80075b6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	0010      	movs	r0, r2
 80075c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	46c0      	nop			; (mov r8, r8)
}
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b004      	add	sp, #16
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	40020000 	.word	0x40020000

080075d8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2225      	movs	r2, #37	; 0x25
 80075e4:	5c9b      	ldrb	r3, [r3, r2]
 80075e6:	b2db      	uxtb	r3, r3
}
 80075e8:	0018      	movs	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b002      	add	sp, #8
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007606:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007618:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800761a:	4b14      	ldr	r3, [pc, #80]	; (800766c <DMA_SetConfig+0x7c>)
 800761c:	6859      	ldr	r1, [r3, #4]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	221c      	movs	r2, #28
 8007624:	4013      	ands	r3, r2
 8007626:	2201      	movs	r2, #1
 8007628:	409a      	lsls	r2, r3
 800762a:	4b10      	ldr	r3, [pc, #64]	; (800766c <DMA_SetConfig+0x7c>)
 800762c:	430a      	orrs	r2, r1
 800762e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2b10      	cmp	r3, #16
 800763e:	d108      	bne.n	8007652 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007650:	e007      	b.n	8007662 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	60da      	str	r2, [r3, #12]
}
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	46bd      	mov	sp, r7
 8007666:	b004      	add	sp, #16
 8007668:	bd80      	pop	{r7, pc}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	40020000 	.word	0x40020000

08007670 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	089b      	lsrs	r3, r3, #2
 800767e:	4a10      	ldr	r2, [pc, #64]	; (80076c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8007680:	4694      	mov	ip, r2
 8007682:	4463      	add	r3, ip
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	001a      	movs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	001a      	movs	r2, r3
 8007692:	23ff      	movs	r3, #255	; 0xff
 8007694:	4013      	ands	r3, r2
 8007696:	3b08      	subs	r3, #8
 8007698:	2114      	movs	r1, #20
 800769a:	0018      	movs	r0, r3
 800769c:	f7f8 fd3c 	bl	8000118 <__udivsi3>
 80076a0:	0003      	movs	r3, r0
 80076a2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a07      	ldr	r2, [pc, #28]	; (80076c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80076a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	221f      	movs	r2, #31
 80076ae:	4013      	ands	r3, r2
 80076b0:	2201      	movs	r2, #1
 80076b2:	409a      	lsls	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	46bd      	mov	sp, r7
 80076bc:	b004      	add	sp, #16
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	10008200 	.word	0x10008200
 80076c4:	40020880 	.word	0x40020880

080076c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	223f      	movs	r2, #63	; 0x3f
 80076d6:	4013      	ands	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4a0a      	ldr	r2, [pc, #40]	; (8007708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80076de:	4694      	mov	ip, r2
 80076e0:	4463      	add	r3, ip
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	001a      	movs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a07      	ldr	r2, [pc, #28]	; (800770c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80076ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	2203      	movs	r2, #3
 80076f6:	4013      	ands	r3, r2
 80076f8:	2201      	movs	r2, #1
 80076fa:	409a      	lsls	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8007700:	46c0      	nop			; (mov r8, r8)
 8007702:	46bd      	mov	sp, r7
 8007704:	b004      	add	sp, #16
 8007706:	bd80      	pop	{r7, pc}
 8007708:	1000823f 	.word	0x1000823f
 800770c:	40020940 	.word	0x40020940

08007710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800771e:	e147      	b.n	80079b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2101      	movs	r1, #1
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4091      	lsls	r1, r2
 800772a:	000a      	movs	r2, r1
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d100      	bne.n	8007738 <HAL_GPIO_Init+0x28>
 8007736:	e138      	b.n	80079aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2203      	movs	r2, #3
 800773e:	4013      	ands	r3, r2
 8007740:	2b01      	cmp	r3, #1
 8007742:	d005      	beq.n	8007750 <HAL_GPIO_Init+0x40>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2203      	movs	r2, #3
 800774a:	4013      	ands	r3, r2
 800774c:	2b02      	cmp	r3, #2
 800774e:	d130      	bne.n	80077b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	2203      	movs	r2, #3
 800775c:	409a      	lsls	r2, r3
 800775e:	0013      	movs	r3, r2
 8007760:	43da      	mvns	r2, r3
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4013      	ands	r3, r2
 8007766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	005b      	lsls	r3, r3, #1
 8007770:	409a      	lsls	r2, r3
 8007772:	0013      	movs	r3, r2
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007786:	2201      	movs	r2, #1
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	409a      	lsls	r2, r3
 800778c:	0013      	movs	r3, r2
 800778e:	43da      	mvns	r2, r3
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4013      	ands	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	091b      	lsrs	r3, r3, #4
 800779c:	2201      	movs	r2, #1
 800779e:	401a      	ands	r2, r3
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	409a      	lsls	r2, r3
 80077a4:	0013      	movs	r3, r2
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2203      	movs	r2, #3
 80077b8:	4013      	ands	r3, r2
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d017      	beq.n	80077ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	2203      	movs	r2, #3
 80077ca:	409a      	lsls	r2, r3
 80077cc:	0013      	movs	r3, r2
 80077ce:	43da      	mvns	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4013      	ands	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	689a      	ldr	r2, [r3, #8]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	409a      	lsls	r2, r3
 80077e0:	0013      	movs	r3, r2
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2203      	movs	r2, #3
 80077f4:	4013      	ands	r3, r2
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d123      	bne.n	8007842 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	08da      	lsrs	r2, r3, #3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3208      	adds	r2, #8
 8007802:	0092      	lsls	r2, r2, #2
 8007804:	58d3      	ldr	r3, [r2, r3]
 8007806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2207      	movs	r2, #7
 800780c:	4013      	ands	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	220f      	movs	r2, #15
 8007812:	409a      	lsls	r2, r3
 8007814:	0013      	movs	r3, r2
 8007816:	43da      	mvns	r2, r3
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	4013      	ands	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	691a      	ldr	r2, [r3, #16]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2107      	movs	r1, #7
 8007826:	400b      	ands	r3, r1
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	409a      	lsls	r2, r3
 800782c:	0013      	movs	r3, r2
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	08da      	lsrs	r2, r3, #3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3208      	adds	r2, #8
 800783c:	0092      	lsls	r2, r2, #2
 800783e:	6939      	ldr	r1, [r7, #16]
 8007840:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	2203      	movs	r2, #3
 800784e:	409a      	lsls	r2, r3
 8007850:	0013      	movs	r3, r2
 8007852:	43da      	mvns	r2, r3
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	4013      	ands	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2203      	movs	r2, #3
 8007860:	401a      	ands	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	409a      	lsls	r2, r3
 8007868:	0013      	movs	r3, r2
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	23c0      	movs	r3, #192	; 0xc0
 800787c:	029b      	lsls	r3, r3, #10
 800787e:	4013      	ands	r3, r2
 8007880:	d100      	bne.n	8007884 <HAL_GPIO_Init+0x174>
 8007882:	e092      	b.n	80079aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007884:	4a50      	ldr	r2, [pc, #320]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	089b      	lsrs	r3, r3, #2
 800788a:	3318      	adds	r3, #24
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	589b      	ldr	r3, [r3, r2]
 8007890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2203      	movs	r2, #3
 8007896:	4013      	ands	r3, r2
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	220f      	movs	r2, #15
 800789c:	409a      	lsls	r2, r3
 800789e:	0013      	movs	r3, r2
 80078a0:	43da      	mvns	r2, r3
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	4013      	ands	r3, r2
 80078a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	23a0      	movs	r3, #160	; 0xa0
 80078ac:	05db      	lsls	r3, r3, #23
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d013      	beq.n	80078da <HAL_GPIO_Init+0x1ca>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a45      	ldr	r2, [pc, #276]	; (80079cc <HAL_GPIO_Init+0x2bc>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00d      	beq.n	80078d6 <HAL_GPIO_Init+0x1c6>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a44      	ldr	r2, [pc, #272]	; (80079d0 <HAL_GPIO_Init+0x2c0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d007      	beq.n	80078d2 <HAL_GPIO_Init+0x1c2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a43      	ldr	r2, [pc, #268]	; (80079d4 <HAL_GPIO_Init+0x2c4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d101      	bne.n	80078ce <HAL_GPIO_Init+0x1be>
 80078ca:	2303      	movs	r3, #3
 80078cc:	e006      	b.n	80078dc <HAL_GPIO_Init+0x1cc>
 80078ce:	2305      	movs	r3, #5
 80078d0:	e004      	b.n	80078dc <HAL_GPIO_Init+0x1cc>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e002      	b.n	80078dc <HAL_GPIO_Init+0x1cc>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <HAL_GPIO_Init+0x1cc>
 80078da:	2300      	movs	r3, #0
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	2103      	movs	r1, #3
 80078e0:	400a      	ands	r2, r1
 80078e2:	00d2      	lsls	r2, r2, #3
 80078e4:	4093      	lsls	r3, r2
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80078ec:	4936      	ldr	r1, [pc, #216]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	089b      	lsrs	r3, r3, #2
 80078f2:	3318      	adds	r3, #24
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80078fa:	4a33      	ldr	r2, [pc, #204]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 80078fc:	2380      	movs	r3, #128	; 0x80
 80078fe:	58d3      	ldr	r3, [r2, r3]
 8007900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	43da      	mvns	r2, r3
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	4013      	ands	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	2380      	movs	r3, #128	; 0x80
 8007912:	025b      	lsls	r3, r3, #9
 8007914:	4013      	ands	r3, r2
 8007916:	d003      	beq.n	8007920 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007920:	4929      	ldr	r1, [pc, #164]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 8007922:	2280      	movs	r2, #128	; 0x80
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8007928:	4a27      	ldr	r2, [pc, #156]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 800792a:	2384      	movs	r3, #132	; 0x84
 800792c:	58d3      	ldr	r3, [r2, r3]
 800792e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	43da      	mvns	r2, r3
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	4013      	ands	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	2380      	movs	r3, #128	; 0x80
 8007940:	029b      	lsls	r3, r3, #10
 8007942:	4013      	ands	r3, r2
 8007944:	d003      	beq.n	800794e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800794e:	491e      	ldr	r1, [pc, #120]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 8007950:	2284      	movs	r2, #132	; 0x84
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007956:	4b1c      	ldr	r3, [pc, #112]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	43da      	mvns	r2, r3
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	4013      	ands	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	2380      	movs	r3, #128	; 0x80
 800796c:	035b      	lsls	r3, r3, #13
 800796e:	4013      	ands	r3, r2
 8007970:	d003      	beq.n	800797a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800797a:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007980:	4b11      	ldr	r3, [pc, #68]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	43da      	mvns	r2, r3
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	4013      	ands	r3, r2
 800798e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	039b      	lsls	r3, r3, #14
 8007998:	4013      	ands	r3, r2
 800799a:	d003      	beq.n	80079a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80079a4:	4b08      	ldr	r3, [pc, #32]	; (80079c8 <HAL_GPIO_Init+0x2b8>)
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	3301      	adds	r3, #1
 80079ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	40da      	lsrs	r2, r3
 80079b8:	1e13      	subs	r3, r2, #0
 80079ba:	d000      	beq.n	80079be <HAL_GPIO_Init+0x2ae>
 80079bc:	e6b0      	b.n	8007720 <HAL_GPIO_Init+0x10>
  }
}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	46c0      	nop			; (mov r8, r8)
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b006      	add	sp, #24
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	40021800 	.word	0x40021800
 80079cc:	50000400 	.word	0x50000400
 80079d0:	50000800 	.word	0x50000800
 80079d4:	50000c00 	.word	0x50000c00

080079d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	0008      	movs	r0, r1
 80079e2:	0011      	movs	r1, r2
 80079e4:	1cbb      	adds	r3, r7, #2
 80079e6:	1c02      	adds	r2, r0, #0
 80079e8:	801a      	strh	r2, [r3, #0]
 80079ea:	1c7b      	adds	r3, r7, #1
 80079ec:	1c0a      	adds	r2, r1, #0
 80079ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079f0:	1c7b      	adds	r3, r7, #1
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079f8:	1cbb      	adds	r3, r7, #2
 80079fa:	881a      	ldrh	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a00:	e003      	b.n	8007a0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a02:	1cbb      	adds	r3, r7, #2
 8007a04:	881a      	ldrh	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b002      	add	sp, #8
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007a1c:	4b19      	ldr	r3, [pc, #100]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a19      	ldr	r2, [pc, #100]	; (8007a88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007a22:	4013      	ands	r3, r2
 8007a24:	0019      	movs	r1, r3
 8007a26:	4b17      	ldr	r3, [pc, #92]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	2380      	movs	r3, #128	; 0x80
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d11f      	bne.n	8007a78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007a38:	4b14      	ldr	r3, [pc, #80]	; (8007a8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	0013      	movs	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	189b      	adds	r3, r3, r2
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	4912      	ldr	r1, [pc, #72]	; (8007a90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007a46:	0018      	movs	r0, r3
 8007a48:	f7f8 fb66 	bl	8000118 <__udivsi3>
 8007a4c:	0003      	movs	r3, r0
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a52:	e008      	b.n	8007a66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e001      	b.n	8007a66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e009      	b.n	8007a7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a66:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007a68:	695a      	ldr	r2, [r3, #20]
 8007a6a:	2380      	movs	r3, #128	; 0x80
 8007a6c:	00db      	lsls	r3, r3, #3
 8007a6e:	401a      	ands	r2, r3
 8007a70:	2380      	movs	r3, #128	; 0x80
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d0ed      	beq.n	8007a54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	b004      	add	sp, #16
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	40007000 	.word	0x40007000
 8007a88:	fffff9ff 	.word	0xfffff9ff
 8007a8c:	20000000 	.word	0x20000000
 8007a90:	000f4240 	.word	0x000f4240

08007a94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007a98:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	23e0      	movs	r3, #224	; 0xe0
 8007a9e:	01db      	lsls	r3, r3, #7
 8007aa0:	4013      	ands	r3, r2
}
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40021000 	.word	0x40021000

08007aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e304      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	d100      	bne.n	8007aca <HAL_RCC_OscConfig+0x1e>
 8007ac8:	e07c      	b.n	8007bc4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007aca:	4bc3      	ldr	r3, [pc, #780]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2238      	movs	r2, #56	; 0x38
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ad4:	4bc0      	ldr	r3, [pc, #768]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2203      	movs	r2, #3
 8007ada:	4013      	ands	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	d102      	bne.n	8007aea <HAL_RCC_OscConfig+0x3e>
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d002      	beq.n	8007af0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d10b      	bne.n	8007b08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af0:	4bb9      	ldr	r3, [pc, #740]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	2380      	movs	r3, #128	; 0x80
 8007af6:	029b      	lsls	r3, r3, #10
 8007af8:	4013      	ands	r3, r2
 8007afa:	d062      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x116>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d15e      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e2df      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	2380      	movs	r3, #128	; 0x80
 8007b0e:	025b      	lsls	r3, r3, #9
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d107      	bne.n	8007b24 <HAL_RCC_OscConfig+0x78>
 8007b14:	4bb0      	ldr	r3, [pc, #704]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4baf      	ldr	r3, [pc, #700]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b1a:	2180      	movs	r1, #128	; 0x80
 8007b1c:	0249      	lsls	r1, r1, #9
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e020      	b.n	8007b66 <HAL_RCC_OscConfig+0xba>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	23a0      	movs	r3, #160	; 0xa0
 8007b2a:	02db      	lsls	r3, r3, #11
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d10e      	bne.n	8007b4e <HAL_RCC_OscConfig+0xa2>
 8007b30:	4ba9      	ldr	r3, [pc, #676]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	4ba8      	ldr	r3, [pc, #672]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b36:	2180      	movs	r1, #128	; 0x80
 8007b38:	02c9      	lsls	r1, r1, #11
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	4ba6      	ldr	r3, [pc, #664]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4ba5      	ldr	r3, [pc, #660]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b44:	2180      	movs	r1, #128	; 0x80
 8007b46:	0249      	lsls	r1, r1, #9
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	e00b      	b.n	8007b66 <HAL_RCC_OscConfig+0xba>
 8007b4e:	4ba2      	ldr	r3, [pc, #648]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4ba1      	ldr	r3, [pc, #644]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b54:	49a1      	ldr	r1, [pc, #644]	; (8007ddc <HAL_RCC_OscConfig+0x330>)
 8007b56:	400a      	ands	r2, r1
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	4b9f      	ldr	r3, [pc, #636]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4b9e      	ldr	r3, [pc, #632]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b60:	499f      	ldr	r1, [pc, #636]	; (8007de0 <HAL_RCC_OscConfig+0x334>)
 8007b62:	400a      	ands	r2, r1
 8007b64:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d014      	beq.n	8007b98 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6e:	f7ff f9ed 	bl	8006f4c <HAL_GetTick>
 8007b72:	0003      	movs	r3, r0
 8007b74:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b76:	e008      	b.n	8007b8a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b78:	f7ff f9e8 	bl	8006f4c <HAL_GetTick>
 8007b7c:	0002      	movs	r2, r0
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	2b64      	cmp	r3, #100	; 0x64
 8007b84:	d901      	bls.n	8007b8a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e29e      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b8a:	4b93      	ldr	r3, [pc, #588]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	2380      	movs	r3, #128	; 0x80
 8007b90:	029b      	lsls	r3, r3, #10
 8007b92:	4013      	ands	r3, r2
 8007b94:	d0f0      	beq.n	8007b78 <HAL_RCC_OscConfig+0xcc>
 8007b96:	e015      	b.n	8007bc4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b98:	f7ff f9d8 	bl	8006f4c <HAL_GetTick>
 8007b9c:	0003      	movs	r3, r0
 8007b9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ba0:	e008      	b.n	8007bb4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ba2:	f7ff f9d3 	bl	8006f4c <HAL_GetTick>
 8007ba6:	0002      	movs	r2, r0
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b64      	cmp	r3, #100	; 0x64
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e289      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007bb4:	4b88      	ldr	r3, [pc, #544]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	2380      	movs	r3, #128	; 0x80
 8007bba:	029b      	lsls	r3, r3, #10
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d1f0      	bne.n	8007ba2 <HAL_RCC_OscConfig+0xf6>
 8007bc0:	e000      	b.n	8007bc4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	4013      	ands	r3, r2
 8007bcc:	d100      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x124>
 8007bce:	e099      	b.n	8007d04 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bd0:	4b81      	ldr	r3, [pc, #516]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2238      	movs	r2, #56	; 0x38
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bda:	4b7f      	ldr	r3, [pc, #508]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	2203      	movs	r2, #3
 8007be0:	4013      	ands	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	2b10      	cmp	r3, #16
 8007be8:	d102      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x144>
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d002      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d135      	bne.n	8007c62 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bf6:	4b78      	ldr	r3, [pc, #480]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	2380      	movs	r3, #128	; 0x80
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d005      	beq.n	8007c0e <HAL_RCC_OscConfig+0x162>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e25c      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c0e:	4b72      	ldr	r3, [pc, #456]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	4a74      	ldr	r2, [pc, #464]	; (8007de4 <HAL_RCC_OscConfig+0x338>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	0019      	movs	r1, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	021a      	lsls	r2, r3, #8
 8007c1e:	4b6e      	ldr	r3, [pc, #440]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007c20:	430a      	orrs	r2, r1
 8007c22:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d112      	bne.n	8007c50 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007c2a:	4b6b      	ldr	r3, [pc, #428]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a6e      	ldr	r2, [pc, #440]	; (8007de8 <HAL_RCC_OscConfig+0x33c>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	0019      	movs	r1, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	4b67      	ldr	r3, [pc, #412]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007c3e:	4b66      	ldr	r3, [pc, #408]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	0adb      	lsrs	r3, r3, #11
 8007c44:	2207      	movs	r2, #7
 8007c46:	4013      	ands	r3, r2
 8007c48:	4a68      	ldr	r2, [pc, #416]	; (8007dec <HAL_RCC_OscConfig+0x340>)
 8007c4a:	40da      	lsrs	r2, r3
 8007c4c:	4b68      	ldr	r3, [pc, #416]	; (8007df0 <HAL_RCC_OscConfig+0x344>)
 8007c4e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007c50:	4b68      	ldr	r3, [pc, #416]	; (8007df4 <HAL_RCC_OscConfig+0x348>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	0018      	movs	r0, r3
 8007c56:	f7ff f91d 	bl	8006e94 <HAL_InitTick>
 8007c5a:	1e03      	subs	r3, r0, #0
 8007c5c:	d051      	beq.n	8007d02 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e232      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d030      	beq.n	8007ccc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007c6a:	4b5b      	ldr	r3, [pc, #364]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a5e      	ldr	r2, [pc, #376]	; (8007de8 <HAL_RCC_OscConfig+0x33c>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	0019      	movs	r1, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	4b57      	ldr	r3, [pc, #348]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007c7e:	4b56      	ldr	r3, [pc, #344]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b55      	ldr	r3, [pc, #340]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007c84:	2180      	movs	r1, #128	; 0x80
 8007c86:	0049      	lsls	r1, r1, #1
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8c:	f7ff f95e 	bl	8006f4c <HAL_GetTick>
 8007c90:	0003      	movs	r3, r0
 8007c92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c94:	e008      	b.n	8007ca8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c96:	f7ff f959 	bl	8006f4c <HAL_GetTick>
 8007c9a:	0002      	movs	r2, r0
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e20f      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ca8:	4b4b      	ldr	r3, [pc, #300]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	2380      	movs	r3, #128	; 0x80
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	d0f0      	beq.n	8007c96 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cb4:	4b48      	ldr	r3, [pc, #288]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a4a      	ldr	r2, [pc, #296]	; (8007de4 <HAL_RCC_OscConfig+0x338>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	0019      	movs	r1, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	021a      	lsls	r2, r3, #8
 8007cc4:	4b44      	ldr	r3, [pc, #272]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
 8007cca:	e01b      	b.n	8007d04 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007ccc:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	4b41      	ldr	r3, [pc, #260]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007cd2:	4949      	ldr	r1, [pc, #292]	; (8007df8 <HAL_RCC_OscConfig+0x34c>)
 8007cd4:	400a      	ands	r2, r1
 8007cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd8:	f7ff f938 	bl	8006f4c <HAL_GetTick>
 8007cdc:	0003      	movs	r3, r0
 8007cde:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ce0:	e008      	b.n	8007cf4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ce2:	f7ff f933 	bl	8006f4c <HAL_GetTick>
 8007ce6:	0002      	movs	r2, r0
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e1e9      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007cf4:	4b38      	ldr	r3, [pc, #224]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	d1f0      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x236>
 8007d00:	e000      	b.n	8007d04 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2208      	movs	r2, #8
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d047      	beq.n	8007d9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007d0e:	4b32      	ldr	r3, [pc, #200]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	2238      	movs	r2, #56	; 0x38
 8007d14:	4013      	ands	r3, r2
 8007d16:	2b18      	cmp	r3, #24
 8007d18:	d10a      	bne.n	8007d30 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007d1a:	4b2f      	ldr	r3, [pc, #188]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1e:	2202      	movs	r2, #2
 8007d20:	4013      	ands	r3, r2
 8007d22:	d03c      	beq.n	8007d9e <HAL_RCC_OscConfig+0x2f2>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d138      	bne.n	8007d9e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e1cb      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d019      	beq.n	8007d6c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007d38:	4b27      	ldr	r3, [pc, #156]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007d3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d3c:	4b26      	ldr	r3, [pc, #152]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007d3e:	2101      	movs	r1, #1
 8007d40:	430a      	orrs	r2, r1
 8007d42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d44:	f7ff f902 	bl	8006f4c <HAL_GetTick>
 8007d48:	0003      	movs	r3, r0
 8007d4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d4c:	e008      	b.n	8007d60 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d4e:	f7ff f8fd 	bl	8006f4c <HAL_GetTick>
 8007d52:	0002      	movs	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e1b3      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d60:	4b1d      	ldr	r3, [pc, #116]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d64:	2202      	movs	r2, #2
 8007d66:	4013      	ands	r3, r2
 8007d68:	d0f1      	beq.n	8007d4e <HAL_RCC_OscConfig+0x2a2>
 8007d6a:	e018      	b.n	8007d9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007d6c:	4b1a      	ldr	r3, [pc, #104]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007d6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d70:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007d72:	2101      	movs	r1, #1
 8007d74:	438a      	bics	r2, r1
 8007d76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7ff f8e8 	bl	8006f4c <HAL_GetTick>
 8007d7c:	0003      	movs	r3, r0
 8007d7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d80:	e008      	b.n	8007d94 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d82:	f7ff f8e3 	bl	8006f4c <HAL_GetTick>
 8007d86:	0002      	movs	r2, r0
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e199      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007d94:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d98:	2202      	movs	r2, #2
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d1f1      	bne.n	8007d82 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2204      	movs	r2, #4
 8007da4:	4013      	ands	r3, r2
 8007da6:	d100      	bne.n	8007daa <HAL_RCC_OscConfig+0x2fe>
 8007da8:	e0c6      	b.n	8007f38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007daa:	231f      	movs	r3, #31
 8007dac:	18fb      	adds	r3, r7, r3
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007db2:	4b09      	ldr	r3, [pc, #36]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	2238      	movs	r2, #56	; 0x38
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d11e      	bne.n	8007dfc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007dbe:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <HAL_RCC_OscConfig+0x32c>)
 8007dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	d100      	bne.n	8007dca <HAL_RCC_OscConfig+0x31e>
 8007dc8:	e0b6      	b.n	8007f38 <HAL_RCC_OscConfig+0x48c>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d000      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x328>
 8007dd2:	e0b1      	b.n	8007f38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e177      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	fffeffff 	.word	0xfffeffff
 8007de0:	fffbffff 	.word	0xfffbffff
 8007de4:	ffff80ff 	.word	0xffff80ff
 8007de8:	ffffc7ff 	.word	0xffffc7ff
 8007dec:	00f42400 	.word	0x00f42400
 8007df0:	20000000 	.word	0x20000000
 8007df4:	200000ec 	.word	0x200000ec
 8007df8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007dfc:	4bb4      	ldr	r3, [pc, #720]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e00:	2380      	movs	r3, #128	; 0x80
 8007e02:	055b      	lsls	r3, r3, #21
 8007e04:	4013      	ands	r3, r2
 8007e06:	d101      	bne.n	8007e0c <HAL_RCC_OscConfig+0x360>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <HAL_RCC_OscConfig+0x362>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d011      	beq.n	8007e36 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007e12:	4baf      	ldr	r3, [pc, #700]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e16:	4bae      	ldr	r3, [pc, #696]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007e18:	2180      	movs	r1, #128	; 0x80
 8007e1a:	0549      	lsls	r1, r1, #21
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e20:	4bab      	ldr	r3, [pc, #684]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e24:	2380      	movs	r3, #128	; 0x80
 8007e26:	055b      	lsls	r3, r3, #21
 8007e28:	4013      	ands	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007e2e:	231f      	movs	r3, #31
 8007e30:	18fb      	adds	r3, r7, r3
 8007e32:	2201      	movs	r2, #1
 8007e34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e36:	4ba7      	ldr	r3, [pc, #668]	; (80080d4 <HAL_RCC_OscConfig+0x628>)
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	2380      	movs	r3, #128	; 0x80
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	4013      	ands	r3, r2
 8007e40:	d11a      	bne.n	8007e78 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e42:	4ba4      	ldr	r3, [pc, #656]	; (80080d4 <HAL_RCC_OscConfig+0x628>)
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	4ba3      	ldr	r3, [pc, #652]	; (80080d4 <HAL_RCC_OscConfig+0x628>)
 8007e48:	2180      	movs	r1, #128	; 0x80
 8007e4a:	0049      	lsls	r1, r1, #1
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007e50:	f7ff f87c 	bl	8006f4c <HAL_GetTick>
 8007e54:	0003      	movs	r3, r0
 8007e56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e5a:	f7ff f877 	bl	8006f4c <HAL_GetTick>
 8007e5e:	0002      	movs	r2, r0
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e12d      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e6c:	4b99      	ldr	r3, [pc, #612]	; (80080d4 <HAL_RCC_OscConfig+0x628>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	2380      	movs	r3, #128	; 0x80
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	4013      	ands	r3, r2
 8007e76:	d0f0      	beq.n	8007e5a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d106      	bne.n	8007e8e <HAL_RCC_OscConfig+0x3e2>
 8007e80:	4b93      	ldr	r3, [pc, #588]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007e82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e84:	4b92      	ldr	r3, [pc, #584]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007e86:	2101      	movs	r1, #1
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e8c:	e01c      	b.n	8007ec8 <HAL_RCC_OscConfig+0x41c>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d10c      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x404>
 8007e96:	4b8e      	ldr	r3, [pc, #568]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007e98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e9a:	4b8d      	ldr	r3, [pc, #564]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007e9c:	2104      	movs	r1, #4
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ea2:	4b8b      	ldr	r3, [pc, #556]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007ea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ea6:	4b8a      	ldr	r3, [pc, #552]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	65da      	str	r2, [r3, #92]	; 0x5c
 8007eae:	e00b      	b.n	8007ec8 <HAL_RCC_OscConfig+0x41c>
 8007eb0:	4b87      	ldr	r3, [pc, #540]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007eb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007eb4:	4b86      	ldr	r3, [pc, #536]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	438a      	bics	r2, r1
 8007eba:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ebc:	4b84      	ldr	r3, [pc, #528]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ec0:	4b83      	ldr	r3, [pc, #524]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007ec2:	2104      	movs	r1, #4
 8007ec4:	438a      	bics	r2, r1
 8007ec6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d014      	beq.n	8007efa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed0:	f7ff f83c 	bl	8006f4c <HAL_GetTick>
 8007ed4:	0003      	movs	r3, r0
 8007ed6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ed8:	e009      	b.n	8007eee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eda:	f7ff f837 	bl	8006f4c <HAL_GetTick>
 8007ede:	0002      	movs	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	4a7c      	ldr	r2, [pc, #496]	; (80080d8 <HAL_RCC_OscConfig+0x62c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e0ec      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eee:	4b78      	ldr	r3, [pc, #480]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	d0f0      	beq.n	8007eda <HAL_RCC_OscConfig+0x42e>
 8007ef8:	e013      	b.n	8007f22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efa:	f7ff f827 	bl	8006f4c <HAL_GetTick>
 8007efe:	0003      	movs	r3, r0
 8007f00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f02:	e009      	b.n	8007f18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f04:	f7ff f822 	bl	8006f4c <HAL_GetTick>
 8007f08:	0002      	movs	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	4a72      	ldr	r2, [pc, #456]	; (80080d8 <HAL_RCC_OscConfig+0x62c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d901      	bls.n	8007f18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e0d7      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f18:	4b6d      	ldr	r3, [pc, #436]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	4013      	ands	r3, r2
 8007f20:	d1f0      	bne.n	8007f04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007f22:	231f      	movs	r3, #31
 8007f24:	18fb      	adds	r3, r7, r3
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d105      	bne.n	8007f38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007f2c:	4b68      	ldr	r3, [pc, #416]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f30:	4b67      	ldr	r3, [pc, #412]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007f32:	496a      	ldr	r1, [pc, #424]	; (80080dc <HAL_RCC_OscConfig+0x630>)
 8007f34:	400a      	ands	r2, r1
 8007f36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d100      	bne.n	8007f42 <HAL_RCC_OscConfig+0x496>
 8007f40:	e0c1      	b.n	80080c6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f42:	4b63      	ldr	r3, [pc, #396]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2238      	movs	r2, #56	; 0x38
 8007f48:	4013      	ands	r3, r2
 8007f4a:	2b10      	cmp	r3, #16
 8007f4c:	d100      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4a4>
 8007f4e:	e081      	b.n	8008054 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d156      	bne.n	8008006 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f58:	4b5d      	ldr	r3, [pc, #372]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4b5c      	ldr	r3, [pc, #368]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007f5e:	4960      	ldr	r1, [pc, #384]	; (80080e0 <HAL_RCC_OscConfig+0x634>)
 8007f60:	400a      	ands	r2, r1
 8007f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f64:	f7fe fff2 	bl	8006f4c <HAL_GetTick>
 8007f68:	0003      	movs	r3, r0
 8007f6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f6c:	e008      	b.n	8007f80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f6e:	f7fe ffed 	bl	8006f4c <HAL_GetTick>
 8007f72:	0002      	movs	r2, r0
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e0a3      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f80:	4b53      	ldr	r3, [pc, #332]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	049b      	lsls	r3, r3, #18
 8007f88:	4013      	ands	r3, r2
 8007f8a:	d1f0      	bne.n	8007f6e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f8c:	4b50      	ldr	r3, [pc, #320]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	4a54      	ldr	r2, [pc, #336]	; (80080e4 <HAL_RCC_OscConfig+0x638>)
 8007f92:	4013      	ands	r3, r2
 8007f94:	0019      	movs	r1, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1a      	ldr	r2, [r3, #32]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	4b45      	ldr	r3, [pc, #276]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fc0:	4b43      	ldr	r3, [pc, #268]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	4b42      	ldr	r3, [pc, #264]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007fc6:	2180      	movs	r1, #128	; 0x80
 8007fc8:	0449      	lsls	r1, r1, #17
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007fce:	4b40      	ldr	r3, [pc, #256]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	4b3f      	ldr	r3, [pc, #252]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007fd4:	2180      	movs	r1, #128	; 0x80
 8007fd6:	0549      	lsls	r1, r1, #21
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fdc:	f7fe ffb6 	bl	8006f4c <HAL_GetTick>
 8007fe0:	0003      	movs	r3, r0
 8007fe2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fe6:	f7fe ffb1 	bl	8006f4c <HAL_GetTick>
 8007fea:	0002      	movs	r2, r0
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e067      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ff8:	4b35      	ldr	r3, [pc, #212]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	2380      	movs	r3, #128	; 0x80
 8007ffe:	049b      	lsls	r3, r3, #18
 8008000:	4013      	ands	r3, r2
 8008002:	d0f0      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x53a>
 8008004:	e05f      	b.n	80080c6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008006:	4b32      	ldr	r3, [pc, #200]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b31      	ldr	r3, [pc, #196]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 800800c:	4934      	ldr	r1, [pc, #208]	; (80080e0 <HAL_RCC_OscConfig+0x634>)
 800800e:	400a      	ands	r2, r1
 8008010:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008012:	4b2f      	ldr	r3, [pc, #188]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	4b2e      	ldr	r3, [pc, #184]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8008018:	2103      	movs	r1, #3
 800801a:	438a      	bics	r2, r1
 800801c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800801e:	4b2c      	ldr	r3, [pc, #176]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	4b2b      	ldr	r3, [pc, #172]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8008024:	4930      	ldr	r1, [pc, #192]	; (80080e8 <HAL_RCC_OscConfig+0x63c>)
 8008026:	400a      	ands	r2, r1
 8008028:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802a:	f7fe ff8f 	bl	8006f4c <HAL_GetTick>
 800802e:	0003      	movs	r3, r0
 8008030:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008034:	f7fe ff8a 	bl	8006f4c <HAL_GetTick>
 8008038:	0002      	movs	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e040      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008046:	4b22      	ldr	r3, [pc, #136]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	2380      	movs	r3, #128	; 0x80
 800804c:	049b      	lsls	r3, r3, #18
 800804e:	4013      	ands	r3, r2
 8008050:	d1f0      	bne.n	8008034 <HAL_RCC_OscConfig+0x588>
 8008052:	e038      	b.n	80080c6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e033      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008060:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <HAL_RCC_OscConfig+0x624>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2203      	movs	r2, #3
 800806a:	401a      	ands	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	429a      	cmp	r2, r3
 8008072:	d126      	bne.n	80080c2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2270      	movs	r2, #112	; 0x70
 8008078:	401a      	ands	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800807e:	429a      	cmp	r2, r3
 8008080:	d11f      	bne.n	80080c2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	23fe      	movs	r3, #254	; 0xfe
 8008086:	01db      	lsls	r3, r3, #7
 8008088:	401a      	ands	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008090:	429a      	cmp	r2, r3
 8008092:	d116      	bne.n	80080c2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	23f8      	movs	r3, #248	; 0xf8
 8008098:	039b      	lsls	r3, r3, #14
 800809a:	401a      	ands	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d10e      	bne.n	80080c2 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	23e0      	movs	r3, #224	; 0xe0
 80080a8:	051b      	lsls	r3, r3, #20
 80080aa:	401a      	ands	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d106      	bne.n	80080c2 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	0f5b      	lsrs	r3, r3, #29
 80080b8:	075a      	lsls	r2, r3, #29
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80080be:	429a      	cmp	r2, r3
 80080c0:	d001      	beq.n	80080c6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e000      	b.n	80080c8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	0018      	movs	r0, r3
 80080ca:	46bd      	mov	sp, r7
 80080cc:	b008      	add	sp, #32
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	40021000 	.word	0x40021000
 80080d4:	40007000 	.word	0x40007000
 80080d8:	00001388 	.word	0x00001388
 80080dc:	efffffff 	.word	0xefffffff
 80080e0:	feffffff 	.word	0xfeffffff
 80080e4:	11c1808c 	.word	0x11c1808c
 80080e8:	eefeffff 	.word	0xeefeffff

080080ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e0e9      	b.n	80082d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008100:	4b76      	ldr	r3, [pc, #472]	; (80082dc <HAL_RCC_ClockConfig+0x1f0>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2207      	movs	r2, #7
 8008106:	4013      	ands	r3, r2
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d91e      	bls.n	800814c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800810e:	4b73      	ldr	r3, [pc, #460]	; (80082dc <HAL_RCC_ClockConfig+0x1f0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2207      	movs	r2, #7
 8008114:	4393      	bics	r3, r2
 8008116:	0019      	movs	r1, r3
 8008118:	4b70      	ldr	r3, [pc, #448]	; (80082dc <HAL_RCC_ClockConfig+0x1f0>)
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008120:	f7fe ff14 	bl	8006f4c <HAL_GetTick>
 8008124:	0003      	movs	r3, r0
 8008126:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008128:	e009      	b.n	800813e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800812a:	f7fe ff0f 	bl	8006f4c <HAL_GetTick>
 800812e:	0002      	movs	r2, r0
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	4a6a      	ldr	r2, [pc, #424]	; (80082e0 <HAL_RCC_ClockConfig+0x1f4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d901      	bls.n	800813e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e0ca      	b.n	80082d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800813e:	4b67      	ldr	r3, [pc, #412]	; (80082dc <HAL_RCC_ClockConfig+0x1f0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2207      	movs	r2, #7
 8008144:	4013      	ands	r3, r2
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d1ee      	bne.n	800812a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2202      	movs	r2, #2
 8008152:	4013      	ands	r3, r2
 8008154:	d015      	beq.n	8008182 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2204      	movs	r2, #4
 800815c:	4013      	ands	r3, r2
 800815e:	d006      	beq.n	800816e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008160:	4b60      	ldr	r3, [pc, #384]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008162:	689a      	ldr	r2, [r3, #8]
 8008164:	4b5f      	ldr	r3, [pc, #380]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008166:	21e0      	movs	r1, #224	; 0xe0
 8008168:	01c9      	lsls	r1, r1, #7
 800816a:	430a      	orrs	r2, r1
 800816c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800816e:	4b5d      	ldr	r3, [pc, #372]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	4a5d      	ldr	r2, [pc, #372]	; (80082e8 <HAL_RCC_ClockConfig+0x1fc>)
 8008174:	4013      	ands	r3, r2
 8008176:	0019      	movs	r1, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	4b59      	ldr	r3, [pc, #356]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 800817e:	430a      	orrs	r2, r1
 8008180:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2201      	movs	r2, #1
 8008188:	4013      	ands	r3, r2
 800818a:	d057      	beq.n	800823c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d107      	bne.n	80081a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008194:	4b53      	ldr	r3, [pc, #332]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	2380      	movs	r3, #128	; 0x80
 800819a:	029b      	lsls	r3, r3, #10
 800819c:	4013      	ands	r3, r2
 800819e:	d12b      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e097      	b.n	80082d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d107      	bne.n	80081bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081ac:	4b4d      	ldr	r3, [pc, #308]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	2380      	movs	r3, #128	; 0x80
 80081b2:	049b      	lsls	r3, r3, #18
 80081b4:	4013      	ands	r3, r2
 80081b6:	d11f      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e08b      	b.n	80082d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d107      	bne.n	80081d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081c4:	4b47      	ldr	r3, [pc, #284]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	2380      	movs	r3, #128	; 0x80
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	4013      	ands	r3, r2
 80081ce:	d113      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e07f      	b.n	80082d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d106      	bne.n	80081ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081dc:	4b41      	ldr	r3, [pc, #260]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 80081de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e0:	2202      	movs	r2, #2
 80081e2:	4013      	ands	r3, r2
 80081e4:	d108      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e074      	b.n	80082d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081ea:	4b3e      	ldr	r3, [pc, #248]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 80081ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ee:	2202      	movs	r2, #2
 80081f0:	4013      	ands	r3, r2
 80081f2:	d101      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e06d      	b.n	80082d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081f8:	4b3a      	ldr	r3, [pc, #232]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	2207      	movs	r2, #7
 80081fe:	4393      	bics	r3, r2
 8008200:	0019      	movs	r1, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b37      	ldr	r3, [pc, #220]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008208:	430a      	orrs	r2, r1
 800820a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800820c:	f7fe fe9e 	bl	8006f4c <HAL_GetTick>
 8008210:	0003      	movs	r3, r0
 8008212:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008214:	e009      	b.n	800822a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008216:	f7fe fe99 	bl	8006f4c <HAL_GetTick>
 800821a:	0002      	movs	r2, r0
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	4a2f      	ldr	r2, [pc, #188]	; (80082e0 <HAL_RCC_ClockConfig+0x1f4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d901      	bls.n	800822a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e054      	b.n	80082d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800822a:	4b2e      	ldr	r3, [pc, #184]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	2238      	movs	r2, #56	; 0x38
 8008230:	401a      	ands	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	429a      	cmp	r2, r3
 800823a:	d1ec      	bne.n	8008216 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800823c:	4b27      	ldr	r3, [pc, #156]	; (80082dc <HAL_RCC_ClockConfig+0x1f0>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2207      	movs	r2, #7
 8008242:	4013      	ands	r3, r2
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d21e      	bcs.n	8008288 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800824a:	4b24      	ldr	r3, [pc, #144]	; (80082dc <HAL_RCC_ClockConfig+0x1f0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2207      	movs	r2, #7
 8008250:	4393      	bics	r3, r2
 8008252:	0019      	movs	r1, r3
 8008254:	4b21      	ldr	r3, [pc, #132]	; (80082dc <HAL_RCC_ClockConfig+0x1f0>)
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800825c:	f7fe fe76 	bl	8006f4c <HAL_GetTick>
 8008260:	0003      	movs	r3, r0
 8008262:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008264:	e009      	b.n	800827a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008266:	f7fe fe71 	bl	8006f4c <HAL_GetTick>
 800826a:	0002      	movs	r2, r0
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	4a1b      	ldr	r2, [pc, #108]	; (80082e0 <HAL_RCC_ClockConfig+0x1f4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d901      	bls.n	800827a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e02c      	b.n	80082d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800827a:	4b18      	ldr	r3, [pc, #96]	; (80082dc <HAL_RCC_ClockConfig+0x1f0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2207      	movs	r2, #7
 8008280:	4013      	ands	r3, r2
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d1ee      	bne.n	8008266 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2204      	movs	r2, #4
 800828e:	4013      	ands	r3, r2
 8008290:	d009      	beq.n	80082a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008292:	4b14      	ldr	r3, [pc, #80]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	4a15      	ldr	r2, [pc, #84]	; (80082ec <HAL_RCC_ClockConfig+0x200>)
 8008298:	4013      	ands	r3, r2
 800829a:	0019      	movs	r1, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	4b10      	ldr	r3, [pc, #64]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 80082a2:	430a      	orrs	r2, r1
 80082a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80082a6:	f000 f829 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 80082aa:	0001      	movs	r1, r0
 80082ac:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <HAL_RCC_ClockConfig+0x1f8>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	0a1b      	lsrs	r3, r3, #8
 80082b2:	220f      	movs	r2, #15
 80082b4:	401a      	ands	r2, r3
 80082b6:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <HAL_RCC_ClockConfig+0x204>)
 80082b8:	0092      	lsls	r2, r2, #2
 80082ba:	58d3      	ldr	r3, [r2, r3]
 80082bc:	221f      	movs	r2, #31
 80082be:	4013      	ands	r3, r2
 80082c0:	000a      	movs	r2, r1
 80082c2:	40da      	lsrs	r2, r3
 80082c4:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <HAL_RCC_ClockConfig+0x208>)
 80082c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <HAL_RCC_ClockConfig+0x20c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	0018      	movs	r0, r3
 80082ce:	f7fe fde1 	bl	8006e94 <HAL_InitTick>
 80082d2:	0003      	movs	r3, r0
}
 80082d4:	0018      	movs	r0, r3
 80082d6:	46bd      	mov	sp, r7
 80082d8:	b004      	add	sp, #16
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	40022000 	.word	0x40022000
 80082e0:	00001388 	.word	0x00001388
 80082e4:	40021000 	.word	0x40021000
 80082e8:	fffff0ff 	.word	0xfffff0ff
 80082ec:	ffff8fff 	.word	0xffff8fff
 80082f0:	0800ad60 	.word	0x0800ad60
 80082f4:	20000000 	.word	0x20000000
 80082f8:	200000ec 	.word	0x200000ec

080082fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008302:	4b3c      	ldr	r3, [pc, #240]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2238      	movs	r2, #56	; 0x38
 8008308:	4013      	ands	r3, r2
 800830a:	d10f      	bne.n	800832c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800830c:	4b39      	ldr	r3, [pc, #228]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	0adb      	lsrs	r3, r3, #11
 8008312:	2207      	movs	r2, #7
 8008314:	4013      	ands	r3, r2
 8008316:	2201      	movs	r2, #1
 8008318:	409a      	lsls	r2, r3
 800831a:	0013      	movs	r3, r2
 800831c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	4835      	ldr	r0, [pc, #212]	; (80083f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008322:	f7f7 fef9 	bl	8000118 <__udivsi3>
 8008326:	0003      	movs	r3, r0
 8008328:	613b      	str	r3, [r7, #16]
 800832a:	e05d      	b.n	80083e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800832c:	4b31      	ldr	r3, [pc, #196]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	2238      	movs	r2, #56	; 0x38
 8008332:	4013      	ands	r3, r2
 8008334:	2b08      	cmp	r3, #8
 8008336:	d102      	bne.n	800833e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008338:	4b30      	ldr	r3, [pc, #192]	; (80083fc <HAL_RCC_GetSysClockFreq+0x100>)
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	e054      	b.n	80083e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800833e:	4b2d      	ldr	r3, [pc, #180]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	2238      	movs	r2, #56	; 0x38
 8008344:	4013      	ands	r3, r2
 8008346:	2b10      	cmp	r3, #16
 8008348:	d138      	bne.n	80083bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800834a:	4b2a      	ldr	r3, [pc, #168]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	2203      	movs	r2, #3
 8008350:	4013      	ands	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008354:	4b27      	ldr	r3, [pc, #156]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	091b      	lsrs	r3, r3, #4
 800835a:	2207      	movs	r2, #7
 800835c:	4013      	ands	r3, r2
 800835e:	3301      	adds	r3, #1
 8008360:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b03      	cmp	r3, #3
 8008366:	d10d      	bne.n	8008384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	4824      	ldr	r0, [pc, #144]	; (80083fc <HAL_RCC_GetSysClockFreq+0x100>)
 800836c:	f7f7 fed4 	bl	8000118 <__udivsi3>
 8008370:	0003      	movs	r3, r0
 8008372:	0019      	movs	r1, r3
 8008374:	4b1f      	ldr	r3, [pc, #124]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	0a1b      	lsrs	r3, r3, #8
 800837a:	227f      	movs	r2, #127	; 0x7f
 800837c:	4013      	ands	r3, r2
 800837e:	434b      	muls	r3, r1
 8008380:	617b      	str	r3, [r7, #20]
        break;
 8008382:	e00d      	b.n	80083a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	481c      	ldr	r0, [pc, #112]	; (80083f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008388:	f7f7 fec6 	bl	8000118 <__udivsi3>
 800838c:	0003      	movs	r3, r0
 800838e:	0019      	movs	r1, r3
 8008390:	4b18      	ldr	r3, [pc, #96]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	0a1b      	lsrs	r3, r3, #8
 8008396:	227f      	movs	r2, #127	; 0x7f
 8008398:	4013      	ands	r3, r2
 800839a:	434b      	muls	r3, r1
 800839c:	617b      	str	r3, [r7, #20]
        break;
 800839e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80083a0:	4b14      	ldr	r3, [pc, #80]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	0f5b      	lsrs	r3, r3, #29
 80083a6:	2207      	movs	r2, #7
 80083a8:	4013      	ands	r3, r2
 80083aa:	3301      	adds	r3, #1
 80083ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	6978      	ldr	r0, [r7, #20]
 80083b2:	f7f7 feb1 	bl	8000118 <__udivsi3>
 80083b6:	0003      	movs	r3, r0
 80083b8:	613b      	str	r3, [r7, #16]
 80083ba:	e015      	b.n	80083e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80083bc:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2238      	movs	r2, #56	; 0x38
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d103      	bne.n	80083d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80083c8:	2380      	movs	r3, #128	; 0x80
 80083ca:	021b      	lsls	r3, r3, #8
 80083cc:	613b      	str	r3, [r7, #16]
 80083ce:	e00b      	b.n	80083e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80083d0:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	2238      	movs	r2, #56	; 0x38
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b18      	cmp	r3, #24
 80083da:	d103      	bne.n	80083e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80083dc:	23fa      	movs	r3, #250	; 0xfa
 80083de:	01db      	lsls	r3, r3, #7
 80083e0:	613b      	str	r3, [r7, #16]
 80083e2:	e001      	b.n	80083e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80083e8:	693b      	ldr	r3, [r7, #16]
}
 80083ea:	0018      	movs	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	b006      	add	sp, #24
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	40021000 	.word	0x40021000
 80083f8:	00f42400 	.word	0x00f42400
 80083fc:	007a1200 	.word	0x007a1200

08008400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008404:	4b02      	ldr	r3, [pc, #8]	; (8008410 <HAL_RCC_GetHCLKFreq+0x10>)
 8008406:	681b      	ldr	r3, [r3, #0]
}
 8008408:	0018      	movs	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	46c0      	nop			; (mov r8, r8)
 8008410:	20000000 	.word	0x20000000

08008414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008414:	b5b0      	push	{r4, r5, r7, lr}
 8008416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008418:	f7ff fff2 	bl	8008400 <HAL_RCC_GetHCLKFreq>
 800841c:	0004      	movs	r4, r0
 800841e:	f7ff fb39 	bl	8007a94 <LL_RCC_GetAPB1Prescaler>
 8008422:	0003      	movs	r3, r0
 8008424:	0b1a      	lsrs	r2, r3, #12
 8008426:	4b05      	ldr	r3, [pc, #20]	; (800843c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008428:	0092      	lsls	r2, r2, #2
 800842a:	58d3      	ldr	r3, [r2, r3]
 800842c:	221f      	movs	r2, #31
 800842e:	4013      	ands	r3, r2
 8008430:	40dc      	lsrs	r4, r3
 8008432:	0023      	movs	r3, r4
}
 8008434:	0018      	movs	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	bdb0      	pop	{r4, r5, r7, pc}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	0800ada0 	.word	0x0800ada0

08008440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008448:	2313      	movs	r3, #19
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008450:	2312      	movs	r3, #18
 8008452:	18fb      	adds	r3, r7, r3
 8008454:	2200      	movs	r2, #0
 8008456:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	2380      	movs	r3, #128	; 0x80
 800845e:	029b      	lsls	r3, r3, #10
 8008460:	4013      	ands	r3, r2
 8008462:	d100      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008464:	e0a3      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008466:	2011      	movs	r0, #17
 8008468:	183b      	adds	r3, r7, r0
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800846e:	4bc3      	ldr	r3, [pc, #780]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008472:	2380      	movs	r3, #128	; 0x80
 8008474:	055b      	lsls	r3, r3, #21
 8008476:	4013      	ands	r3, r2
 8008478:	d110      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800847a:	4bc0      	ldr	r3, [pc, #768]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800847c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800847e:	4bbf      	ldr	r3, [pc, #764]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008480:	2180      	movs	r1, #128	; 0x80
 8008482:	0549      	lsls	r1, r1, #21
 8008484:	430a      	orrs	r2, r1
 8008486:	63da      	str	r2, [r3, #60]	; 0x3c
 8008488:	4bbc      	ldr	r3, [pc, #752]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800848a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800848c:	2380      	movs	r3, #128	; 0x80
 800848e:	055b      	lsls	r3, r3, #21
 8008490:	4013      	ands	r3, r2
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008496:	183b      	adds	r3, r7, r0
 8008498:	2201      	movs	r2, #1
 800849a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800849c:	4bb8      	ldr	r3, [pc, #736]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	4bb7      	ldr	r3, [pc, #732]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80084a2:	2180      	movs	r1, #128	; 0x80
 80084a4:	0049      	lsls	r1, r1, #1
 80084a6:	430a      	orrs	r2, r1
 80084a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084aa:	f7fe fd4f 	bl	8006f4c <HAL_GetTick>
 80084ae:	0003      	movs	r3, r0
 80084b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084b2:	e00b      	b.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084b4:	f7fe fd4a 	bl	8006f4c <HAL_GetTick>
 80084b8:	0002      	movs	r2, r0
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d904      	bls.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80084c2:	2313      	movs	r3, #19
 80084c4:	18fb      	adds	r3, r7, r3
 80084c6:	2203      	movs	r2, #3
 80084c8:	701a      	strb	r2, [r3, #0]
        break;
 80084ca:	e005      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084cc:	4bac      	ldr	r3, [pc, #688]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	2380      	movs	r3, #128	; 0x80
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	4013      	ands	r3, r2
 80084d6:	d0ed      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80084d8:	2313      	movs	r3, #19
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d154      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80084e2:	4ba6      	ldr	r3, [pc, #664]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80084e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80084e6:	23c0      	movs	r3, #192	; 0xc0
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4013      	ands	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d019      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d014      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80084fe:	4b9f      	ldr	r3, [pc, #636]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008502:	4aa0      	ldr	r2, [pc, #640]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008504:	4013      	ands	r3, r2
 8008506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008508:	4b9c      	ldr	r3, [pc, #624]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800850a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800850c:	4b9b      	ldr	r3, [pc, #620]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800850e:	2180      	movs	r1, #128	; 0x80
 8008510:	0249      	lsls	r1, r1, #9
 8008512:	430a      	orrs	r2, r1
 8008514:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008516:	4b99      	ldr	r3, [pc, #612]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008518:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800851a:	4b98      	ldr	r3, [pc, #608]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800851c:	499a      	ldr	r1, [pc, #616]	; (8008788 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800851e:	400a      	ands	r2, r1
 8008520:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008522:	4b96      	ldr	r3, [pc, #600]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2201      	movs	r2, #1
 800852c:	4013      	ands	r3, r2
 800852e:	d016      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008530:	f7fe fd0c 	bl	8006f4c <HAL_GetTick>
 8008534:	0003      	movs	r3, r0
 8008536:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008538:	e00c      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800853a:	f7fe fd07 	bl	8006f4c <HAL_GetTick>
 800853e:	0002      	movs	r2, r0
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	4a91      	ldr	r2, [pc, #580]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d904      	bls.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800854a:	2313      	movs	r3, #19
 800854c:	18fb      	adds	r3, r7, r3
 800854e:	2203      	movs	r2, #3
 8008550:	701a      	strb	r2, [r3, #0]
            break;
 8008552:	e004      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008554:	4b89      	ldr	r3, [pc, #548]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008558:	2202      	movs	r2, #2
 800855a:	4013      	ands	r3, r2
 800855c:	d0ed      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800855e:	2313      	movs	r3, #19
 8008560:	18fb      	adds	r3, r7, r3
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008568:	4b84      	ldr	r3, [pc, #528]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800856a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800856c:	4a85      	ldr	r2, [pc, #532]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800856e:	4013      	ands	r3, r2
 8008570:	0019      	movs	r1, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008576:	4b81      	ldr	r3, [pc, #516]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008578:	430a      	orrs	r2, r1
 800857a:	65da      	str	r2, [r3, #92]	; 0x5c
 800857c:	e00c      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800857e:	2312      	movs	r3, #18
 8008580:	18fb      	adds	r3, r7, r3
 8008582:	2213      	movs	r2, #19
 8008584:	18ba      	adds	r2, r7, r2
 8008586:	7812      	ldrb	r2, [r2, #0]
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	e005      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800858c:	2312      	movs	r3, #18
 800858e:	18fb      	adds	r3, r7, r3
 8008590:	2213      	movs	r2, #19
 8008592:	18ba      	adds	r2, r7, r2
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008598:	2311      	movs	r3, #17
 800859a:	18fb      	adds	r3, r7, r3
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d105      	bne.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085a2:	4b76      	ldr	r3, [pc, #472]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80085a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085a6:	4b75      	ldr	r3, [pc, #468]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80085a8:	4979      	ldr	r1, [pc, #484]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80085aa:	400a      	ands	r2, r1
 80085ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2201      	movs	r2, #1
 80085b4:	4013      	ands	r3, r2
 80085b6:	d009      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085b8:	4b70      	ldr	r3, [pc, #448]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80085ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085bc:	2203      	movs	r2, #3
 80085be:	4393      	bics	r3, r2
 80085c0:	0019      	movs	r1, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	4b6d      	ldr	r3, [pc, #436]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80085c8:	430a      	orrs	r2, r1
 80085ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2202      	movs	r2, #2
 80085d2:	4013      	ands	r3, r2
 80085d4:	d009      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80085d6:	4b69      	ldr	r3, [pc, #420]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80085d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085da:	220c      	movs	r2, #12
 80085dc:	4393      	bics	r3, r2
 80085de:	0019      	movs	r1, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	4b65      	ldr	r3, [pc, #404]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80085e6:	430a      	orrs	r2, r1
 80085e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2210      	movs	r2, #16
 80085f0:	4013      	ands	r3, r2
 80085f2:	d009      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80085f4:	4b61      	ldr	r3, [pc, #388]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80085f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f8:	4a66      	ldr	r2, [pc, #408]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80085fa:	4013      	ands	r3, r2
 80085fc:	0019      	movs	r1, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	4b5e      	ldr	r3, [pc, #376]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008604:	430a      	orrs	r2, r1
 8008606:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	2380      	movs	r3, #128	; 0x80
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4013      	ands	r3, r2
 8008612:	d009      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008614:	4b59      	ldr	r3, [pc, #356]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008618:	4a5f      	ldr	r2, [pc, #380]	; (8008798 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800861a:	4013      	ands	r3, r2
 800861c:	0019      	movs	r1, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699a      	ldr	r2, [r3, #24]
 8008622:	4b56      	ldr	r3, [pc, #344]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008624:	430a      	orrs	r2, r1
 8008626:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	2380      	movs	r3, #128	; 0x80
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	4013      	ands	r3, r2
 8008632:	d009      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008634:	4b51      	ldr	r3, [pc, #324]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008638:	4a58      	ldr	r2, [pc, #352]	; (800879c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800863a:	4013      	ands	r3, r2
 800863c:	0019      	movs	r1, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69da      	ldr	r2, [r3, #28]
 8008642:	4b4e      	ldr	r3, [pc, #312]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008644:	430a      	orrs	r2, r1
 8008646:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2220      	movs	r2, #32
 800864e:	4013      	ands	r3, r2
 8008650:	d009      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008652:	4b4a      	ldr	r3, [pc, #296]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	4a52      	ldr	r2, [pc, #328]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008658:	4013      	ands	r3, r2
 800865a:	0019      	movs	r1, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	4b46      	ldr	r3, [pc, #280]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008662:	430a      	orrs	r2, r1
 8008664:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	2380      	movs	r3, #128	; 0x80
 800866c:	01db      	lsls	r3, r3, #7
 800866e:	4013      	ands	r3, r2
 8008670:	d015      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008672:	4b42      	ldr	r3, [pc, #264]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	0899      	lsrs	r1, r3, #2
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1a      	ldr	r2, [r3, #32]
 800867e:	4b3f      	ldr	r3, [pc, #252]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008680:	430a      	orrs	r2, r1
 8008682:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a1a      	ldr	r2, [r3, #32]
 8008688:	2380      	movs	r3, #128	; 0x80
 800868a:	05db      	lsls	r3, r3, #23
 800868c:	429a      	cmp	r2, r3
 800868e:	d106      	bne.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008690:	4b3a      	ldr	r3, [pc, #232]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	4b39      	ldr	r3, [pc, #228]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008696:	2180      	movs	r1, #128	; 0x80
 8008698:	0249      	lsls	r1, r1, #9
 800869a:	430a      	orrs	r2, r1
 800869c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	2380      	movs	r3, #128	; 0x80
 80086a4:	031b      	lsls	r3, r3, #12
 80086a6:	4013      	ands	r3, r2
 80086a8:	d009      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086aa:	4b34      	ldr	r3, [pc, #208]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ae:	2240      	movs	r2, #64	; 0x40
 80086b0:	4393      	bics	r3, r2
 80086b2:	0019      	movs	r1, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b8:	4b30      	ldr	r3, [pc, #192]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086ba:	430a      	orrs	r2, r1
 80086bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	2380      	movs	r3, #128	; 0x80
 80086c4:	039b      	lsls	r3, r3, #14
 80086c6:	4013      	ands	r3, r2
 80086c8:	d016      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80086ca:	4b2c      	ldr	r3, [pc, #176]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	4a35      	ldr	r2, [pc, #212]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80086d0:	4013      	ands	r3, r2
 80086d2:	0019      	movs	r1, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086d8:	4b28      	ldr	r3, [pc, #160]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086da:	430a      	orrs	r2, r1
 80086dc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086e2:	2380      	movs	r3, #128	; 0x80
 80086e4:	03db      	lsls	r3, r3, #15
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d106      	bne.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80086ea:	4b24      	ldr	r3, [pc, #144]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	4b23      	ldr	r3, [pc, #140]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80086f0:	2180      	movs	r1, #128	; 0x80
 80086f2:	0449      	lsls	r1, r1, #17
 80086f4:	430a      	orrs	r2, r1
 80086f6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	2380      	movs	r3, #128	; 0x80
 80086fe:	03db      	lsls	r3, r3, #15
 8008700:	4013      	ands	r3, r2
 8008702:	d016      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008704:	4b1d      	ldr	r3, [pc, #116]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008708:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800870a:	4013      	ands	r3, r2
 800870c:	0019      	movs	r1, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008712:	4b1a      	ldr	r3, [pc, #104]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008714:	430a      	orrs	r2, r1
 8008716:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	2380      	movs	r3, #128	; 0x80
 800871e:	045b      	lsls	r3, r3, #17
 8008720:	429a      	cmp	r2, r3
 8008722:	d106      	bne.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008724:	4b15      	ldr	r3, [pc, #84]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008726:	68da      	ldr	r2, [r3, #12]
 8008728:	4b14      	ldr	r3, [pc, #80]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800872a:	2180      	movs	r1, #128	; 0x80
 800872c:	0449      	lsls	r1, r1, #17
 800872e:	430a      	orrs	r2, r1
 8008730:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	2380      	movs	r3, #128	; 0x80
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	4013      	ands	r3, r2
 800873c:	d016      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800873e:	4b0f      	ldr	r3, [pc, #60]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008742:	4a1a      	ldr	r2, [pc, #104]	; (80087ac <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008744:	4013      	ands	r3, r2
 8008746:	0019      	movs	r1, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	4b0b      	ldr	r3, [pc, #44]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800874e:	430a      	orrs	r2, r1
 8008750:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695a      	ldr	r2, [r3, #20]
 8008756:	2380      	movs	r3, #128	; 0x80
 8008758:	01db      	lsls	r3, r3, #7
 800875a:	429a      	cmp	r2, r3
 800875c:	d106      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800875e:	4b07      	ldr	r3, [pc, #28]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	4b06      	ldr	r3, [pc, #24]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008764:	2180      	movs	r1, #128	; 0x80
 8008766:	0249      	lsls	r1, r1, #9
 8008768:	430a      	orrs	r2, r1
 800876a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800876c:	2312      	movs	r3, #18
 800876e:	18fb      	adds	r3, r7, r3
 8008770:	781b      	ldrb	r3, [r3, #0]
}
 8008772:	0018      	movs	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	b006      	add	sp, #24
 8008778:	bd80      	pop	{r7, pc}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	40021000 	.word	0x40021000
 8008780:	40007000 	.word	0x40007000
 8008784:	fffffcff 	.word	0xfffffcff
 8008788:	fffeffff 	.word	0xfffeffff
 800878c:	00001388 	.word	0x00001388
 8008790:	efffffff 	.word	0xefffffff
 8008794:	fffff3ff 	.word	0xfffff3ff
 8008798:	fff3ffff 	.word	0xfff3ffff
 800879c:	ffcfffff 	.word	0xffcfffff
 80087a0:	ffffcfff 	.word	0xffffcfff
 80087a4:	ffbfffff 	.word	0xffbfffff
 80087a8:	feffffff 	.word	0xfeffffff
 80087ac:	ffff3fff 	.word	0xffff3fff

080087b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e0a8      	b.n	8008914 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	2382      	movs	r3, #130	; 0x82
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d009      	beq.n	80087ea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	61da      	str	r2, [r3, #28]
 80087dc:	e005      	b.n	80087ea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	225d      	movs	r2, #93	; 0x5d
 80087f4:	5c9b      	ldrb	r3, [r3, r2]
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d107      	bne.n	800880c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	225c      	movs	r2, #92	; 0x5c
 8008800:	2100      	movs	r1, #0
 8008802:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	0018      	movs	r0, r3
 8008808:	f7f8 f8ae 	bl	8000968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	225d      	movs	r2, #93	; 0x5d
 8008810:	2102      	movs	r1, #2
 8008812:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2140      	movs	r1, #64	; 0x40
 8008820:	438a      	bics	r2, r1
 8008822:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	23e0      	movs	r3, #224	; 0xe0
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	429a      	cmp	r2, r3
 800882e:	d902      	bls.n	8008836 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e002      	b.n	800883c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008836:	2380      	movs	r3, #128	; 0x80
 8008838:	015b      	lsls	r3, r3, #5
 800883a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68da      	ldr	r2, [r3, #12]
 8008840:	23f0      	movs	r3, #240	; 0xf0
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	429a      	cmp	r2, r3
 8008846:	d008      	beq.n	800885a <HAL_SPI_Init+0xaa>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	23e0      	movs	r3, #224	; 0xe0
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	429a      	cmp	r2, r3
 8008852:	d002      	beq.n	800885a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	2382      	movs	r3, #130	; 0x82
 8008860:	005b      	lsls	r3, r3, #1
 8008862:	401a      	ands	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6899      	ldr	r1, [r3, #8]
 8008868:	2384      	movs	r3, #132	; 0x84
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	400b      	ands	r3, r1
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	2102      	movs	r1, #2
 8008876:	400b      	ands	r3, r1
 8008878:	431a      	orrs	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	2101      	movs	r1, #1
 8008880:	400b      	ands	r3, r1
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6999      	ldr	r1, [r3, #24]
 8008888:	2380      	movs	r3, #128	; 0x80
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	400b      	ands	r3, r1
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	2138      	movs	r1, #56	; 0x38
 8008896:	400b      	ands	r3, r1
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	2180      	movs	r1, #128	; 0x80
 80088a0:	400b      	ands	r3, r1
 80088a2:	431a      	orrs	r2, r3
 80088a4:	0011      	movs	r1, r2
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088aa:	2380      	movs	r3, #128	; 0x80
 80088ac:	019b      	lsls	r3, r3, #6
 80088ae:	401a      	ands	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	0c1b      	lsrs	r3, r3, #16
 80088be:	2204      	movs	r2, #4
 80088c0:	401a      	ands	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	2110      	movs	r1, #16
 80088c8:	400b      	ands	r3, r1
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d0:	2108      	movs	r1, #8
 80088d2:	400b      	ands	r3, r1
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68d9      	ldr	r1, [r3, #12]
 80088da:	23f0      	movs	r3, #240	; 0xf0
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	400b      	ands	r3, r1
 80088e0:	431a      	orrs	r2, r3
 80088e2:	0011      	movs	r1, r2
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	2380      	movs	r3, #128	; 0x80
 80088e8:	015b      	lsls	r3, r3, #5
 80088ea:	401a      	ands	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	69da      	ldr	r2, [r3, #28]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4907      	ldr	r1, [pc, #28]	; (800891c <HAL_SPI_Init+0x16c>)
 8008900:	400a      	ands	r2, r1
 8008902:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	225d      	movs	r2, #93	; 0x5d
 800890e:	2101      	movs	r1, #1
 8008910:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	0018      	movs	r0, r3
 8008916:	46bd      	mov	sp, r7
 8008918:	b004      	add	sp, #16
 800891a:	bd80      	pop	{r7, pc}
 800891c:	fffff7ff 	.word	0xfffff7ff

08008920 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	1dbb      	adds	r3, r7, #6
 800892c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800892e:	2317      	movs	r3, #23
 8008930:	18fb      	adds	r3, r7, r3
 8008932:	2200      	movs	r2, #0
 8008934:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	225c      	movs	r2, #92	; 0x5c
 800893a:	5c9b      	ldrb	r3, [r3, r2]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_SPI_Transmit_DMA+0x24>
 8008940:	2302      	movs	r3, #2
 8008942:	e0e7      	b.n	8008b14 <HAL_SPI_Transmit_DMA+0x1f4>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	225c      	movs	r2, #92	; 0x5c
 8008948:	2101      	movs	r1, #1
 800894a:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	225d      	movs	r2, #93	; 0x5d
 8008950:	5c9b      	ldrb	r3, [r3, r2]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b01      	cmp	r3, #1
 8008956:	d004      	beq.n	8008962 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8008958:	2317      	movs	r3, #23
 800895a:	18fb      	adds	r3, r7, r3
 800895c:	2202      	movs	r2, #2
 800895e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008960:	e0d1      	b.n	8008b06 <HAL_SPI_Transmit_DMA+0x1e6>
  }

  if ((pData == NULL) || (Size == 0U))
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <HAL_SPI_Transmit_DMA+0x50>
 8008968:	1dbb      	adds	r3, r7, #6
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d104      	bne.n	800897a <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8008970:	2317      	movs	r3, #23
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	2201      	movs	r2, #1
 8008976:	701a      	strb	r2, [r3, #0]
    goto error;
 8008978:	e0c5      	b.n	8008b06 <HAL_SPI_Transmit_DMA+0x1e6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	225d      	movs	r2, #93	; 0x5d
 800897e:	2103      	movs	r1, #3
 8008980:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1dba      	adds	r2, r7, #6
 8008992:	8812      	ldrh	r2, [r2, #0]
 8008994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1dba      	adds	r2, r7, #6
 800899a:	8812      	ldrh	r2, [r2, #0]
 800899c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2244      	movs	r2, #68	; 0x44
 80089b4:	2100      	movs	r1, #0
 80089b6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2246      	movs	r2, #70	; 0x46
 80089bc:	2100      	movs	r1, #0
 80089be:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	2380      	movs	r3, #128	; 0x80
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d110      	bne.n	80089ee <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2140      	movs	r1, #64	; 0x40
 80089d8:	438a      	bics	r2, r1
 80089da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2180      	movs	r1, #128	; 0x80
 80089e8:	01c9      	lsls	r1, r1, #7
 80089ea:	430a      	orrs	r2, r1
 80089ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f2:	4a4a      	ldr	r2, [pc, #296]	; (8008b1c <HAL_SPI_Transmit_DMA+0x1fc>)
 80089f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fa:	4a49      	ldr	r2, [pc, #292]	; (8008b20 <HAL_SPI_Transmit_DMA+0x200>)
 80089fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a02:	4a48      	ldr	r2, [pc, #288]	; (8008b24 <HAL_SPI_Transmit_DMA+0x204>)
 8008a04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4943      	ldr	r1, [pc, #268]	; (8008b28 <HAL_SPI_Transmit_DMA+0x208>)
 8008a1a:	400a      	ands	r2, r1
 8008a1c:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	23e0      	movs	r3, #224	; 0xe0
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d82f      	bhi.n	8008a8a <HAL_SPI_Transmit_DMA+0x16a>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2e:	699a      	ldr	r2, [r3, #24]
 8008a30:	2380      	movs	r3, #128	; 0x80
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d128      	bne.n	8008a8a <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	001a      	movs	r2, r3
 8008a40:	2301      	movs	r3, #1
 8008a42:	4013      	ands	r3, r2
 8008a44:	d10f      	bne.n	8008a66 <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4935      	ldr	r1, [pc, #212]	; (8008b28 <HAL_SPI_Transmit_DMA+0x208>)
 8008a52:	400a      	ands	r2, r1
 8008a54:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	085b      	lsrs	r3, r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a64:	e011      	b.n	8008a8a <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2180      	movs	r1, #128	; 0x80
 8008a72:	01c9      	lsls	r1, r1, #7
 8008a74:	430a      	orrs	r2, r1
 8008a76:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	3301      	adds	r3, #1
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	0019      	movs	r1, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	330c      	adds	r3, #12
 8008a9a:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008aa2:	f7fe fbff 	bl	80072a4 <HAL_DMA_Start_IT>
 8008aa6:	1e03      	subs	r3, r0, #0
 8008aa8:	d00e      	beq.n	8008ac8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aae:	2210      	movs	r2, #16
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008ab6:	2317      	movs	r3, #23
 8008ab8:	18fb      	adds	r3, r7, r3
 8008aba:	2201      	movs	r2, #1
 8008abc:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	225d      	movs	r2, #93	; 0x5d
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	5499      	strb	r1, [r3, r2]
    goto error;
 8008ac6:	e01e      	b.n	8008b06 <HAL_SPI_Transmit_DMA+0x1e6>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2240      	movs	r2, #64	; 0x40
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	2b40      	cmp	r3, #64	; 0x40
 8008ad4:	d007      	beq.n	8008ae6 <HAL_SPI_Transmit_DMA+0x1c6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2140      	movs	r1, #64	; 0x40
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2120      	movs	r1, #32
 8008af2:	430a      	orrs	r2, r1
 8008af4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2102      	movs	r1, #2
 8008b02:	430a      	orrs	r2, r1
 8008b04:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	225c      	movs	r2, #92	; 0x5c
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008b0e:	2317      	movs	r3, #23
 8008b10:	18fb      	adds	r3, r7, r3
 8008b12:	781b      	ldrb	r3, [r3, #0]
}
 8008b14:	0018      	movs	r0, r3
 8008b16:	46bd      	mov	sp, r7
 8008b18:	b006      	add	sp, #24
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	08008c81 	.word	0x08008c81
 8008b20:	08008bd5 	.word	0x08008bd5
 8008b24:	08008c9f 	.word	0x08008c9f
 8008b28:	ffffbfff 	.word	0xffffbfff

08008b2c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8008b2c:	b590      	push	{r4, r7, lr}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b34:	240f      	movs	r4, #15
 8008b36:	193b      	adds	r3, r7, r4
 8008b38:	2200      	movs	r2, #0
 8008b3a:	701a      	strb	r2, [r3, #0]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00f      	beq.n	8008b64 <HAL_SPI_DMAStop+0x38>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f7fe fc31 	bl	80073b0 <HAL_DMA_Abort>
 8008b4e:	1e03      	subs	r3, r0, #0
 8008b50:	d008      	beq.n	8008b64 <HAL_SPI_DMAStop+0x38>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b56:	2210      	movs	r2, #16
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8008b5e:	193b      	adds	r3, r7, r4
 8008b60:	2201      	movs	r2, #1
 8008b62:	701a      	strb	r2, [r3, #0]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d010      	beq.n	8008b8e <HAL_SPI_DMAStop+0x62>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b70:	0018      	movs	r0, r3
 8008b72:	f7fe fc1d 	bl	80073b0 <HAL_DMA_Abort>
 8008b76:	1e03      	subs	r3, r0, #0
 8008b78:	d009      	beq.n	8008b8e <HAL_SPI_DMAStop+0x62>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7e:	2210      	movs	r2, #16
 8008b80:	431a      	orrs	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8008b86:	230f      	movs	r3, #15
 8008b88:	18fb      	adds	r3, r7, r3
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2103      	movs	r1, #3
 8008b9a:	438a      	bics	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	225d      	movs	r2, #93	; 0x5d
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008ba6:	230f      	movs	r3, #15
 8008ba8:	18fb      	adds	r3, r7, r3
 8008baa:	781b      	ldrb	r3, [r3, #0]
}
 8008bac:	0018      	movs	r0, r3
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b005      	add	sp, #20
 8008bb2:	bd90      	pop	{r4, r7, pc}

08008bb4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008bbc:	46c0      	nop			; (mov r8, r8)
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	b002      	add	sp, #8
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008bcc:	46c0      	nop			; (mov r8, r8)
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	b002      	add	sp, #8
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008be2:	f7fe f9b3 	bl	8006f4c <HAL_GetTick>
 8008be6:	0003      	movs	r3, r0
 8008be8:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	d03c      	beq.n	8008c72 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2120      	movs	r1, #32
 8008c04:	438a      	bics	r2, r1
 8008c06:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2102      	movs	r1, #2
 8008c14:	438a      	bics	r2, r1
 8008c16:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2164      	movs	r1, #100	; 0x64
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f000 f98e 	bl	8008f40 <SPI_EndRxTxTransaction>
 8008c24:	1e03      	subs	r3, r0, #0
 8008c26:	d005      	beq.n	8008c34 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10a      	bne.n	8008c52 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2200      	movs	r2, #0
 8008c56:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	225d      	movs	r2, #93	; 0x5d
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d004      	beq.n	8008c72 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	0018      	movs	r0, r3
 8008c6c:	f7ff ffaa 	bl	8008bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008c70:	e003      	b.n	8008c7a <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	0018      	movs	r0, r3
 8008c76:	f7f8 fac1 	bl	80011fc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	b006      	add	sp, #24
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	0018      	movs	r0, r3
 8008c92:	f7ff ff8f 	bl	8008bb4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c96:	46c0      	nop			; (mov r8, r8)
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	b004      	add	sp, #16
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2103      	movs	r1, #3
 8008cb8:	438a      	bics	r2, r1
 8008cba:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc0:	2210      	movs	r2, #16
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	225d      	movs	r2, #93	; 0x5d
 8008ccc:	2101      	movs	r1, #1
 8008cce:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	f7ff ff76 	bl	8008bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008cd8:	46c0      	nop			; (mov r8, r8)
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	b004      	add	sp, #16
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	1dfb      	adds	r3, r7, #7
 8008cee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008cf0:	f7fe f92c 	bl	8006f4c <HAL_GetTick>
 8008cf4:	0002      	movs	r2, r0
 8008cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf8:	1a9b      	subs	r3, r3, r2
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	18d3      	adds	r3, r2, r3
 8008cfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d00:	f7fe f924 	bl	8006f4c <HAL_GetTick>
 8008d04:	0003      	movs	r3, r0
 8008d06:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d08:	4b3a      	ldr	r3, [pc, #232]	; (8008df4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	015b      	lsls	r3, r3, #5
 8008d0e:	0d1b      	lsrs	r3, r3, #20
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	4353      	muls	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d16:	e058      	b.n	8008dca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	d055      	beq.n	8008dca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d1e:	f7fe f915 	bl	8006f4c <HAL_GetTick>
 8008d22:	0002      	movs	r2, r0
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d902      	bls.n	8008d34 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d142      	bne.n	8008dba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	21e0      	movs	r1, #224	; 0xe0
 8008d40:	438a      	bics	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	2382      	movs	r3, #130	; 0x82
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d113      	bne.n	8008d78 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	2380      	movs	r3, #128	; 0x80
 8008d56:	021b      	lsls	r3, r3, #8
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d005      	beq.n	8008d68 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	2380      	movs	r3, #128	; 0x80
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d107      	bne.n	8008d78 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2140      	movs	r1, #64	; 0x40
 8008d74:	438a      	bics	r2, r1
 8008d76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	019b      	lsls	r3, r3, #6
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d110      	bne.n	8008da6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	491a      	ldr	r1, [pc, #104]	; (8008df8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008d90:	400a      	ands	r2, r1
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2180      	movs	r1, #128	; 0x80
 8008da0:	0189      	lsls	r1, r1, #6
 8008da2:	430a      	orrs	r2, r1
 8008da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	225d      	movs	r2, #93	; 0x5d
 8008daa:	2101      	movs	r1, #1
 8008dac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	225c      	movs	r2, #92	; 0x5c
 8008db2:	2100      	movs	r1, #0
 8008db4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e017      	b.n	8008dea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	425a      	negs	r2, r3
 8008dda:	4153      	adcs	r3, r2
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	001a      	movs	r2, r3
 8008de0:	1dfb      	adds	r3, r7, #7
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d197      	bne.n	8008d18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	0018      	movs	r0, r3
 8008dec:	46bd      	mov	sp, r7
 8008dee:	b008      	add	sp, #32
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	46c0      	nop			; (mov r8, r8)
 8008df4:	20000000 	.word	0x20000000
 8008df8:	ffffdfff 	.word	0xffffdfff

08008dfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	; 0x28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e0a:	2317      	movs	r3, #23
 8008e0c:	18fb      	adds	r3, r7, r3
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e12:	f7fe f89b 	bl	8006f4c <HAL_GetTick>
 8008e16:	0002      	movs	r2, r0
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	1a9b      	subs	r3, r3, r2
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	18d3      	adds	r3, r2, r3
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008e22:	f7fe f893 	bl	8006f4c <HAL_GetTick>
 8008e26:	0003      	movs	r3, r0
 8008e28:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	330c      	adds	r3, #12
 8008e30:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e32:	4b41      	ldr	r3, [pc, #260]	; (8008f38 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	0013      	movs	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	189b      	adds	r3, r3, r2
 8008e3c:	00da      	lsls	r2, r3, #3
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	0d1b      	lsrs	r3, r3, #20
 8008e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e44:	4353      	muls	r3, r2
 8008e46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008e48:	e068      	b.n	8008f1c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	23c0      	movs	r3, #192	; 0xc0
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d10a      	bne.n	8008e6a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d107      	bne.n	8008e6a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	2117      	movs	r1, #23
 8008e62:	187b      	adds	r3, r7, r1
 8008e64:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008e66:	187b      	adds	r3, r7, r1
 8008e68:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	d055      	beq.n	8008f1c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e70:	f7fe f86c 	bl	8006f4c <HAL_GetTick>
 8008e74:	0002      	movs	r2, r0
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d902      	bls.n	8008e86 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d142      	bne.n	8008f0c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	21e0      	movs	r1, #224	; 0xe0
 8008e92:	438a      	bics	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	2382      	movs	r3, #130	; 0x82
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d113      	bne.n	8008eca <SPI_WaitFifoStateUntilTimeout+0xce>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	2380      	movs	r3, #128	; 0x80
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d005      	beq.n	8008eba <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	2380      	movs	r3, #128	; 0x80
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d107      	bne.n	8008eca <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2140      	movs	r1, #64	; 0x40
 8008ec6:	438a      	bics	r2, r1
 8008ec8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ece:	2380      	movs	r3, #128	; 0x80
 8008ed0:	019b      	lsls	r3, r3, #6
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d110      	bne.n	8008ef8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4916      	ldr	r1, [pc, #88]	; (8008f3c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008ee2:	400a      	ands	r2, r1
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2180      	movs	r1, #128	; 0x80
 8008ef2:	0189      	lsls	r1, r1, #6
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	225d      	movs	r2, #93	; 0x5d
 8008efc:	2101      	movs	r1, #1
 8008efe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	225c      	movs	r2, #92	; 0x5c
 8008f04:	2100      	movs	r1, #0
 8008f06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e010      	b.n	8008f2e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	4013      	ands	r3, r2
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d18e      	bne.n	8008e4a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	0018      	movs	r0, r3
 8008f30:	46bd      	mov	sp, r7
 8008f32:	b00a      	add	sp, #40	; 0x28
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	20000000 	.word	0x20000000
 8008f3c:	ffffdfff 	.word	0xffffdfff

08008f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	23c0      	movs	r3, #192	; 0xc0
 8008f50:	0159      	lsls	r1, r3, #5
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	0013      	movs	r3, r2
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f7ff ff4e 	bl	8008dfc <SPI_WaitFifoStateUntilTimeout>
 8008f60:	1e03      	subs	r3, r0, #0
 8008f62:	d007      	beq.n	8008f74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f68:	2220      	movs	r2, #32
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e027      	b.n	8008fc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	0013      	movs	r3, r2
 8008f7e:	2200      	movs	r2, #0
 8008f80:	2180      	movs	r1, #128	; 0x80
 8008f82:	f7ff fead 	bl	8008ce0 <SPI_WaitFlagStateUntilTimeout>
 8008f86:	1e03      	subs	r3, r0, #0
 8008f88:	d007      	beq.n	8008f9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f8e:	2220      	movs	r2, #32
 8008f90:	431a      	orrs	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e014      	b.n	8008fc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	23c0      	movs	r3, #192	; 0xc0
 8008f9e:	00d9      	lsls	r1, r3, #3
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	0013      	movs	r3, r2
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f7ff ff27 	bl	8008dfc <SPI_WaitFifoStateUntilTimeout>
 8008fae:	1e03      	subs	r3, r0, #0
 8008fb0:	d007      	beq.n	8008fc2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e000      	b.n	8008fc4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	b004      	add	sp, #16
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e046      	b.n	800906c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2284      	movs	r2, #132	; 0x84
 8008fe2:	589b      	ldr	r3, [r3, r2]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d107      	bne.n	8008ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2280      	movs	r2, #128	; 0x80
 8008fec:	2100      	movs	r1, #0
 8008fee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f7f7 feb6 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2284      	movs	r2, #132	; 0x84
 8008ffc:	2124      	movs	r1, #36	; 0x24
 8008ffe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2101      	movs	r1, #1
 800900c:	438a      	bics	r2, r1
 800900e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	0018      	movs	r0, r3
 8009014:	f000 f830 	bl	8009078 <UART_SetConfig>
 8009018:	0003      	movs	r3, r0
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e024      	b.n	800906c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	0018      	movs	r0, r3
 800902e:	f000 fb01 	bl	8009634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	490d      	ldr	r1, [pc, #52]	; (8009074 <HAL_UART_Init+0xa8>)
 800903e:	400a      	ands	r2, r1
 8009040:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	212a      	movs	r1, #42	; 0x2a
 800904e:	438a      	bics	r2, r1
 8009050:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2101      	movs	r1, #1
 800905e:	430a      	orrs	r2, r1
 8009060:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	0018      	movs	r0, r3
 8009066:	f000 fb99 	bl	800979c <UART_CheckIdleState>
 800906a:	0003      	movs	r3, r0
}
 800906c:	0018      	movs	r0, r3
 800906e:	46bd      	mov	sp, r7
 8009070:	b002      	add	sp, #8
 8009072:	bd80      	pop	{r7, pc}
 8009074:	ffffb7ff 	.word	0xffffb7ff

08009078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009078:	b5b0      	push	{r4, r5, r7, lr}
 800907a:	b090      	sub	sp, #64	; 0x40
 800907c:	af00      	add	r7, sp, #0
 800907e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009080:	231a      	movs	r3, #26
 8009082:	2220      	movs	r2, #32
 8009084:	4694      	mov	ip, r2
 8009086:	44bc      	add	ip, r7
 8009088:	4463      	add	r3, ip
 800908a:	2200      	movs	r2, #0
 800908c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	689a      	ldr	r2, [r3, #8]
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	431a      	orrs	r2, r3
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	431a      	orrs	r2, r3
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4ab9      	ldr	r2, [pc, #740]	; (8009394 <UART_SetConfig+0x31c>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	0019      	movs	r1, r3
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b8:	430b      	orrs	r3, r1
 80090ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	4ab5      	ldr	r2, [pc, #724]	; (8009398 <UART_SetConfig+0x320>)
 80090c4:	4013      	ands	r3, r2
 80090c6:	0018      	movs	r0, r3
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	68d9      	ldr	r1, [r3, #12]
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	0003      	movs	r3, r0
 80090d2:	430b      	orrs	r3, r1
 80090d4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4aae      	ldr	r2, [pc, #696]	; (800939c <UART_SetConfig+0x324>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d004      	beq.n	80090f0 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090ec:	4313      	orrs	r3, r2
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	4aaa      	ldr	r2, [pc, #680]	; (80093a0 <UART_SetConfig+0x328>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	0019      	movs	r1, r3
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009102:	430b      	orrs	r3, r1
 8009104:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	220f      	movs	r2, #15
 800910e:	4393      	bics	r3, r2
 8009110:	0018      	movs	r0, r3
 8009112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009114:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	0003      	movs	r3, r0
 800911c:	430b      	orrs	r3, r1
 800911e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a9f      	ldr	r2, [pc, #636]	; (80093a4 <UART_SetConfig+0x32c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d136      	bne.n	8009198 <UART_SetConfig+0x120>
 800912a:	4b9f      	ldr	r3, [pc, #636]	; (80093a8 <UART_SetConfig+0x330>)
 800912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912e:	2203      	movs	r2, #3
 8009130:	4013      	ands	r3, r2
 8009132:	2b03      	cmp	r3, #3
 8009134:	d020      	beq.n	8009178 <UART_SetConfig+0x100>
 8009136:	d827      	bhi.n	8009188 <UART_SetConfig+0x110>
 8009138:	2b02      	cmp	r3, #2
 800913a:	d00d      	beq.n	8009158 <UART_SetConfig+0xe0>
 800913c:	d824      	bhi.n	8009188 <UART_SetConfig+0x110>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <UART_SetConfig+0xd0>
 8009142:	2b01      	cmp	r3, #1
 8009144:	d010      	beq.n	8009168 <UART_SetConfig+0xf0>
 8009146:	e01f      	b.n	8009188 <UART_SetConfig+0x110>
 8009148:	231b      	movs	r3, #27
 800914a:	2220      	movs	r2, #32
 800914c:	4694      	mov	ip, r2
 800914e:	44bc      	add	ip, r7
 8009150:	4463      	add	r3, ip
 8009152:	2200      	movs	r2, #0
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	e0c5      	b.n	80092e4 <UART_SetConfig+0x26c>
 8009158:	231b      	movs	r3, #27
 800915a:	2220      	movs	r2, #32
 800915c:	4694      	mov	ip, r2
 800915e:	44bc      	add	ip, r7
 8009160:	4463      	add	r3, ip
 8009162:	2202      	movs	r2, #2
 8009164:	701a      	strb	r2, [r3, #0]
 8009166:	e0bd      	b.n	80092e4 <UART_SetConfig+0x26c>
 8009168:	231b      	movs	r3, #27
 800916a:	2220      	movs	r2, #32
 800916c:	4694      	mov	ip, r2
 800916e:	44bc      	add	ip, r7
 8009170:	4463      	add	r3, ip
 8009172:	2204      	movs	r2, #4
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	e0b5      	b.n	80092e4 <UART_SetConfig+0x26c>
 8009178:	231b      	movs	r3, #27
 800917a:	2220      	movs	r2, #32
 800917c:	4694      	mov	ip, r2
 800917e:	44bc      	add	ip, r7
 8009180:	4463      	add	r3, ip
 8009182:	2208      	movs	r2, #8
 8009184:	701a      	strb	r2, [r3, #0]
 8009186:	e0ad      	b.n	80092e4 <UART_SetConfig+0x26c>
 8009188:	231b      	movs	r3, #27
 800918a:	2220      	movs	r2, #32
 800918c:	4694      	mov	ip, r2
 800918e:	44bc      	add	ip, r7
 8009190:	4463      	add	r3, ip
 8009192:	2210      	movs	r2, #16
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	e0a5      	b.n	80092e4 <UART_SetConfig+0x26c>
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a83      	ldr	r2, [pc, #524]	; (80093ac <UART_SetConfig+0x334>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d136      	bne.n	8009210 <UART_SetConfig+0x198>
 80091a2:	4b81      	ldr	r3, [pc, #516]	; (80093a8 <UART_SetConfig+0x330>)
 80091a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a6:	220c      	movs	r2, #12
 80091a8:	4013      	ands	r3, r2
 80091aa:	2b0c      	cmp	r3, #12
 80091ac:	d020      	beq.n	80091f0 <UART_SetConfig+0x178>
 80091ae:	d827      	bhi.n	8009200 <UART_SetConfig+0x188>
 80091b0:	2b08      	cmp	r3, #8
 80091b2:	d00d      	beq.n	80091d0 <UART_SetConfig+0x158>
 80091b4:	d824      	bhi.n	8009200 <UART_SetConfig+0x188>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <UART_SetConfig+0x148>
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d010      	beq.n	80091e0 <UART_SetConfig+0x168>
 80091be:	e01f      	b.n	8009200 <UART_SetConfig+0x188>
 80091c0:	231b      	movs	r3, #27
 80091c2:	2220      	movs	r2, #32
 80091c4:	4694      	mov	ip, r2
 80091c6:	44bc      	add	ip, r7
 80091c8:	4463      	add	r3, ip
 80091ca:	2200      	movs	r2, #0
 80091cc:	701a      	strb	r2, [r3, #0]
 80091ce:	e089      	b.n	80092e4 <UART_SetConfig+0x26c>
 80091d0:	231b      	movs	r3, #27
 80091d2:	2220      	movs	r2, #32
 80091d4:	4694      	mov	ip, r2
 80091d6:	44bc      	add	ip, r7
 80091d8:	4463      	add	r3, ip
 80091da:	2202      	movs	r2, #2
 80091dc:	701a      	strb	r2, [r3, #0]
 80091de:	e081      	b.n	80092e4 <UART_SetConfig+0x26c>
 80091e0:	231b      	movs	r3, #27
 80091e2:	2220      	movs	r2, #32
 80091e4:	4694      	mov	ip, r2
 80091e6:	44bc      	add	ip, r7
 80091e8:	4463      	add	r3, ip
 80091ea:	2204      	movs	r2, #4
 80091ec:	701a      	strb	r2, [r3, #0]
 80091ee:	e079      	b.n	80092e4 <UART_SetConfig+0x26c>
 80091f0:	231b      	movs	r3, #27
 80091f2:	2220      	movs	r2, #32
 80091f4:	4694      	mov	ip, r2
 80091f6:	44bc      	add	ip, r7
 80091f8:	4463      	add	r3, ip
 80091fa:	2208      	movs	r2, #8
 80091fc:	701a      	strb	r2, [r3, #0]
 80091fe:	e071      	b.n	80092e4 <UART_SetConfig+0x26c>
 8009200:	231b      	movs	r3, #27
 8009202:	2220      	movs	r2, #32
 8009204:	4694      	mov	ip, r2
 8009206:	44bc      	add	ip, r7
 8009208:	4463      	add	r3, ip
 800920a:	2210      	movs	r2, #16
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	e069      	b.n	80092e4 <UART_SetConfig+0x26c>
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a66      	ldr	r2, [pc, #408]	; (80093b0 <UART_SetConfig+0x338>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d107      	bne.n	800922a <UART_SetConfig+0x1b2>
 800921a:	231b      	movs	r3, #27
 800921c:	2220      	movs	r2, #32
 800921e:	4694      	mov	ip, r2
 8009220:	44bc      	add	ip, r7
 8009222:	4463      	add	r3, ip
 8009224:	2200      	movs	r2, #0
 8009226:	701a      	strb	r2, [r3, #0]
 8009228:	e05c      	b.n	80092e4 <UART_SetConfig+0x26c>
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a61      	ldr	r2, [pc, #388]	; (80093b4 <UART_SetConfig+0x33c>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d107      	bne.n	8009244 <UART_SetConfig+0x1cc>
 8009234:	231b      	movs	r3, #27
 8009236:	2220      	movs	r2, #32
 8009238:	4694      	mov	ip, r2
 800923a:	44bc      	add	ip, r7
 800923c:	4463      	add	r3, ip
 800923e:	2200      	movs	r2, #0
 8009240:	701a      	strb	r2, [r3, #0]
 8009242:	e04f      	b.n	80092e4 <UART_SetConfig+0x26c>
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a54      	ldr	r2, [pc, #336]	; (800939c <UART_SetConfig+0x324>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d143      	bne.n	80092d6 <UART_SetConfig+0x25e>
 800924e:	4b56      	ldr	r3, [pc, #344]	; (80093a8 <UART_SetConfig+0x330>)
 8009250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009252:	23c0      	movs	r3, #192	; 0xc0
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	4013      	ands	r3, r2
 8009258:	22c0      	movs	r2, #192	; 0xc0
 800925a:	0112      	lsls	r2, r2, #4
 800925c:	4293      	cmp	r3, r2
 800925e:	d02a      	beq.n	80092b6 <UART_SetConfig+0x23e>
 8009260:	22c0      	movs	r2, #192	; 0xc0
 8009262:	0112      	lsls	r2, r2, #4
 8009264:	4293      	cmp	r3, r2
 8009266:	d82e      	bhi.n	80092c6 <UART_SetConfig+0x24e>
 8009268:	2280      	movs	r2, #128	; 0x80
 800926a:	0112      	lsls	r2, r2, #4
 800926c:	4293      	cmp	r3, r2
 800926e:	d012      	beq.n	8009296 <UART_SetConfig+0x21e>
 8009270:	2280      	movs	r2, #128	; 0x80
 8009272:	0112      	lsls	r2, r2, #4
 8009274:	4293      	cmp	r3, r2
 8009276:	d826      	bhi.n	80092c6 <UART_SetConfig+0x24e>
 8009278:	2b00      	cmp	r3, #0
 800927a:	d004      	beq.n	8009286 <UART_SetConfig+0x20e>
 800927c:	2280      	movs	r2, #128	; 0x80
 800927e:	00d2      	lsls	r2, r2, #3
 8009280:	4293      	cmp	r3, r2
 8009282:	d010      	beq.n	80092a6 <UART_SetConfig+0x22e>
 8009284:	e01f      	b.n	80092c6 <UART_SetConfig+0x24e>
 8009286:	231b      	movs	r3, #27
 8009288:	2220      	movs	r2, #32
 800928a:	4694      	mov	ip, r2
 800928c:	44bc      	add	ip, r7
 800928e:	4463      	add	r3, ip
 8009290:	2200      	movs	r2, #0
 8009292:	701a      	strb	r2, [r3, #0]
 8009294:	e026      	b.n	80092e4 <UART_SetConfig+0x26c>
 8009296:	231b      	movs	r3, #27
 8009298:	2220      	movs	r2, #32
 800929a:	4694      	mov	ip, r2
 800929c:	44bc      	add	ip, r7
 800929e:	4463      	add	r3, ip
 80092a0:	2202      	movs	r2, #2
 80092a2:	701a      	strb	r2, [r3, #0]
 80092a4:	e01e      	b.n	80092e4 <UART_SetConfig+0x26c>
 80092a6:	231b      	movs	r3, #27
 80092a8:	2220      	movs	r2, #32
 80092aa:	4694      	mov	ip, r2
 80092ac:	44bc      	add	ip, r7
 80092ae:	4463      	add	r3, ip
 80092b0:	2204      	movs	r2, #4
 80092b2:	701a      	strb	r2, [r3, #0]
 80092b4:	e016      	b.n	80092e4 <UART_SetConfig+0x26c>
 80092b6:	231b      	movs	r3, #27
 80092b8:	2220      	movs	r2, #32
 80092ba:	4694      	mov	ip, r2
 80092bc:	44bc      	add	ip, r7
 80092be:	4463      	add	r3, ip
 80092c0:	2208      	movs	r2, #8
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	e00e      	b.n	80092e4 <UART_SetConfig+0x26c>
 80092c6:	231b      	movs	r3, #27
 80092c8:	2220      	movs	r2, #32
 80092ca:	4694      	mov	ip, r2
 80092cc:	44bc      	add	ip, r7
 80092ce:	4463      	add	r3, ip
 80092d0:	2210      	movs	r2, #16
 80092d2:	701a      	strb	r2, [r3, #0]
 80092d4:	e006      	b.n	80092e4 <UART_SetConfig+0x26c>
 80092d6:	231b      	movs	r3, #27
 80092d8:	2220      	movs	r2, #32
 80092da:	4694      	mov	ip, r2
 80092dc:	44bc      	add	ip, r7
 80092de:	4463      	add	r3, ip
 80092e0:	2210      	movs	r2, #16
 80092e2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a2c      	ldr	r2, [pc, #176]	; (800939c <UART_SetConfig+0x324>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d000      	beq.n	80092f0 <UART_SetConfig+0x278>
 80092ee:	e0ad      	b.n	800944c <UART_SetConfig+0x3d4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092f0:	231b      	movs	r3, #27
 80092f2:	2220      	movs	r2, #32
 80092f4:	4694      	mov	ip, r2
 80092f6:	44bc      	add	ip, r7
 80092f8:	4463      	add	r3, ip
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b08      	cmp	r3, #8
 80092fe:	d015      	beq.n	800932c <UART_SetConfig+0x2b4>
 8009300:	dc18      	bgt.n	8009334 <UART_SetConfig+0x2bc>
 8009302:	2b04      	cmp	r3, #4
 8009304:	d00d      	beq.n	8009322 <UART_SetConfig+0x2aa>
 8009306:	dc15      	bgt.n	8009334 <UART_SetConfig+0x2bc>
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <UART_SetConfig+0x29a>
 800930c:	2b02      	cmp	r3, #2
 800930e:	d005      	beq.n	800931c <UART_SetConfig+0x2a4>
 8009310:	e010      	b.n	8009334 <UART_SetConfig+0x2bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009312:	f7ff f87f 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 8009316:	0003      	movs	r3, r0
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800931a:	e015      	b.n	8009348 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800931c:	4b26      	ldr	r3, [pc, #152]	; (80093b8 <UART_SetConfig+0x340>)
 800931e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009320:	e012      	b.n	8009348 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009322:	f7fe ffeb 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 8009326:	0003      	movs	r3, r0
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800932a:	e00d      	b.n	8009348 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800932c:	2380      	movs	r3, #128	; 0x80
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009332:	e009      	b.n	8009348 <UART_SetConfig+0x2d0>
      default:
        pclk = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8009338:	231a      	movs	r3, #26
 800933a:	2220      	movs	r2, #32
 800933c:	4694      	mov	ip, r2
 800933e:	44bc      	add	ip, r7
 8009340:	4463      	add	r3, ip
 8009342:	2201      	movs	r2, #1
 8009344:	701a      	strb	r2, [r3, #0]
        break;
 8009346:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934a:	2b00      	cmp	r3, #0
 800934c:	d100      	bne.n	8009350 <UART_SetConfig+0x2d8>
 800934e:	e154      	b.n	80095fa <UART_SetConfig+0x582>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009354:	4b19      	ldr	r3, [pc, #100]	; (80093bc <UART_SetConfig+0x344>)
 8009356:	0052      	lsls	r2, r2, #1
 8009358:	5ad3      	ldrh	r3, [r2, r3]
 800935a:	0019      	movs	r1, r3
 800935c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800935e:	f7f6 fedb 	bl	8000118 <__udivsi3>
 8009362:	0003      	movs	r3, r0
 8009364:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	0013      	movs	r3, r2
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	189b      	adds	r3, r3, r2
 8009370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009372:	429a      	cmp	r2, r3
 8009374:	d305      	bcc.n	8009382 <UART_SetConfig+0x30a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800937c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800937e:	429a      	cmp	r2, r3
 8009380:	d91e      	bls.n	80093c0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009382:	231a      	movs	r3, #26
 8009384:	2220      	movs	r2, #32
 8009386:	4694      	mov	ip, r2
 8009388:	44bc      	add	ip, r7
 800938a:	4463      	add	r3, ip
 800938c:	2201      	movs	r2, #1
 800938e:	701a      	strb	r2, [r3, #0]
 8009390:	e133      	b.n	80095fa <UART_SetConfig+0x582>
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	cfff69f3 	.word	0xcfff69f3
 8009398:	ffffcfff 	.word	0xffffcfff
 800939c:	40008000 	.word	0x40008000
 80093a0:	11fff4ff 	.word	0x11fff4ff
 80093a4:	40013800 	.word	0x40013800
 80093a8:	40021000 	.word	0x40021000
 80093ac:	40004400 	.word	0x40004400
 80093b0:	40004800 	.word	0x40004800
 80093b4:	40004c00 	.word	0x40004c00
 80093b8:	00f42400 	.word	0x00f42400
 80093bc:	0800aee8 	.word	0x0800aee8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c2:	61bb      	str	r3, [r7, #24]
 80093c4:	2300      	movs	r3, #0
 80093c6:	61fb      	str	r3, [r7, #28]
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093cc:	4b97      	ldr	r3, [pc, #604]	; (800962c <UART_SetConfig+0x5b4>)
 80093ce:	0052      	lsls	r2, r2, #1
 80093d0:	5ad3      	ldrh	r3, [r2, r3]
 80093d2:	613b      	str	r3, [r7, #16]
 80093d4:	2300      	movs	r3, #0
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	69b8      	ldr	r0, [r7, #24]
 80093de:	69f9      	ldr	r1, [r7, #28]
 80093e0:	f7f7 f810 	bl	8000404 <__aeabi_uldivmod>
 80093e4:	0002      	movs	r2, r0
 80093e6:	000b      	movs	r3, r1
 80093e8:	0e11      	lsrs	r1, r2, #24
 80093ea:	021d      	lsls	r5, r3, #8
 80093ec:	430d      	orrs	r5, r1
 80093ee:	0214      	lsls	r4, r2, #8
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	085b      	lsrs	r3, r3, #1
 80093f6:	60bb      	str	r3, [r7, #8]
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	68b8      	ldr	r0, [r7, #8]
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	1900      	adds	r0, r0, r4
 8009402:	4169      	adcs	r1, r5
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	603b      	str	r3, [r7, #0]
 800940a:	2300      	movs	r3, #0
 800940c:	607b      	str	r3, [r7, #4]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f7f6 fff7 	bl	8000404 <__aeabi_uldivmod>
 8009416:	0002      	movs	r2, r0
 8009418:	000b      	movs	r3, r1
 800941a:	0013      	movs	r3, r2
 800941c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800941e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009420:	23c0      	movs	r3, #192	; 0xc0
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	429a      	cmp	r2, r3
 8009426:	d309      	bcc.n	800943c <UART_SetConfig+0x3c4>
 8009428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800942a:	2380      	movs	r3, #128	; 0x80
 800942c:	035b      	lsls	r3, r3, #13
 800942e:	429a      	cmp	r2, r3
 8009430:	d204      	bcs.n	800943c <UART_SetConfig+0x3c4>
        {
          huart->Instance->BRR = usartdiv;
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009438:	60da      	str	r2, [r3, #12]
 800943a:	e0de      	b.n	80095fa <UART_SetConfig+0x582>
        }
        else
        {
          ret = HAL_ERROR;
 800943c:	231a      	movs	r3, #26
 800943e:	2220      	movs	r2, #32
 8009440:	4694      	mov	ip, r2
 8009442:	44bc      	add	ip, r7
 8009444:	4463      	add	r3, ip
 8009446:	2201      	movs	r2, #1
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	e0d6      	b.n	80095fa <UART_SetConfig+0x582>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	2380      	movs	r3, #128	; 0x80
 8009452:	021b      	lsls	r3, r3, #8
 8009454:	429a      	cmp	r2, r3
 8009456:	d000      	beq.n	800945a <UART_SetConfig+0x3e2>
 8009458:	e074      	b.n	8009544 <UART_SetConfig+0x4cc>
  {
    switch (clocksource)
 800945a:	231b      	movs	r3, #27
 800945c:	2220      	movs	r2, #32
 800945e:	4694      	mov	ip, r2
 8009460:	44bc      	add	ip, r7
 8009462:	4463      	add	r3, ip
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b08      	cmp	r3, #8
 8009468:	d015      	beq.n	8009496 <UART_SetConfig+0x41e>
 800946a:	dc18      	bgt.n	800949e <UART_SetConfig+0x426>
 800946c:	2b04      	cmp	r3, #4
 800946e:	d00d      	beq.n	800948c <UART_SetConfig+0x414>
 8009470:	dc15      	bgt.n	800949e <UART_SetConfig+0x426>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <UART_SetConfig+0x404>
 8009476:	2b02      	cmp	r3, #2
 8009478:	d005      	beq.n	8009486 <UART_SetConfig+0x40e>
 800947a:	e010      	b.n	800949e <UART_SetConfig+0x426>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800947c:	f7fe ffca 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 8009480:	0003      	movs	r3, r0
 8009482:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009484:	e015      	b.n	80094b2 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009486:	4b6a      	ldr	r3, [pc, #424]	; (8009630 <UART_SetConfig+0x5b8>)
 8009488:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800948a:	e012      	b.n	80094b2 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800948c:	f7fe ff36 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 8009490:	0003      	movs	r3, r0
 8009492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009494:	e00d      	b.n	80094b2 <UART_SetConfig+0x43a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009496:	2380      	movs	r3, #128	; 0x80
 8009498:	021b      	lsls	r3, r3, #8
 800949a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800949c:	e009      	b.n	80094b2 <UART_SetConfig+0x43a>
      default:
        pclk = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80094a2:	231a      	movs	r3, #26
 80094a4:	2220      	movs	r2, #32
 80094a6:	4694      	mov	ip, r2
 80094a8:	44bc      	add	ip, r7
 80094aa:	4463      	add	r3, ip
 80094ac:	2201      	movs	r2, #1
 80094ae:	701a      	strb	r2, [r3, #0]
        break;
 80094b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d100      	bne.n	80094ba <UART_SetConfig+0x442>
 80094b8:	e09f      	b.n	80095fa <UART_SetConfig+0x582>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094be:	4b5b      	ldr	r3, [pc, #364]	; (800962c <UART_SetConfig+0x5b4>)
 80094c0:	0052      	lsls	r2, r2, #1
 80094c2:	5ad3      	ldrh	r3, [r2, r3]
 80094c4:	0019      	movs	r1, r3
 80094c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80094c8:	f7f6 fe26 	bl	8000118 <__udivsi3>
 80094cc:	0003      	movs	r3, r0
 80094ce:	005a      	lsls	r2, r3, #1
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	085b      	lsrs	r3, r3, #1
 80094d6:	18d2      	adds	r2, r2, r3
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	0019      	movs	r1, r3
 80094de:	0010      	movs	r0, r2
 80094e0:	f7f6 fe1a 	bl	8000118 <__udivsi3>
 80094e4:	0003      	movs	r3, r0
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	2b0f      	cmp	r3, #15
 80094ee:	d921      	bls.n	8009534 <UART_SetConfig+0x4bc>
 80094f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f2:	2380      	movs	r3, #128	; 0x80
 80094f4:	025b      	lsls	r3, r3, #9
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d21c      	bcs.n	8009534 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	200e      	movs	r0, #14
 8009500:	2420      	movs	r4, #32
 8009502:	193b      	adds	r3, r7, r4
 8009504:	181b      	adds	r3, r3, r0
 8009506:	210f      	movs	r1, #15
 8009508:	438a      	bics	r2, r1
 800950a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	b29b      	uxth	r3, r3
 8009512:	2207      	movs	r2, #7
 8009514:	4013      	ands	r3, r2
 8009516:	b299      	uxth	r1, r3
 8009518:	193b      	adds	r3, r7, r4
 800951a:	181b      	adds	r3, r3, r0
 800951c:	193a      	adds	r2, r7, r4
 800951e:	1812      	adds	r2, r2, r0
 8009520:	8812      	ldrh	r2, [r2, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	193a      	adds	r2, r7, r4
 800952c:	1812      	adds	r2, r2, r0
 800952e:	8812      	ldrh	r2, [r2, #0]
 8009530:	60da      	str	r2, [r3, #12]
 8009532:	e062      	b.n	80095fa <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 8009534:	231a      	movs	r3, #26
 8009536:	2220      	movs	r2, #32
 8009538:	4694      	mov	ip, r2
 800953a:	44bc      	add	ip, r7
 800953c:	4463      	add	r3, ip
 800953e:	2201      	movs	r2, #1
 8009540:	701a      	strb	r2, [r3, #0]
 8009542:	e05a      	b.n	80095fa <UART_SetConfig+0x582>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009544:	231b      	movs	r3, #27
 8009546:	2220      	movs	r2, #32
 8009548:	4694      	mov	ip, r2
 800954a:	44bc      	add	ip, r7
 800954c:	4463      	add	r3, ip
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b08      	cmp	r3, #8
 8009552:	d015      	beq.n	8009580 <UART_SetConfig+0x508>
 8009554:	dc18      	bgt.n	8009588 <UART_SetConfig+0x510>
 8009556:	2b04      	cmp	r3, #4
 8009558:	d00d      	beq.n	8009576 <UART_SetConfig+0x4fe>
 800955a:	dc15      	bgt.n	8009588 <UART_SetConfig+0x510>
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <UART_SetConfig+0x4ee>
 8009560:	2b02      	cmp	r3, #2
 8009562:	d005      	beq.n	8009570 <UART_SetConfig+0x4f8>
 8009564:	e010      	b.n	8009588 <UART_SetConfig+0x510>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009566:	f7fe ff55 	bl	8008414 <HAL_RCC_GetPCLK1Freq>
 800956a:	0003      	movs	r3, r0
 800956c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800956e:	e015      	b.n	800959c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009570:	4b2f      	ldr	r3, [pc, #188]	; (8009630 <UART_SetConfig+0x5b8>)
 8009572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009574:	e012      	b.n	800959c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009576:	f7fe fec1 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 800957a:	0003      	movs	r3, r0
 800957c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800957e:	e00d      	b.n	800959c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009580:	2380      	movs	r3, #128	; 0x80
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009586:	e009      	b.n	800959c <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800958c:	231a      	movs	r3, #26
 800958e:	2220      	movs	r2, #32
 8009590:	4694      	mov	ip, r2
 8009592:	44bc      	add	ip, r7
 8009594:	4463      	add	r3, ip
 8009596:	2201      	movs	r2, #1
 8009598:	701a      	strb	r2, [r3, #0]
        break;
 800959a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800959c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d02b      	beq.n	80095fa <UART_SetConfig+0x582>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095a6:	4b21      	ldr	r3, [pc, #132]	; (800962c <UART_SetConfig+0x5b4>)
 80095a8:	0052      	lsls	r2, r2, #1
 80095aa:	5ad3      	ldrh	r3, [r2, r3]
 80095ac:	0019      	movs	r1, r3
 80095ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80095b0:	f7f6 fdb2 	bl	8000118 <__udivsi3>
 80095b4:	0003      	movs	r3, r0
 80095b6:	001a      	movs	r2, r3
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	085b      	lsrs	r3, r3, #1
 80095be:	18d2      	adds	r2, r2, r3
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	0019      	movs	r1, r3
 80095c6:	0010      	movs	r0, r2
 80095c8:	f7f6 fda6 	bl	8000118 <__udivsi3>
 80095cc:	0003      	movs	r3, r0
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	2b0f      	cmp	r3, #15
 80095d6:	d909      	bls.n	80095ec <UART_SetConfig+0x574>
 80095d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095da:	2380      	movs	r3, #128	; 0x80
 80095dc:	025b      	lsls	r3, r3, #9
 80095de:	429a      	cmp	r2, r3
 80095e0:	d204      	bcs.n	80095ec <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	e006      	b.n	80095fa <UART_SetConfig+0x582>
      }
      else
      {
        ret = HAL_ERROR;
 80095ec:	231a      	movs	r3, #26
 80095ee:	2220      	movs	r2, #32
 80095f0:	4694      	mov	ip, r2
 80095f2:	44bc      	add	ip, r7
 80095f4:	4463      	add	r3, ip
 80095f6:	2201      	movs	r2, #1
 80095f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	226a      	movs	r2, #106	; 0x6a
 80095fe:	2101      	movs	r1, #1
 8009600:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	2268      	movs	r2, #104	; 0x68
 8009606:	2101      	movs	r1, #1
 8009608:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	2200      	movs	r2, #0
 800960e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	2200      	movs	r2, #0
 8009614:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009616:	231a      	movs	r3, #26
 8009618:	2220      	movs	r2, #32
 800961a:	4694      	mov	ip, r2
 800961c:	44bc      	add	ip, r7
 800961e:	4463      	add	r3, ip
 8009620:	781b      	ldrb	r3, [r3, #0]
}
 8009622:	0018      	movs	r0, r3
 8009624:	46bd      	mov	sp, r7
 8009626:	b010      	add	sp, #64	; 0x40
 8009628:	bdb0      	pop	{r4, r5, r7, pc}
 800962a:	46c0      	nop			; (mov r8, r8)
 800962c:	0800aee8 	.word	0x0800aee8
 8009630:	00f42400 	.word	0x00f42400

08009634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009640:	2201      	movs	r2, #1
 8009642:	4013      	ands	r3, r2
 8009644:	d00b      	beq.n	800965e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	4a4a      	ldr	r2, [pc, #296]	; (8009778 <UART_AdvFeatureConfig+0x144>)
 800964e:	4013      	ands	r3, r2
 8009650:	0019      	movs	r1, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009662:	2202      	movs	r2, #2
 8009664:	4013      	ands	r3, r2
 8009666:	d00b      	beq.n	8009680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	4a43      	ldr	r2, [pc, #268]	; (800977c <UART_AdvFeatureConfig+0x148>)
 8009670:	4013      	ands	r3, r2
 8009672:	0019      	movs	r1, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009684:	2204      	movs	r2, #4
 8009686:	4013      	ands	r3, r2
 8009688:	d00b      	beq.n	80096a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	4a3b      	ldr	r2, [pc, #236]	; (8009780 <UART_AdvFeatureConfig+0x14c>)
 8009692:	4013      	ands	r3, r2
 8009694:	0019      	movs	r1, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a6:	2208      	movs	r2, #8
 80096a8:	4013      	ands	r3, r2
 80096aa:	d00b      	beq.n	80096c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	4a34      	ldr	r2, [pc, #208]	; (8009784 <UART_AdvFeatureConfig+0x150>)
 80096b4:	4013      	ands	r3, r2
 80096b6:	0019      	movs	r1, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	430a      	orrs	r2, r1
 80096c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	2210      	movs	r2, #16
 80096ca:	4013      	ands	r3, r2
 80096cc:	d00b      	beq.n	80096e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	4a2c      	ldr	r2, [pc, #176]	; (8009788 <UART_AdvFeatureConfig+0x154>)
 80096d6:	4013      	ands	r3, r2
 80096d8:	0019      	movs	r1, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ea:	2220      	movs	r2, #32
 80096ec:	4013      	ands	r3, r2
 80096ee:	d00b      	beq.n	8009708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	4a25      	ldr	r2, [pc, #148]	; (800978c <UART_AdvFeatureConfig+0x158>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	0019      	movs	r1, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970c:	2240      	movs	r2, #64	; 0x40
 800970e:	4013      	ands	r3, r2
 8009710:	d01d      	beq.n	800974e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	4a1d      	ldr	r2, [pc, #116]	; (8009790 <UART_AdvFeatureConfig+0x15c>)
 800971a:	4013      	ands	r3, r2
 800971c:	0019      	movs	r1, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	430a      	orrs	r2, r1
 8009728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800972e:	2380      	movs	r3, #128	; 0x80
 8009730:	035b      	lsls	r3, r3, #13
 8009732:	429a      	cmp	r2, r3
 8009734:	d10b      	bne.n	800974e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	4a15      	ldr	r2, [pc, #84]	; (8009794 <UART_AdvFeatureConfig+0x160>)
 800973e:	4013      	ands	r3, r2
 8009740:	0019      	movs	r1, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	2280      	movs	r2, #128	; 0x80
 8009754:	4013      	ands	r3, r2
 8009756:	d00b      	beq.n	8009770 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	4a0e      	ldr	r2, [pc, #56]	; (8009798 <UART_AdvFeatureConfig+0x164>)
 8009760:	4013      	ands	r3, r2
 8009762:	0019      	movs	r1, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	605a      	str	r2, [r3, #4]
  }
}
 8009770:	46c0      	nop			; (mov r8, r8)
 8009772:	46bd      	mov	sp, r7
 8009774:	b002      	add	sp, #8
 8009776:	bd80      	pop	{r7, pc}
 8009778:	fffdffff 	.word	0xfffdffff
 800977c:	fffeffff 	.word	0xfffeffff
 8009780:	fffbffff 	.word	0xfffbffff
 8009784:	ffff7fff 	.word	0xffff7fff
 8009788:	ffffefff 	.word	0xffffefff
 800978c:	ffffdfff 	.word	0xffffdfff
 8009790:	ffefffff 	.word	0xffefffff
 8009794:	ff9fffff 	.word	0xff9fffff
 8009798:	fff7ffff 	.word	0xfff7ffff

0800979c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	228c      	movs	r2, #140	; 0x8c
 80097a8:	2100      	movs	r1, #0
 80097aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097ac:	f7fd fbce 	bl	8006f4c <HAL_GetTick>
 80097b0:	0003      	movs	r3, r0
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2208      	movs	r2, #8
 80097bc:	4013      	ands	r3, r2
 80097be:	2b08      	cmp	r3, #8
 80097c0:	d10c      	bne.n	80097dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2280      	movs	r2, #128	; 0x80
 80097c6:	0391      	lsls	r1, r2, #14
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	4a18      	ldr	r2, [pc, #96]	; (800982c <UART_CheckIdleState+0x90>)
 80097cc:	9200      	str	r2, [sp, #0]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f000 f82e 	bl	8009830 <UART_WaitOnFlagUntilTimeout>
 80097d4:	1e03      	subs	r3, r0, #0
 80097d6:	d001      	beq.n	80097dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e023      	b.n	8009824 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2204      	movs	r2, #4
 80097e4:	4013      	ands	r3, r2
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d10c      	bne.n	8009804 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2280      	movs	r2, #128	; 0x80
 80097ee:	03d1      	lsls	r1, r2, #15
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	4a0e      	ldr	r2, [pc, #56]	; (800982c <UART_CheckIdleState+0x90>)
 80097f4:	9200      	str	r2, [sp, #0]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f000 f81a 	bl	8009830 <UART_WaitOnFlagUntilTimeout>
 80097fc:	1e03      	subs	r3, r0, #0
 80097fe:	d001      	beq.n	8009804 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e00f      	b.n	8009824 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2284      	movs	r2, #132	; 0x84
 8009808:	2120      	movs	r1, #32
 800980a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2288      	movs	r2, #136	; 0x88
 8009810:	2120      	movs	r1, #32
 8009812:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2280      	movs	r2, #128	; 0x80
 800981e:	2100      	movs	r1, #0
 8009820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	0018      	movs	r0, r3
 8009826:	46bd      	mov	sp, r7
 8009828:	b004      	add	sp, #16
 800982a:	bd80      	pop	{r7, pc}
 800982c:	01ffffff 	.word	0x01ffffff

08009830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b094      	sub	sp, #80	; 0x50
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	1dfb      	adds	r3, r7, #7
 800983e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009840:	e0a7      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009844:	3301      	adds	r3, #1
 8009846:	d100      	bne.n	800984a <UART_WaitOnFlagUntilTimeout+0x1a>
 8009848:	e0a3      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800984a:	f7fd fb7f 	bl	8006f4c <HAL_GetTick>
 800984e:	0002      	movs	r2, r0
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009856:	429a      	cmp	r2, r3
 8009858:	d302      	bcc.n	8009860 <UART_WaitOnFlagUntilTimeout+0x30>
 800985a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800985c:	2b00      	cmp	r3, #0
 800985e:	d13f      	bne.n	80098e0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009860:	f3ef 8310 	mrs	r3, PRIMASK
 8009864:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009868:	647b      	str	r3, [r7, #68]	; 0x44
 800986a:	2301      	movs	r3, #1
 800986c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	f383 8810 	msr	PRIMASK, r3
}
 8009874:	46c0      	nop			; (mov r8, r8)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	494e      	ldr	r1, [pc, #312]	; (80099bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8009882:	400a      	ands	r2, r1
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009888:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	f383 8810 	msr	PRIMASK, r3
}
 8009890:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009892:	f3ef 8310 	mrs	r3, PRIMASK
 8009896:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800989a:	643b      	str	r3, [r7, #64]	; 0x40
 800989c:	2301      	movs	r3, #1
 800989e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	f383 8810 	msr	PRIMASK, r3
}
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689a      	ldr	r2, [r3, #8]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2101      	movs	r1, #1
 80098b4:	438a      	bics	r2, r1
 80098b6:	609a      	str	r2, [r3, #8]
 80098b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098be:	f383 8810 	msr	PRIMASK, r3
}
 80098c2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2284      	movs	r2, #132	; 0x84
 80098c8:	2120      	movs	r1, #32
 80098ca:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2288      	movs	r2, #136	; 0x88
 80098d0:	2120      	movs	r1, #32
 80098d2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2280      	movs	r2, #128	; 0x80
 80098d8:	2100      	movs	r1, #0
 80098da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e069      	b.n	80099b4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2204      	movs	r2, #4
 80098e8:	4013      	ands	r3, r2
 80098ea:	d052      	beq.n	8009992 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	69da      	ldr	r2, [r3, #28]
 80098f2:	2380      	movs	r3, #128	; 0x80
 80098f4:	011b      	lsls	r3, r3, #4
 80098f6:	401a      	ands	r2, r3
 80098f8:	2380      	movs	r3, #128	; 0x80
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d148      	bne.n	8009992 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2280      	movs	r2, #128	; 0x80
 8009906:	0112      	lsls	r2, r2, #4
 8009908:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800990a:	f3ef 8310 	mrs	r3, PRIMASK
 800990e:	613b      	str	r3, [r7, #16]
  return(result);
 8009910:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009914:	2301      	movs	r3, #1
 8009916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f383 8810 	msr	PRIMASK, r3
}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4924      	ldr	r1, [pc, #144]	; (80099bc <UART_WaitOnFlagUntilTimeout+0x18c>)
 800992c:	400a      	ands	r2, r1
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009932:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	f383 8810 	msr	PRIMASK, r3
}
 800993a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800993c:	f3ef 8310 	mrs	r3, PRIMASK
 8009940:	61fb      	str	r3, [r7, #28]
  return(result);
 8009942:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009944:	64bb      	str	r3, [r7, #72]	; 0x48
 8009946:	2301      	movs	r3, #1
 8009948:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	f383 8810 	msr	PRIMASK, r3
}
 8009950:	46c0      	nop			; (mov r8, r8)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2101      	movs	r1, #1
 800995e:	438a      	bics	r2, r1
 8009960:	609a      	str	r2, [r3, #8]
 8009962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009964:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	f383 8810 	msr	PRIMASK, r3
}
 800996c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2284      	movs	r2, #132	; 0x84
 8009972:	2120      	movs	r1, #32
 8009974:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2288      	movs	r2, #136	; 0x88
 800997a:	2120      	movs	r1, #32
 800997c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	228c      	movs	r2, #140	; 0x8c
 8009982:	2120      	movs	r1, #32
 8009984:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2280      	movs	r2, #128	; 0x80
 800998a:	2100      	movs	r1, #0
 800998c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e010      	b.n	80099b4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	4013      	ands	r3, r2
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	425a      	negs	r2, r3
 80099a2:	4153      	adcs	r3, r2
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	001a      	movs	r2, r3
 80099a8:	1dfb      	adds	r3, r7, #7
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d100      	bne.n	80099b2 <UART_WaitOnFlagUntilTimeout+0x182>
 80099b0:	e747      	b.n	8009842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	0018      	movs	r0, r3
 80099b6:	46bd      	mov	sp, r7
 80099b8:	b014      	add	sp, #80	; 0x50
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	fffffe5f 	.word	0xfffffe5f

080099c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2280      	movs	r2, #128	; 0x80
 80099cc:	5c9b      	ldrb	r3, [r3, r2]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d101      	bne.n	80099d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80099d2:	2302      	movs	r3, #2
 80099d4:	e027      	b.n	8009a26 <HAL_UARTEx_DisableFifoMode+0x66>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2280      	movs	r2, #128	; 0x80
 80099da:	2101      	movs	r1, #1
 80099dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2284      	movs	r2, #132	; 0x84
 80099e2:	2124      	movs	r1, #36	; 0x24
 80099e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2101      	movs	r1, #1
 80099fa:	438a      	bics	r2, r1
 80099fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	4a0b      	ldr	r2, [pc, #44]	; (8009a30 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009a02:	4013      	ands	r3, r2
 8009a04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2284      	movs	r2, #132	; 0x84
 8009a18:	2120      	movs	r1, #32
 8009a1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2280      	movs	r2, #128	; 0x80
 8009a20:	2100      	movs	r1, #0
 8009a22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	0018      	movs	r0, r3
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	b004      	add	sp, #16
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	46c0      	nop			; (mov r8, r8)
 8009a30:	dfffffff 	.word	0xdfffffff

08009a34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2280      	movs	r2, #128	; 0x80
 8009a42:	5c9b      	ldrb	r3, [r3, r2]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d101      	bne.n	8009a4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e02e      	b.n	8009aaa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2280      	movs	r2, #128	; 0x80
 8009a50:	2101      	movs	r1, #1
 8009a52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2284      	movs	r2, #132	; 0x84
 8009a58:	2124      	movs	r1, #36	; 0x24
 8009a5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2101      	movs	r1, #1
 8009a70:	438a      	bics	r2, r1
 8009a72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	08d9      	lsrs	r1, r3, #3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	f000 f854 	bl	8009b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2284      	movs	r2, #132	; 0x84
 8009a9c:	2120      	movs	r1, #32
 8009a9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2280      	movs	r2, #128	; 0x80
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	0018      	movs	r0, r3
 8009aac:	46bd      	mov	sp, r7
 8009aae:	b004      	add	sp, #16
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2280      	movs	r2, #128	; 0x80
 8009ac2:	5c9b      	ldrb	r3, [r3, r2]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d101      	bne.n	8009acc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ac8:	2302      	movs	r3, #2
 8009aca:	e02f      	b.n	8009b2c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2280      	movs	r2, #128	; 0x80
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2284      	movs	r2, #132	; 0x84
 8009ad8:	2124      	movs	r1, #36	; 0x24
 8009ada:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2101      	movs	r1, #1
 8009af0:	438a      	bics	r2, r1
 8009af2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	4a0e      	ldr	r2, [pc, #56]	; (8009b34 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	0019      	movs	r1, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f000 f813 	bl	8009b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2284      	movs	r2, #132	; 0x84
 8009b1e:	2120      	movs	r1, #32
 8009b20:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2280      	movs	r2, #128	; 0x80
 8009b26:	2100      	movs	r1, #0
 8009b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	b004      	add	sp, #16
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	f1ffffff 	.word	0xf1ffffff

08009b38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d108      	bne.n	8009b5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	226a      	movs	r2, #106	; 0x6a
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2268      	movs	r2, #104	; 0x68
 8009b54:	2101      	movs	r1, #1
 8009b56:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b58:	e043      	b.n	8009be2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b5a:	260f      	movs	r6, #15
 8009b5c:	19bb      	adds	r3, r7, r6
 8009b5e:	2208      	movs	r2, #8
 8009b60:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b62:	200e      	movs	r0, #14
 8009b64:	183b      	adds	r3, r7, r0
 8009b66:	2208      	movs	r2, #8
 8009b68:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	0e5b      	lsrs	r3, r3, #25
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	240d      	movs	r4, #13
 8009b76:	193b      	adds	r3, r7, r4
 8009b78:	2107      	movs	r1, #7
 8009b7a:	400a      	ands	r2, r1
 8009b7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	0f5b      	lsrs	r3, r3, #29
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	250c      	movs	r5, #12
 8009b8a:	197b      	adds	r3, r7, r5
 8009b8c:	2107      	movs	r1, #7
 8009b8e:	400a      	ands	r2, r1
 8009b90:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b92:	183b      	adds	r3, r7, r0
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	197a      	adds	r2, r7, r5
 8009b98:	7812      	ldrb	r2, [r2, #0]
 8009b9a:	4914      	ldr	r1, [pc, #80]	; (8009bec <UARTEx_SetNbDataToProcess+0xb4>)
 8009b9c:	5c8a      	ldrb	r2, [r1, r2]
 8009b9e:	435a      	muls	r2, r3
 8009ba0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ba2:	197b      	adds	r3, r7, r5
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	4a12      	ldr	r2, [pc, #72]	; (8009bf0 <UARTEx_SetNbDataToProcess+0xb8>)
 8009ba8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009baa:	0019      	movs	r1, r3
 8009bac:	f7f6 fb3e 	bl	800022c <__divsi3>
 8009bb0:	0003      	movs	r3, r0
 8009bb2:	b299      	uxth	r1, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	226a      	movs	r2, #106	; 0x6a
 8009bb8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bba:	19bb      	adds	r3, r7, r6
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	193a      	adds	r2, r7, r4
 8009bc0:	7812      	ldrb	r2, [r2, #0]
 8009bc2:	490a      	ldr	r1, [pc, #40]	; (8009bec <UARTEx_SetNbDataToProcess+0xb4>)
 8009bc4:	5c8a      	ldrb	r2, [r1, r2]
 8009bc6:	435a      	muls	r2, r3
 8009bc8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bca:	193b      	adds	r3, r7, r4
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	4a08      	ldr	r2, [pc, #32]	; (8009bf0 <UARTEx_SetNbDataToProcess+0xb8>)
 8009bd0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bd2:	0019      	movs	r1, r3
 8009bd4:	f7f6 fb2a 	bl	800022c <__divsi3>
 8009bd8:	0003      	movs	r3, r0
 8009bda:	b299      	uxth	r1, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2268      	movs	r2, #104	; 0x68
 8009be0:	5299      	strh	r1, [r3, r2]
}
 8009be2:	46c0      	nop			; (mov r8, r8)
 8009be4:	46bd      	mov	sp, r7
 8009be6:	b005      	add	sp, #20
 8009be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bea:	46c0      	nop			; (mov r8, r8)
 8009bec:	0800af00 	.word	0x0800af00
 8009bf0:	0800af08 	.word	0x0800af08

08009bf4 <calloc>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	4b03      	ldr	r3, [pc, #12]	; (8009c04 <calloc+0x10>)
 8009bf8:	000a      	movs	r2, r1
 8009bfa:	0001      	movs	r1, r0
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	f000 f852 	bl	8009ca6 <_calloc_r>
 8009c02:	bd10      	pop	{r4, pc}
 8009c04:	200000f4 	.word	0x200000f4

08009c08 <__errno>:
 8009c08:	4b01      	ldr	r3, [pc, #4]	; (8009c10 <__errno+0x8>)
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	4770      	bx	lr
 8009c0e:	46c0      	nop			; (mov r8, r8)
 8009c10:	200000f4 	.word	0x200000f4

08009c14 <__libc_init_array>:
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	2600      	movs	r6, #0
 8009c18:	4d0c      	ldr	r5, [pc, #48]	; (8009c4c <__libc_init_array+0x38>)
 8009c1a:	4c0d      	ldr	r4, [pc, #52]	; (8009c50 <__libc_init_array+0x3c>)
 8009c1c:	1b64      	subs	r4, r4, r5
 8009c1e:	10a4      	asrs	r4, r4, #2
 8009c20:	42a6      	cmp	r6, r4
 8009c22:	d109      	bne.n	8009c38 <__libc_init_array+0x24>
 8009c24:	2600      	movs	r6, #0
 8009c26:	f001 f88f 	bl	800ad48 <_init>
 8009c2a:	4d0a      	ldr	r5, [pc, #40]	; (8009c54 <__libc_init_array+0x40>)
 8009c2c:	4c0a      	ldr	r4, [pc, #40]	; (8009c58 <__libc_init_array+0x44>)
 8009c2e:	1b64      	subs	r4, r4, r5
 8009c30:	10a4      	asrs	r4, r4, #2
 8009c32:	42a6      	cmp	r6, r4
 8009c34:	d105      	bne.n	8009c42 <__libc_init_array+0x2e>
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	00b3      	lsls	r3, r6, #2
 8009c3a:	58eb      	ldr	r3, [r5, r3]
 8009c3c:	4798      	blx	r3
 8009c3e:	3601      	adds	r6, #1
 8009c40:	e7ee      	b.n	8009c20 <__libc_init_array+0xc>
 8009c42:	00b3      	lsls	r3, r6, #2
 8009c44:	58eb      	ldr	r3, [r5, r3]
 8009c46:	4798      	blx	r3
 8009c48:	3601      	adds	r6, #1
 8009c4a:	e7f2      	b.n	8009c32 <__libc_init_array+0x1e>
 8009c4c:	0800b064 	.word	0x0800b064
 8009c50:	0800b064 	.word	0x0800b064
 8009c54:	0800b064 	.word	0x0800b064
 8009c58:	0800b068 	.word	0x0800b068

08009c5c <malloc>:
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	4b03      	ldr	r3, [pc, #12]	; (8009c6c <malloc+0x10>)
 8009c60:	0001      	movs	r1, r0
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	f000 f878 	bl	8009d58 <_malloc_r>
 8009c68:	bd10      	pop	{r4, pc}
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	200000f4 	.word	0x200000f4

08009c70 <free>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	4b03      	ldr	r3, [pc, #12]	; (8009c80 <free+0x10>)
 8009c74:	0001      	movs	r1, r0
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	f000 f824 	bl	8009cc4 <_free_r>
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	200000f4 	.word	0x200000f4

08009c84 <memcpy>:
 8009c84:	2300      	movs	r3, #0
 8009c86:	b510      	push	{r4, lr}
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d100      	bne.n	8009c8e <memcpy+0xa>
 8009c8c:	bd10      	pop	{r4, pc}
 8009c8e:	5ccc      	ldrb	r4, [r1, r3]
 8009c90:	54c4      	strb	r4, [r0, r3]
 8009c92:	3301      	adds	r3, #1
 8009c94:	e7f8      	b.n	8009c88 <memcpy+0x4>

08009c96 <memset>:
 8009c96:	0003      	movs	r3, r0
 8009c98:	1882      	adds	r2, r0, r2
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d100      	bne.n	8009ca0 <memset+0xa>
 8009c9e:	4770      	bx	lr
 8009ca0:	7019      	strb	r1, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	e7f9      	b.n	8009c9a <memset+0x4>

08009ca6 <_calloc_r>:
 8009ca6:	434a      	muls	r2, r1
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	0011      	movs	r1, r2
 8009cac:	0015      	movs	r5, r2
 8009cae:	f000 f853 	bl	8009d58 <_malloc_r>
 8009cb2:	1e04      	subs	r4, r0, #0
 8009cb4:	d003      	beq.n	8009cbe <_calloc_r+0x18>
 8009cb6:	002a      	movs	r2, r5
 8009cb8:	2100      	movs	r1, #0
 8009cba:	f7ff ffec 	bl	8009c96 <memset>
 8009cbe:	0020      	movs	r0, r4
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009cc4 <_free_r>:
 8009cc4:	b570      	push	{r4, r5, r6, lr}
 8009cc6:	0005      	movs	r5, r0
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	d010      	beq.n	8009cee <_free_r+0x2a>
 8009ccc:	1f0c      	subs	r4, r1, #4
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	da00      	bge.n	8009cd6 <_free_r+0x12>
 8009cd4:	18e4      	adds	r4, r4, r3
 8009cd6:	0028      	movs	r0, r5
 8009cd8:	f000 f91a 	bl	8009f10 <__malloc_lock>
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	; (8009d54 <_free_r+0x90>)
 8009cde:	6813      	ldr	r3, [r2, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d105      	bne.n	8009cf0 <_free_r+0x2c>
 8009ce4:	6063      	str	r3, [r4, #4]
 8009ce6:	6014      	str	r4, [r2, #0]
 8009ce8:	0028      	movs	r0, r5
 8009cea:	f000 f919 	bl	8009f20 <__malloc_unlock>
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	42a3      	cmp	r3, r4
 8009cf2:	d908      	bls.n	8009d06 <_free_r+0x42>
 8009cf4:	6821      	ldr	r1, [r4, #0]
 8009cf6:	1860      	adds	r0, r4, r1
 8009cf8:	4283      	cmp	r3, r0
 8009cfa:	d1f3      	bne.n	8009ce4 <_free_r+0x20>
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	1841      	adds	r1, r0, r1
 8009d02:	6021      	str	r1, [r4, #0]
 8009d04:	e7ee      	b.n	8009ce4 <_free_r+0x20>
 8009d06:	001a      	movs	r2, r3
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <_free_r+0x4e>
 8009d0e:	42a3      	cmp	r3, r4
 8009d10:	d9f9      	bls.n	8009d06 <_free_r+0x42>
 8009d12:	6811      	ldr	r1, [r2, #0]
 8009d14:	1850      	adds	r0, r2, r1
 8009d16:	42a0      	cmp	r0, r4
 8009d18:	d10b      	bne.n	8009d32 <_free_r+0x6e>
 8009d1a:	6820      	ldr	r0, [r4, #0]
 8009d1c:	1809      	adds	r1, r1, r0
 8009d1e:	1850      	adds	r0, r2, r1
 8009d20:	6011      	str	r1, [r2, #0]
 8009d22:	4283      	cmp	r3, r0
 8009d24:	d1e0      	bne.n	8009ce8 <_free_r+0x24>
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	1841      	adds	r1, r0, r1
 8009d2c:	6011      	str	r1, [r2, #0]
 8009d2e:	6053      	str	r3, [r2, #4]
 8009d30:	e7da      	b.n	8009ce8 <_free_r+0x24>
 8009d32:	42a0      	cmp	r0, r4
 8009d34:	d902      	bls.n	8009d3c <_free_r+0x78>
 8009d36:	230c      	movs	r3, #12
 8009d38:	602b      	str	r3, [r5, #0]
 8009d3a:	e7d5      	b.n	8009ce8 <_free_r+0x24>
 8009d3c:	6821      	ldr	r1, [r4, #0]
 8009d3e:	1860      	adds	r0, r4, r1
 8009d40:	4283      	cmp	r3, r0
 8009d42:	d103      	bne.n	8009d4c <_free_r+0x88>
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	1841      	adds	r1, r0, r1
 8009d4a:	6021      	str	r1, [r4, #0]
 8009d4c:	6063      	str	r3, [r4, #4]
 8009d4e:	6054      	str	r4, [r2, #4]
 8009d50:	e7ca      	b.n	8009ce8 <_free_r+0x24>
 8009d52:	46c0      	nop			; (mov r8, r8)
 8009d54:	20000584 	.word	0x20000584

08009d58 <_malloc_r>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	1ccd      	adds	r5, r1, #3
 8009d5e:	439d      	bics	r5, r3
 8009d60:	3508      	adds	r5, #8
 8009d62:	0006      	movs	r6, r0
 8009d64:	2d0c      	cmp	r5, #12
 8009d66:	d21f      	bcs.n	8009da8 <_malloc_r+0x50>
 8009d68:	250c      	movs	r5, #12
 8009d6a:	42a9      	cmp	r1, r5
 8009d6c:	d81e      	bhi.n	8009dac <_malloc_r+0x54>
 8009d6e:	0030      	movs	r0, r6
 8009d70:	f000 f8ce 	bl	8009f10 <__malloc_lock>
 8009d74:	4925      	ldr	r1, [pc, #148]	; (8009e0c <_malloc_r+0xb4>)
 8009d76:	680a      	ldr	r2, [r1, #0]
 8009d78:	0014      	movs	r4, r2
 8009d7a:	2c00      	cmp	r4, #0
 8009d7c:	d11a      	bne.n	8009db4 <_malloc_r+0x5c>
 8009d7e:	4f24      	ldr	r7, [pc, #144]	; (8009e10 <_malloc_r+0xb8>)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d104      	bne.n	8009d90 <_malloc_r+0x38>
 8009d86:	0021      	movs	r1, r4
 8009d88:	0030      	movs	r0, r6
 8009d8a:	f000 f881 	bl	8009e90 <_sbrk_r>
 8009d8e:	6038      	str	r0, [r7, #0]
 8009d90:	0029      	movs	r1, r5
 8009d92:	0030      	movs	r0, r6
 8009d94:	f000 f87c 	bl	8009e90 <_sbrk_r>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d12b      	bne.n	8009df4 <_malloc_r+0x9c>
 8009d9c:	230c      	movs	r3, #12
 8009d9e:	0030      	movs	r0, r6
 8009da0:	6033      	str	r3, [r6, #0]
 8009da2:	f000 f8bd 	bl	8009f20 <__malloc_unlock>
 8009da6:	e003      	b.n	8009db0 <_malloc_r+0x58>
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	dade      	bge.n	8009d6a <_malloc_r+0x12>
 8009dac:	230c      	movs	r3, #12
 8009dae:	6033      	str	r3, [r6, #0]
 8009db0:	2000      	movs	r0, #0
 8009db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	1b5b      	subs	r3, r3, r5
 8009db8:	d419      	bmi.n	8009dee <_malloc_r+0x96>
 8009dba:	2b0b      	cmp	r3, #11
 8009dbc:	d903      	bls.n	8009dc6 <_malloc_r+0x6e>
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	18e4      	adds	r4, r4, r3
 8009dc2:	6025      	str	r5, [r4, #0]
 8009dc4:	e003      	b.n	8009dce <_malloc_r+0x76>
 8009dc6:	6863      	ldr	r3, [r4, #4]
 8009dc8:	42a2      	cmp	r2, r4
 8009dca:	d10e      	bne.n	8009dea <_malloc_r+0x92>
 8009dcc:	600b      	str	r3, [r1, #0]
 8009dce:	0030      	movs	r0, r6
 8009dd0:	f000 f8a6 	bl	8009f20 <__malloc_unlock>
 8009dd4:	0020      	movs	r0, r4
 8009dd6:	2207      	movs	r2, #7
 8009dd8:	300b      	adds	r0, #11
 8009dda:	1d23      	adds	r3, r4, #4
 8009ddc:	4390      	bics	r0, r2
 8009dde:	1ac2      	subs	r2, r0, r3
 8009de0:	4298      	cmp	r0, r3
 8009de2:	d0e6      	beq.n	8009db2 <_malloc_r+0x5a>
 8009de4:	1a1b      	subs	r3, r3, r0
 8009de6:	50a3      	str	r3, [r4, r2]
 8009de8:	e7e3      	b.n	8009db2 <_malloc_r+0x5a>
 8009dea:	6053      	str	r3, [r2, #4]
 8009dec:	e7ef      	b.n	8009dce <_malloc_r+0x76>
 8009dee:	0022      	movs	r2, r4
 8009df0:	6864      	ldr	r4, [r4, #4]
 8009df2:	e7c2      	b.n	8009d7a <_malloc_r+0x22>
 8009df4:	2303      	movs	r3, #3
 8009df6:	1cc4      	adds	r4, r0, #3
 8009df8:	439c      	bics	r4, r3
 8009dfa:	42a0      	cmp	r0, r4
 8009dfc:	d0e1      	beq.n	8009dc2 <_malloc_r+0x6a>
 8009dfe:	1a21      	subs	r1, r4, r0
 8009e00:	0030      	movs	r0, r6
 8009e02:	f000 f845 	bl	8009e90 <_sbrk_r>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	d1db      	bne.n	8009dc2 <_malloc_r+0x6a>
 8009e0a:	e7c7      	b.n	8009d9c <_malloc_r+0x44>
 8009e0c:	20000584 	.word	0x20000584
 8009e10:	20000588 	.word	0x20000588

08009e14 <rand>:
 8009e14:	4b16      	ldr	r3, [pc, #88]	; (8009e70 <rand+0x5c>)
 8009e16:	b510      	push	{r4, lr}
 8009e18:	681c      	ldr	r4, [r3, #0]
 8009e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d116      	bne.n	8009e4e <rand+0x3a>
 8009e20:	2018      	movs	r0, #24
 8009e22:	f7ff ff1b 	bl	8009c5c <malloc>
 8009e26:	1e02      	subs	r2, r0, #0
 8009e28:	63a0      	str	r0, [r4, #56]	; 0x38
 8009e2a:	d104      	bne.n	8009e36 <rand+0x22>
 8009e2c:	214e      	movs	r1, #78	; 0x4e
 8009e2e:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <rand+0x60>)
 8009e30:	4811      	ldr	r0, [pc, #68]	; (8009e78 <rand+0x64>)
 8009e32:	f000 f83f 	bl	8009eb4 <__assert_func>
 8009e36:	4b11      	ldr	r3, [pc, #68]	; (8009e7c <rand+0x68>)
 8009e38:	2100      	movs	r1, #0
 8009e3a:	6003      	str	r3, [r0, #0]
 8009e3c:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <rand+0x6c>)
 8009e3e:	6043      	str	r3, [r0, #4]
 8009e40:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <rand+0x70>)
 8009e42:	6083      	str	r3, [r0, #8]
 8009e44:	230b      	movs	r3, #11
 8009e46:	8183      	strh	r3, [r0, #12]
 8009e48:	2001      	movs	r0, #1
 8009e4a:	6110      	str	r0, [r2, #16]
 8009e4c:	6151      	str	r1, [r2, #20]
 8009e4e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009e50:	4a0d      	ldr	r2, [pc, #52]	; (8009e88 <rand+0x74>)
 8009e52:	6920      	ldr	r0, [r4, #16]
 8009e54:	6961      	ldr	r1, [r4, #20]
 8009e56:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <rand+0x78>)
 8009e58:	f7f6 faf4 	bl	8000444 <__aeabi_lmul>
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	2300      	movs	r3, #0
 8009e60:	1880      	adds	r0, r0, r2
 8009e62:	4159      	adcs	r1, r3
 8009e64:	6120      	str	r0, [r4, #16]
 8009e66:	6161      	str	r1, [r4, #20]
 8009e68:	0048      	lsls	r0, r1, #1
 8009e6a:	0840      	lsrs	r0, r0, #1
 8009e6c:	bd10      	pop	{r4, pc}
 8009e6e:	46c0      	nop			; (mov r8, r8)
 8009e70:	200000f4 	.word	0x200000f4
 8009e74:	0800af14 	.word	0x0800af14
 8009e78:	0800af2b 	.word	0x0800af2b
 8009e7c:	abcd330e 	.word	0xabcd330e
 8009e80:	e66d1234 	.word	0xe66d1234
 8009e84:	0005deec 	.word	0x0005deec
 8009e88:	4c957f2d 	.word	0x4c957f2d
 8009e8c:	5851f42d 	.word	0x5851f42d

08009e90 <_sbrk_r>:
 8009e90:	2300      	movs	r3, #0
 8009e92:	b570      	push	{r4, r5, r6, lr}
 8009e94:	4d06      	ldr	r5, [pc, #24]	; (8009eb0 <_sbrk_r+0x20>)
 8009e96:	0004      	movs	r4, r0
 8009e98:	0008      	movs	r0, r1
 8009e9a:	602b      	str	r3, [r5, #0]
 8009e9c:	f7f6 fed8 	bl	8000c50 <_sbrk>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d103      	bne.n	8009eac <_sbrk_r+0x1c>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d000      	beq.n	8009eac <_sbrk_r+0x1c>
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	bd70      	pop	{r4, r5, r6, pc}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	20000768 	.word	0x20000768

08009eb4 <__assert_func>:
 8009eb4:	b530      	push	{r4, r5, lr}
 8009eb6:	0014      	movs	r4, r2
 8009eb8:	001a      	movs	r2, r3
 8009eba:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <__assert_func+0x2c>)
 8009ebc:	0005      	movs	r5, r0
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	68d8      	ldr	r0, [r3, #12]
 8009ec4:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <__assert_func+0x30>)
 8009ec6:	2c00      	cmp	r4, #0
 8009ec8:	d101      	bne.n	8009ece <__assert_func+0x1a>
 8009eca:	4b07      	ldr	r3, [pc, #28]	; (8009ee8 <__assert_func+0x34>)
 8009ecc:	001c      	movs	r4, r3
 8009ece:	9301      	str	r3, [sp, #4]
 8009ed0:	9100      	str	r1, [sp, #0]
 8009ed2:	002b      	movs	r3, r5
 8009ed4:	4905      	ldr	r1, [pc, #20]	; (8009eec <__assert_func+0x38>)
 8009ed6:	9402      	str	r4, [sp, #8]
 8009ed8:	f000 f80a 	bl	8009ef0 <fiprintf>
 8009edc:	f000 fbda 	bl	800a694 <abort>
 8009ee0:	200000f4 	.word	0x200000f4
 8009ee4:	0800af8a 	.word	0x0800af8a
 8009ee8:	0800afc5 	.word	0x0800afc5
 8009eec:	0800af97 	.word	0x0800af97

08009ef0 <fiprintf>:
 8009ef0:	b40e      	push	{r1, r2, r3}
 8009ef2:	b503      	push	{r0, r1, lr}
 8009ef4:	0001      	movs	r1, r0
 8009ef6:	ab03      	add	r3, sp, #12
 8009ef8:	4804      	ldr	r0, [pc, #16]	; (8009f0c <fiprintf+0x1c>)
 8009efa:	cb04      	ldmia	r3!, {r2}
 8009efc:	6800      	ldr	r0, [r0, #0]
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	f000 f83e 	bl	8009f80 <_vfiprintf_r>
 8009f04:	b002      	add	sp, #8
 8009f06:	bc08      	pop	{r3}
 8009f08:	b003      	add	sp, #12
 8009f0a:	4718      	bx	r3
 8009f0c:	200000f4 	.word	0x200000f4

08009f10 <__malloc_lock>:
 8009f10:	b510      	push	{r4, lr}
 8009f12:	4802      	ldr	r0, [pc, #8]	; (8009f1c <__malloc_lock+0xc>)
 8009f14:	f000 fd95 	bl	800aa42 <__retarget_lock_acquire_recursive>
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	46c0      	nop			; (mov r8, r8)
 8009f1c:	20000770 	.word	0x20000770

08009f20 <__malloc_unlock>:
 8009f20:	b510      	push	{r4, lr}
 8009f22:	4802      	ldr	r0, [pc, #8]	; (8009f2c <__malloc_unlock+0xc>)
 8009f24:	f000 fd8e 	bl	800aa44 <__retarget_lock_release_recursive>
 8009f28:	bd10      	pop	{r4, pc}
 8009f2a:	46c0      	nop			; (mov r8, r8)
 8009f2c:	20000770 	.word	0x20000770

08009f30 <__sfputc_r>:
 8009f30:	6893      	ldr	r3, [r2, #8]
 8009f32:	b510      	push	{r4, lr}
 8009f34:	3b01      	subs	r3, #1
 8009f36:	6093      	str	r3, [r2, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	da04      	bge.n	8009f46 <__sfputc_r+0x16>
 8009f3c:	6994      	ldr	r4, [r2, #24]
 8009f3e:	42a3      	cmp	r3, r4
 8009f40:	db07      	blt.n	8009f52 <__sfputc_r+0x22>
 8009f42:	290a      	cmp	r1, #10
 8009f44:	d005      	beq.n	8009f52 <__sfputc_r+0x22>
 8009f46:	6813      	ldr	r3, [r2, #0]
 8009f48:	1c58      	adds	r0, r3, #1
 8009f4a:	6010      	str	r0, [r2, #0]
 8009f4c:	7019      	strb	r1, [r3, #0]
 8009f4e:	0008      	movs	r0, r1
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	f000 fad1 	bl	800a4f8 <__swbuf_r>
 8009f56:	0001      	movs	r1, r0
 8009f58:	e7f9      	b.n	8009f4e <__sfputc_r+0x1e>

08009f5a <__sfputs_r>:
 8009f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5c:	0006      	movs	r6, r0
 8009f5e:	000f      	movs	r7, r1
 8009f60:	0014      	movs	r4, r2
 8009f62:	18d5      	adds	r5, r2, r3
 8009f64:	42ac      	cmp	r4, r5
 8009f66:	d101      	bne.n	8009f6c <__sfputs_r+0x12>
 8009f68:	2000      	movs	r0, #0
 8009f6a:	e007      	b.n	8009f7c <__sfputs_r+0x22>
 8009f6c:	7821      	ldrb	r1, [r4, #0]
 8009f6e:	003a      	movs	r2, r7
 8009f70:	0030      	movs	r0, r6
 8009f72:	f7ff ffdd 	bl	8009f30 <__sfputc_r>
 8009f76:	3401      	adds	r4, #1
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d1f3      	bne.n	8009f64 <__sfputs_r+0xa>
 8009f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f80 <_vfiprintf_r>:
 8009f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f82:	b0a1      	sub	sp, #132	; 0x84
 8009f84:	0006      	movs	r6, r0
 8009f86:	000c      	movs	r4, r1
 8009f88:	001f      	movs	r7, r3
 8009f8a:	9203      	str	r2, [sp, #12]
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d004      	beq.n	8009f9a <_vfiprintf_r+0x1a>
 8009f90:	6983      	ldr	r3, [r0, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <_vfiprintf_r+0x1a>
 8009f96:	f000 fcb3 	bl	800a900 <__sinit>
 8009f9a:	4b8e      	ldr	r3, [pc, #568]	; (800a1d4 <_vfiprintf_r+0x254>)
 8009f9c:	429c      	cmp	r4, r3
 8009f9e:	d11c      	bne.n	8009fda <_vfiprintf_r+0x5a>
 8009fa0:	6874      	ldr	r4, [r6, #4]
 8009fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fa4:	07db      	lsls	r3, r3, #31
 8009fa6:	d405      	bmi.n	8009fb4 <_vfiprintf_r+0x34>
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	059b      	lsls	r3, r3, #22
 8009fac:	d402      	bmi.n	8009fb4 <_vfiprintf_r+0x34>
 8009fae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fb0:	f000 fd47 	bl	800aa42 <__retarget_lock_acquire_recursive>
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	071b      	lsls	r3, r3, #28
 8009fb8:	d502      	bpl.n	8009fc0 <_vfiprintf_r+0x40>
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d11d      	bne.n	8009ffc <_vfiprintf_r+0x7c>
 8009fc0:	0021      	movs	r1, r4
 8009fc2:	0030      	movs	r0, r6
 8009fc4:	f000 faee 	bl	800a5a4 <__swsetup_r>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d017      	beq.n	8009ffc <_vfiprintf_r+0x7c>
 8009fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fce:	07db      	lsls	r3, r3, #31
 8009fd0:	d50d      	bpl.n	8009fee <_vfiprintf_r+0x6e>
 8009fd2:	2001      	movs	r0, #1
 8009fd4:	4240      	negs	r0, r0
 8009fd6:	b021      	add	sp, #132	; 0x84
 8009fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fda:	4b7f      	ldr	r3, [pc, #508]	; (800a1d8 <_vfiprintf_r+0x258>)
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	d101      	bne.n	8009fe4 <_vfiprintf_r+0x64>
 8009fe0:	68b4      	ldr	r4, [r6, #8]
 8009fe2:	e7de      	b.n	8009fa2 <_vfiprintf_r+0x22>
 8009fe4:	4b7d      	ldr	r3, [pc, #500]	; (800a1dc <_vfiprintf_r+0x25c>)
 8009fe6:	429c      	cmp	r4, r3
 8009fe8:	d1db      	bne.n	8009fa2 <_vfiprintf_r+0x22>
 8009fea:	68f4      	ldr	r4, [r6, #12]
 8009fec:	e7d9      	b.n	8009fa2 <_vfiprintf_r+0x22>
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	059b      	lsls	r3, r3, #22
 8009ff2:	d4ee      	bmi.n	8009fd2 <_vfiprintf_r+0x52>
 8009ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff6:	f000 fd25 	bl	800aa44 <__retarget_lock_release_recursive>
 8009ffa:	e7ea      	b.n	8009fd2 <_vfiprintf_r+0x52>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	ad08      	add	r5, sp, #32
 800a000:	616b      	str	r3, [r5, #20]
 800a002:	3320      	adds	r3, #32
 800a004:	766b      	strb	r3, [r5, #25]
 800a006:	3310      	adds	r3, #16
 800a008:	76ab      	strb	r3, [r5, #26]
 800a00a:	9707      	str	r7, [sp, #28]
 800a00c:	9f03      	ldr	r7, [sp, #12]
 800a00e:	783b      	ldrb	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <_vfiprintf_r+0x98>
 800a014:	2b25      	cmp	r3, #37	; 0x25
 800a016:	d14e      	bne.n	800a0b6 <_vfiprintf_r+0x136>
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	1afb      	subs	r3, r7, r3
 800a01c:	9305      	str	r3, [sp, #20]
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	429f      	cmp	r7, r3
 800a022:	d00d      	beq.n	800a040 <_vfiprintf_r+0xc0>
 800a024:	9b05      	ldr	r3, [sp, #20]
 800a026:	0021      	movs	r1, r4
 800a028:	0030      	movs	r0, r6
 800a02a:	9a03      	ldr	r2, [sp, #12]
 800a02c:	f7ff ff95 	bl	8009f5a <__sfputs_r>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d100      	bne.n	800a036 <_vfiprintf_r+0xb6>
 800a034:	e0b5      	b.n	800a1a2 <_vfiprintf_r+0x222>
 800a036:	696a      	ldr	r2, [r5, #20]
 800a038:	9b05      	ldr	r3, [sp, #20]
 800a03a:	4694      	mov	ip, r2
 800a03c:	4463      	add	r3, ip
 800a03e:	616b      	str	r3, [r5, #20]
 800a040:	783b      	ldrb	r3, [r7, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d100      	bne.n	800a048 <_vfiprintf_r+0xc8>
 800a046:	e0ac      	b.n	800a1a2 <_vfiprintf_r+0x222>
 800a048:	2201      	movs	r2, #1
 800a04a:	1c7b      	adds	r3, r7, #1
 800a04c:	9303      	str	r3, [sp, #12]
 800a04e:	2300      	movs	r3, #0
 800a050:	4252      	negs	r2, r2
 800a052:	606a      	str	r2, [r5, #4]
 800a054:	a904      	add	r1, sp, #16
 800a056:	3254      	adds	r2, #84	; 0x54
 800a058:	1852      	adds	r2, r2, r1
 800a05a:	602b      	str	r3, [r5, #0]
 800a05c:	60eb      	str	r3, [r5, #12]
 800a05e:	60ab      	str	r3, [r5, #8]
 800a060:	7013      	strb	r3, [r2, #0]
 800a062:	65ab      	str	r3, [r5, #88]	; 0x58
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	2205      	movs	r2, #5
 800a068:	7819      	ldrb	r1, [r3, #0]
 800a06a:	485d      	ldr	r0, [pc, #372]	; (800a1e0 <_vfiprintf_r+0x260>)
 800a06c:	f000 fd58 	bl	800ab20 <memchr>
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	1c5f      	adds	r7, r3, #1
 800a074:	2800      	cmp	r0, #0
 800a076:	d120      	bne.n	800a0ba <_vfiprintf_r+0x13a>
 800a078:	682a      	ldr	r2, [r5, #0]
 800a07a:	06d3      	lsls	r3, r2, #27
 800a07c:	d504      	bpl.n	800a088 <_vfiprintf_r+0x108>
 800a07e:	2353      	movs	r3, #83	; 0x53
 800a080:	a904      	add	r1, sp, #16
 800a082:	185b      	adds	r3, r3, r1
 800a084:	2120      	movs	r1, #32
 800a086:	7019      	strb	r1, [r3, #0]
 800a088:	0713      	lsls	r3, r2, #28
 800a08a:	d504      	bpl.n	800a096 <_vfiprintf_r+0x116>
 800a08c:	2353      	movs	r3, #83	; 0x53
 800a08e:	a904      	add	r1, sp, #16
 800a090:	185b      	adds	r3, r3, r1
 800a092:	212b      	movs	r1, #43	; 0x2b
 800a094:	7019      	strb	r1, [r3, #0]
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b2a      	cmp	r3, #42	; 0x2a
 800a09c:	d016      	beq.n	800a0cc <_vfiprintf_r+0x14c>
 800a09e:	2100      	movs	r1, #0
 800a0a0:	68eb      	ldr	r3, [r5, #12]
 800a0a2:	9f03      	ldr	r7, [sp, #12]
 800a0a4:	783a      	ldrb	r2, [r7, #0]
 800a0a6:	1c78      	adds	r0, r7, #1
 800a0a8:	3a30      	subs	r2, #48	; 0x30
 800a0aa:	4684      	mov	ip, r0
 800a0ac:	2a09      	cmp	r2, #9
 800a0ae:	d94f      	bls.n	800a150 <_vfiprintf_r+0x1d0>
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	d111      	bne.n	800a0d8 <_vfiprintf_r+0x158>
 800a0b4:	e017      	b.n	800a0e6 <_vfiprintf_r+0x166>
 800a0b6:	3701      	adds	r7, #1
 800a0b8:	e7a9      	b.n	800a00e <_vfiprintf_r+0x8e>
 800a0ba:	4b49      	ldr	r3, [pc, #292]	; (800a1e0 <_vfiprintf_r+0x260>)
 800a0bc:	682a      	ldr	r2, [r5, #0]
 800a0be:	1ac0      	subs	r0, r0, r3
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	4083      	lsls	r3, r0
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	602b      	str	r3, [r5, #0]
 800a0c8:	9703      	str	r7, [sp, #12]
 800a0ca:	e7cb      	b.n	800a064 <_vfiprintf_r+0xe4>
 800a0cc:	9b07      	ldr	r3, [sp, #28]
 800a0ce:	1d19      	adds	r1, r3, #4
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	9107      	str	r1, [sp, #28]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	db01      	blt.n	800a0dc <_vfiprintf_r+0x15c>
 800a0d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0da:	e004      	b.n	800a0e6 <_vfiprintf_r+0x166>
 800a0dc:	425b      	negs	r3, r3
 800a0de:	60eb      	str	r3, [r5, #12]
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	602b      	str	r3, [r5, #0]
 800a0e6:	783b      	ldrb	r3, [r7, #0]
 800a0e8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ea:	d10a      	bne.n	800a102 <_vfiprintf_r+0x182>
 800a0ec:	787b      	ldrb	r3, [r7, #1]
 800a0ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f0:	d137      	bne.n	800a162 <_vfiprintf_r+0x1e2>
 800a0f2:	9b07      	ldr	r3, [sp, #28]
 800a0f4:	3702      	adds	r7, #2
 800a0f6:	1d1a      	adds	r2, r3, #4
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	9207      	str	r2, [sp, #28]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	db2d      	blt.n	800a15c <_vfiprintf_r+0x1dc>
 800a100:	9309      	str	r3, [sp, #36]	; 0x24
 800a102:	2203      	movs	r2, #3
 800a104:	7839      	ldrb	r1, [r7, #0]
 800a106:	4837      	ldr	r0, [pc, #220]	; (800a1e4 <_vfiprintf_r+0x264>)
 800a108:	f000 fd0a 	bl	800ab20 <memchr>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d007      	beq.n	800a120 <_vfiprintf_r+0x1a0>
 800a110:	4b34      	ldr	r3, [pc, #208]	; (800a1e4 <_vfiprintf_r+0x264>)
 800a112:	682a      	ldr	r2, [r5, #0]
 800a114:	1ac0      	subs	r0, r0, r3
 800a116:	2340      	movs	r3, #64	; 0x40
 800a118:	4083      	lsls	r3, r0
 800a11a:	4313      	orrs	r3, r2
 800a11c:	3701      	adds	r7, #1
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	7839      	ldrb	r1, [r7, #0]
 800a122:	1c7b      	adds	r3, r7, #1
 800a124:	2206      	movs	r2, #6
 800a126:	4830      	ldr	r0, [pc, #192]	; (800a1e8 <_vfiprintf_r+0x268>)
 800a128:	9303      	str	r3, [sp, #12]
 800a12a:	7629      	strb	r1, [r5, #24]
 800a12c:	f000 fcf8 	bl	800ab20 <memchr>
 800a130:	2800      	cmp	r0, #0
 800a132:	d045      	beq.n	800a1c0 <_vfiprintf_r+0x240>
 800a134:	4b2d      	ldr	r3, [pc, #180]	; (800a1ec <_vfiprintf_r+0x26c>)
 800a136:	2b00      	cmp	r3, #0
 800a138:	d127      	bne.n	800a18a <_vfiprintf_r+0x20a>
 800a13a:	2207      	movs	r2, #7
 800a13c:	9b07      	ldr	r3, [sp, #28]
 800a13e:	3307      	adds	r3, #7
 800a140:	4393      	bics	r3, r2
 800a142:	3308      	adds	r3, #8
 800a144:	9307      	str	r3, [sp, #28]
 800a146:	696b      	ldr	r3, [r5, #20]
 800a148:	9a04      	ldr	r2, [sp, #16]
 800a14a:	189b      	adds	r3, r3, r2
 800a14c:	616b      	str	r3, [r5, #20]
 800a14e:	e75d      	b.n	800a00c <_vfiprintf_r+0x8c>
 800a150:	210a      	movs	r1, #10
 800a152:	434b      	muls	r3, r1
 800a154:	4667      	mov	r7, ip
 800a156:	189b      	adds	r3, r3, r2
 800a158:	3909      	subs	r1, #9
 800a15a:	e7a3      	b.n	800a0a4 <_vfiprintf_r+0x124>
 800a15c:	2301      	movs	r3, #1
 800a15e:	425b      	negs	r3, r3
 800a160:	e7ce      	b.n	800a100 <_vfiprintf_r+0x180>
 800a162:	2300      	movs	r3, #0
 800a164:	001a      	movs	r2, r3
 800a166:	3701      	adds	r7, #1
 800a168:	606b      	str	r3, [r5, #4]
 800a16a:	7839      	ldrb	r1, [r7, #0]
 800a16c:	1c78      	adds	r0, r7, #1
 800a16e:	3930      	subs	r1, #48	; 0x30
 800a170:	4684      	mov	ip, r0
 800a172:	2909      	cmp	r1, #9
 800a174:	d903      	bls.n	800a17e <_vfiprintf_r+0x1fe>
 800a176:	2b00      	cmp	r3, #0
 800a178:	d0c3      	beq.n	800a102 <_vfiprintf_r+0x182>
 800a17a:	9209      	str	r2, [sp, #36]	; 0x24
 800a17c:	e7c1      	b.n	800a102 <_vfiprintf_r+0x182>
 800a17e:	230a      	movs	r3, #10
 800a180:	435a      	muls	r2, r3
 800a182:	4667      	mov	r7, ip
 800a184:	1852      	adds	r2, r2, r1
 800a186:	3b09      	subs	r3, #9
 800a188:	e7ef      	b.n	800a16a <_vfiprintf_r+0x1ea>
 800a18a:	ab07      	add	r3, sp, #28
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	0022      	movs	r2, r4
 800a190:	0029      	movs	r1, r5
 800a192:	0030      	movs	r0, r6
 800a194:	4b16      	ldr	r3, [pc, #88]	; (800a1f0 <_vfiprintf_r+0x270>)
 800a196:	e000      	b.n	800a19a <_vfiprintf_r+0x21a>
 800a198:	bf00      	nop
 800a19a:	9004      	str	r0, [sp, #16]
 800a19c:	9b04      	ldr	r3, [sp, #16]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	d1d1      	bne.n	800a146 <_vfiprintf_r+0x1c6>
 800a1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1a4:	07db      	lsls	r3, r3, #31
 800a1a6:	d405      	bmi.n	800a1b4 <_vfiprintf_r+0x234>
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	059b      	lsls	r3, r3, #22
 800a1ac:	d402      	bmi.n	800a1b4 <_vfiprintf_r+0x234>
 800a1ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1b0:	f000 fc48 	bl	800aa44 <__retarget_lock_release_recursive>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	065b      	lsls	r3, r3, #25
 800a1b8:	d500      	bpl.n	800a1bc <_vfiprintf_r+0x23c>
 800a1ba:	e70a      	b.n	8009fd2 <_vfiprintf_r+0x52>
 800a1bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a1be:	e70a      	b.n	8009fd6 <_vfiprintf_r+0x56>
 800a1c0:	ab07      	add	r3, sp, #28
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	0022      	movs	r2, r4
 800a1c6:	0029      	movs	r1, r5
 800a1c8:	0030      	movs	r0, r6
 800a1ca:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <_vfiprintf_r+0x270>)
 800a1cc:	f000 f882 	bl	800a2d4 <_printf_i>
 800a1d0:	e7e3      	b.n	800a19a <_vfiprintf_r+0x21a>
 800a1d2:	46c0      	nop			; (mov r8, r8)
 800a1d4:	0800b01c 	.word	0x0800b01c
 800a1d8:	0800b03c 	.word	0x0800b03c
 800a1dc:	0800affc 	.word	0x0800affc
 800a1e0:	0800afc6 	.word	0x0800afc6
 800a1e4:	0800afcc 	.word	0x0800afcc
 800a1e8:	0800afd0 	.word	0x0800afd0
 800a1ec:	00000000 	.word	0x00000000
 800a1f0:	08009f5b 	.word	0x08009f5b

0800a1f4 <_printf_common>:
 800a1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1f6:	0015      	movs	r5, r2
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	688a      	ldr	r2, [r1, #8]
 800a1fc:	690b      	ldr	r3, [r1, #16]
 800a1fe:	000c      	movs	r4, r1
 800a200:	9000      	str	r0, [sp, #0]
 800a202:	4293      	cmp	r3, r2
 800a204:	da00      	bge.n	800a208 <_printf_common+0x14>
 800a206:	0013      	movs	r3, r2
 800a208:	0022      	movs	r2, r4
 800a20a:	602b      	str	r3, [r5, #0]
 800a20c:	3243      	adds	r2, #67	; 0x43
 800a20e:	7812      	ldrb	r2, [r2, #0]
 800a210:	2a00      	cmp	r2, #0
 800a212:	d001      	beq.n	800a218 <_printf_common+0x24>
 800a214:	3301      	adds	r3, #1
 800a216:	602b      	str	r3, [r5, #0]
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	069b      	lsls	r3, r3, #26
 800a21c:	d502      	bpl.n	800a224 <_printf_common+0x30>
 800a21e:	682b      	ldr	r3, [r5, #0]
 800a220:	3302      	adds	r3, #2
 800a222:	602b      	str	r3, [r5, #0]
 800a224:	6822      	ldr	r2, [r4, #0]
 800a226:	2306      	movs	r3, #6
 800a228:	0017      	movs	r7, r2
 800a22a:	401f      	ands	r7, r3
 800a22c:	421a      	tst	r2, r3
 800a22e:	d027      	beq.n	800a280 <_printf_common+0x8c>
 800a230:	0023      	movs	r3, r4
 800a232:	3343      	adds	r3, #67	; 0x43
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	1e5a      	subs	r2, r3, #1
 800a238:	4193      	sbcs	r3, r2
 800a23a:	6822      	ldr	r2, [r4, #0]
 800a23c:	0692      	lsls	r2, r2, #26
 800a23e:	d430      	bmi.n	800a2a2 <_printf_common+0xae>
 800a240:	0022      	movs	r2, r4
 800a242:	9901      	ldr	r1, [sp, #4]
 800a244:	9800      	ldr	r0, [sp, #0]
 800a246:	9e08      	ldr	r6, [sp, #32]
 800a248:	3243      	adds	r2, #67	; 0x43
 800a24a:	47b0      	blx	r6
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d025      	beq.n	800a29c <_printf_common+0xa8>
 800a250:	2306      	movs	r3, #6
 800a252:	6820      	ldr	r0, [r4, #0]
 800a254:	682a      	ldr	r2, [r5, #0]
 800a256:	68e1      	ldr	r1, [r4, #12]
 800a258:	2500      	movs	r5, #0
 800a25a:	4003      	ands	r3, r0
 800a25c:	2b04      	cmp	r3, #4
 800a25e:	d103      	bne.n	800a268 <_printf_common+0x74>
 800a260:	1a8d      	subs	r5, r1, r2
 800a262:	43eb      	mvns	r3, r5
 800a264:	17db      	asrs	r3, r3, #31
 800a266:	401d      	ands	r5, r3
 800a268:	68a3      	ldr	r3, [r4, #8]
 800a26a:	6922      	ldr	r2, [r4, #16]
 800a26c:	4293      	cmp	r3, r2
 800a26e:	dd01      	ble.n	800a274 <_printf_common+0x80>
 800a270:	1a9b      	subs	r3, r3, r2
 800a272:	18ed      	adds	r5, r5, r3
 800a274:	2700      	movs	r7, #0
 800a276:	42bd      	cmp	r5, r7
 800a278:	d120      	bne.n	800a2bc <_printf_common+0xc8>
 800a27a:	2000      	movs	r0, #0
 800a27c:	e010      	b.n	800a2a0 <_printf_common+0xac>
 800a27e:	3701      	adds	r7, #1
 800a280:	68e3      	ldr	r3, [r4, #12]
 800a282:	682a      	ldr	r2, [r5, #0]
 800a284:	1a9b      	subs	r3, r3, r2
 800a286:	42bb      	cmp	r3, r7
 800a288:	ddd2      	ble.n	800a230 <_printf_common+0x3c>
 800a28a:	0022      	movs	r2, r4
 800a28c:	2301      	movs	r3, #1
 800a28e:	9901      	ldr	r1, [sp, #4]
 800a290:	9800      	ldr	r0, [sp, #0]
 800a292:	9e08      	ldr	r6, [sp, #32]
 800a294:	3219      	adds	r2, #25
 800a296:	47b0      	blx	r6
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d1f0      	bne.n	800a27e <_printf_common+0x8a>
 800a29c:	2001      	movs	r0, #1
 800a29e:	4240      	negs	r0, r0
 800a2a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a2a2:	2030      	movs	r0, #48	; 0x30
 800a2a4:	18e1      	adds	r1, r4, r3
 800a2a6:	3143      	adds	r1, #67	; 0x43
 800a2a8:	7008      	strb	r0, [r1, #0]
 800a2aa:	0021      	movs	r1, r4
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	3145      	adds	r1, #69	; 0x45
 800a2b0:	7809      	ldrb	r1, [r1, #0]
 800a2b2:	18a2      	adds	r2, r4, r2
 800a2b4:	3243      	adds	r2, #67	; 0x43
 800a2b6:	3302      	adds	r3, #2
 800a2b8:	7011      	strb	r1, [r2, #0]
 800a2ba:	e7c1      	b.n	800a240 <_printf_common+0x4c>
 800a2bc:	0022      	movs	r2, r4
 800a2be:	2301      	movs	r3, #1
 800a2c0:	9901      	ldr	r1, [sp, #4]
 800a2c2:	9800      	ldr	r0, [sp, #0]
 800a2c4:	9e08      	ldr	r6, [sp, #32]
 800a2c6:	321a      	adds	r2, #26
 800a2c8:	47b0      	blx	r6
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	d0e6      	beq.n	800a29c <_printf_common+0xa8>
 800a2ce:	3701      	adds	r7, #1
 800a2d0:	e7d1      	b.n	800a276 <_printf_common+0x82>
	...

0800a2d4 <_printf_i>:
 800a2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2d6:	b08b      	sub	sp, #44	; 0x2c
 800a2d8:	9206      	str	r2, [sp, #24]
 800a2da:	000a      	movs	r2, r1
 800a2dc:	3243      	adds	r2, #67	; 0x43
 800a2de:	9307      	str	r3, [sp, #28]
 800a2e0:	9005      	str	r0, [sp, #20]
 800a2e2:	9204      	str	r2, [sp, #16]
 800a2e4:	7e0a      	ldrb	r2, [r1, #24]
 800a2e6:	000c      	movs	r4, r1
 800a2e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2ea:	2a78      	cmp	r2, #120	; 0x78
 800a2ec:	d806      	bhi.n	800a2fc <_printf_i+0x28>
 800a2ee:	2a62      	cmp	r2, #98	; 0x62
 800a2f0:	d808      	bhi.n	800a304 <_printf_i+0x30>
 800a2f2:	2a00      	cmp	r2, #0
 800a2f4:	d100      	bne.n	800a2f8 <_printf_i+0x24>
 800a2f6:	e0c0      	b.n	800a47a <_printf_i+0x1a6>
 800a2f8:	2a58      	cmp	r2, #88	; 0x58
 800a2fa:	d052      	beq.n	800a3a2 <_printf_i+0xce>
 800a2fc:	0026      	movs	r6, r4
 800a2fe:	3642      	adds	r6, #66	; 0x42
 800a300:	7032      	strb	r2, [r6, #0]
 800a302:	e022      	b.n	800a34a <_printf_i+0x76>
 800a304:	0010      	movs	r0, r2
 800a306:	3863      	subs	r0, #99	; 0x63
 800a308:	2815      	cmp	r0, #21
 800a30a:	d8f7      	bhi.n	800a2fc <_printf_i+0x28>
 800a30c:	f7f5 fefa 	bl	8000104 <__gnu_thumb1_case_shi>
 800a310:	001f0016 	.word	0x001f0016
 800a314:	fff6fff6 	.word	0xfff6fff6
 800a318:	fff6fff6 	.word	0xfff6fff6
 800a31c:	fff6001f 	.word	0xfff6001f
 800a320:	fff6fff6 	.word	0xfff6fff6
 800a324:	00a8fff6 	.word	0x00a8fff6
 800a328:	009a0036 	.word	0x009a0036
 800a32c:	fff6fff6 	.word	0xfff6fff6
 800a330:	fff600b9 	.word	0xfff600b9
 800a334:	fff60036 	.word	0xfff60036
 800a338:	009efff6 	.word	0x009efff6
 800a33c:	0026      	movs	r6, r4
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	3642      	adds	r6, #66	; 0x42
 800a342:	1d11      	adds	r1, r2, #4
 800a344:	6019      	str	r1, [r3, #0]
 800a346:	6813      	ldr	r3, [r2, #0]
 800a348:	7033      	strb	r3, [r6, #0]
 800a34a:	2301      	movs	r3, #1
 800a34c:	e0a7      	b.n	800a49e <_printf_i+0x1ca>
 800a34e:	6808      	ldr	r0, [r1, #0]
 800a350:	6819      	ldr	r1, [r3, #0]
 800a352:	1d0a      	adds	r2, r1, #4
 800a354:	0605      	lsls	r5, r0, #24
 800a356:	d50b      	bpl.n	800a370 <_printf_i+0x9c>
 800a358:	680d      	ldr	r5, [r1, #0]
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	2d00      	cmp	r5, #0
 800a35e:	da03      	bge.n	800a368 <_printf_i+0x94>
 800a360:	232d      	movs	r3, #45	; 0x2d
 800a362:	9a04      	ldr	r2, [sp, #16]
 800a364:	426d      	negs	r5, r5
 800a366:	7013      	strb	r3, [r2, #0]
 800a368:	4b61      	ldr	r3, [pc, #388]	; (800a4f0 <_printf_i+0x21c>)
 800a36a:	270a      	movs	r7, #10
 800a36c:	9303      	str	r3, [sp, #12]
 800a36e:	e032      	b.n	800a3d6 <_printf_i+0x102>
 800a370:	680d      	ldr	r5, [r1, #0]
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	0641      	lsls	r1, r0, #25
 800a376:	d5f1      	bpl.n	800a35c <_printf_i+0x88>
 800a378:	b22d      	sxth	r5, r5
 800a37a:	e7ef      	b.n	800a35c <_printf_i+0x88>
 800a37c:	680d      	ldr	r5, [r1, #0]
 800a37e:	6819      	ldr	r1, [r3, #0]
 800a380:	1d08      	adds	r0, r1, #4
 800a382:	6018      	str	r0, [r3, #0]
 800a384:	062e      	lsls	r6, r5, #24
 800a386:	d501      	bpl.n	800a38c <_printf_i+0xb8>
 800a388:	680d      	ldr	r5, [r1, #0]
 800a38a:	e003      	b.n	800a394 <_printf_i+0xc0>
 800a38c:	066d      	lsls	r5, r5, #25
 800a38e:	d5fb      	bpl.n	800a388 <_printf_i+0xb4>
 800a390:	680d      	ldr	r5, [r1, #0]
 800a392:	b2ad      	uxth	r5, r5
 800a394:	4b56      	ldr	r3, [pc, #344]	; (800a4f0 <_printf_i+0x21c>)
 800a396:	270a      	movs	r7, #10
 800a398:	9303      	str	r3, [sp, #12]
 800a39a:	2a6f      	cmp	r2, #111	; 0x6f
 800a39c:	d117      	bne.n	800a3ce <_printf_i+0xfa>
 800a39e:	2708      	movs	r7, #8
 800a3a0:	e015      	b.n	800a3ce <_printf_i+0xfa>
 800a3a2:	3145      	adds	r1, #69	; 0x45
 800a3a4:	700a      	strb	r2, [r1, #0]
 800a3a6:	4a52      	ldr	r2, [pc, #328]	; (800a4f0 <_printf_i+0x21c>)
 800a3a8:	9203      	str	r2, [sp, #12]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	6821      	ldr	r1, [r4, #0]
 800a3ae:	ca20      	ldmia	r2!, {r5}
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	0608      	lsls	r0, r1, #24
 800a3b4:	d550      	bpl.n	800a458 <_printf_i+0x184>
 800a3b6:	07cb      	lsls	r3, r1, #31
 800a3b8:	d502      	bpl.n	800a3c0 <_printf_i+0xec>
 800a3ba:	2320      	movs	r3, #32
 800a3bc:	4319      	orrs	r1, r3
 800a3be:	6021      	str	r1, [r4, #0]
 800a3c0:	2710      	movs	r7, #16
 800a3c2:	2d00      	cmp	r5, #0
 800a3c4:	d103      	bne.n	800a3ce <_printf_i+0xfa>
 800a3c6:	2320      	movs	r3, #32
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	439a      	bics	r2, r3
 800a3cc:	6022      	str	r2, [r4, #0]
 800a3ce:	0023      	movs	r3, r4
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	3343      	adds	r3, #67	; 0x43
 800a3d4:	701a      	strb	r2, [r3, #0]
 800a3d6:	6863      	ldr	r3, [r4, #4]
 800a3d8:	60a3      	str	r3, [r4, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	db03      	blt.n	800a3e6 <_printf_i+0x112>
 800a3de:	2204      	movs	r2, #4
 800a3e0:	6821      	ldr	r1, [r4, #0]
 800a3e2:	4391      	bics	r1, r2
 800a3e4:	6021      	str	r1, [r4, #0]
 800a3e6:	2d00      	cmp	r5, #0
 800a3e8:	d102      	bne.n	800a3f0 <_printf_i+0x11c>
 800a3ea:	9e04      	ldr	r6, [sp, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00c      	beq.n	800a40a <_printf_i+0x136>
 800a3f0:	9e04      	ldr	r6, [sp, #16]
 800a3f2:	0028      	movs	r0, r5
 800a3f4:	0039      	movs	r1, r7
 800a3f6:	f7f5 ff15 	bl	8000224 <__aeabi_uidivmod>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	3e01      	subs	r6, #1
 800a3fe:	5c5b      	ldrb	r3, [r3, r1]
 800a400:	7033      	strb	r3, [r6, #0]
 800a402:	002b      	movs	r3, r5
 800a404:	0005      	movs	r5, r0
 800a406:	429f      	cmp	r7, r3
 800a408:	d9f3      	bls.n	800a3f2 <_printf_i+0x11e>
 800a40a:	2f08      	cmp	r7, #8
 800a40c:	d109      	bne.n	800a422 <_printf_i+0x14e>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	07db      	lsls	r3, r3, #31
 800a412:	d506      	bpl.n	800a422 <_printf_i+0x14e>
 800a414:	6863      	ldr	r3, [r4, #4]
 800a416:	6922      	ldr	r2, [r4, #16]
 800a418:	4293      	cmp	r3, r2
 800a41a:	dc02      	bgt.n	800a422 <_printf_i+0x14e>
 800a41c:	2330      	movs	r3, #48	; 0x30
 800a41e:	3e01      	subs	r6, #1
 800a420:	7033      	strb	r3, [r6, #0]
 800a422:	9b04      	ldr	r3, [sp, #16]
 800a424:	1b9b      	subs	r3, r3, r6
 800a426:	6123      	str	r3, [r4, #16]
 800a428:	9b07      	ldr	r3, [sp, #28]
 800a42a:	0021      	movs	r1, r4
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	9805      	ldr	r0, [sp, #20]
 800a430:	9b06      	ldr	r3, [sp, #24]
 800a432:	aa09      	add	r2, sp, #36	; 0x24
 800a434:	f7ff fede 	bl	800a1f4 <_printf_common>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d135      	bne.n	800a4a8 <_printf_i+0x1d4>
 800a43c:	2001      	movs	r0, #1
 800a43e:	4240      	negs	r0, r0
 800a440:	b00b      	add	sp, #44	; 0x2c
 800a442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a444:	2220      	movs	r2, #32
 800a446:	6809      	ldr	r1, [r1, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	6022      	str	r2, [r4, #0]
 800a44c:	0022      	movs	r2, r4
 800a44e:	2178      	movs	r1, #120	; 0x78
 800a450:	3245      	adds	r2, #69	; 0x45
 800a452:	7011      	strb	r1, [r2, #0]
 800a454:	4a27      	ldr	r2, [pc, #156]	; (800a4f4 <_printf_i+0x220>)
 800a456:	e7a7      	b.n	800a3a8 <_printf_i+0xd4>
 800a458:	0648      	lsls	r0, r1, #25
 800a45a:	d5ac      	bpl.n	800a3b6 <_printf_i+0xe2>
 800a45c:	b2ad      	uxth	r5, r5
 800a45e:	e7aa      	b.n	800a3b6 <_printf_i+0xe2>
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	680d      	ldr	r5, [r1, #0]
 800a464:	1d10      	adds	r0, r2, #4
 800a466:	6949      	ldr	r1, [r1, #20]
 800a468:	6018      	str	r0, [r3, #0]
 800a46a:	6813      	ldr	r3, [r2, #0]
 800a46c:	062e      	lsls	r6, r5, #24
 800a46e:	d501      	bpl.n	800a474 <_printf_i+0x1a0>
 800a470:	6019      	str	r1, [r3, #0]
 800a472:	e002      	b.n	800a47a <_printf_i+0x1a6>
 800a474:	066d      	lsls	r5, r5, #25
 800a476:	d5fb      	bpl.n	800a470 <_printf_i+0x19c>
 800a478:	8019      	strh	r1, [r3, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	9e04      	ldr	r6, [sp, #16]
 800a47e:	6123      	str	r3, [r4, #16]
 800a480:	e7d2      	b.n	800a428 <_printf_i+0x154>
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	1d11      	adds	r1, r2, #4
 800a486:	6019      	str	r1, [r3, #0]
 800a488:	6816      	ldr	r6, [r2, #0]
 800a48a:	2100      	movs	r1, #0
 800a48c:	0030      	movs	r0, r6
 800a48e:	6862      	ldr	r2, [r4, #4]
 800a490:	f000 fb46 	bl	800ab20 <memchr>
 800a494:	2800      	cmp	r0, #0
 800a496:	d001      	beq.n	800a49c <_printf_i+0x1c8>
 800a498:	1b80      	subs	r0, r0, r6
 800a49a:	6060      	str	r0, [r4, #4]
 800a49c:	6863      	ldr	r3, [r4, #4]
 800a49e:	6123      	str	r3, [r4, #16]
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	9a04      	ldr	r2, [sp, #16]
 800a4a4:	7013      	strb	r3, [r2, #0]
 800a4a6:	e7bf      	b.n	800a428 <_printf_i+0x154>
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	0032      	movs	r2, r6
 800a4ac:	9906      	ldr	r1, [sp, #24]
 800a4ae:	9805      	ldr	r0, [sp, #20]
 800a4b0:	9d07      	ldr	r5, [sp, #28]
 800a4b2:	47a8      	blx	r5
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d0c1      	beq.n	800a43c <_printf_i+0x168>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	079b      	lsls	r3, r3, #30
 800a4bc:	d415      	bmi.n	800a4ea <_printf_i+0x216>
 800a4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c0:	68e0      	ldr	r0, [r4, #12]
 800a4c2:	4298      	cmp	r0, r3
 800a4c4:	dabc      	bge.n	800a440 <_printf_i+0x16c>
 800a4c6:	0018      	movs	r0, r3
 800a4c8:	e7ba      	b.n	800a440 <_printf_i+0x16c>
 800a4ca:	0022      	movs	r2, r4
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	9906      	ldr	r1, [sp, #24]
 800a4d0:	9805      	ldr	r0, [sp, #20]
 800a4d2:	9e07      	ldr	r6, [sp, #28]
 800a4d4:	3219      	adds	r2, #25
 800a4d6:	47b0      	blx	r6
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d0af      	beq.n	800a43c <_printf_i+0x168>
 800a4dc:	3501      	adds	r5, #1
 800a4de:	68e3      	ldr	r3, [r4, #12]
 800a4e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4e2:	1a9b      	subs	r3, r3, r2
 800a4e4:	42ab      	cmp	r3, r5
 800a4e6:	dcf0      	bgt.n	800a4ca <_printf_i+0x1f6>
 800a4e8:	e7e9      	b.n	800a4be <_printf_i+0x1ea>
 800a4ea:	2500      	movs	r5, #0
 800a4ec:	e7f7      	b.n	800a4de <_printf_i+0x20a>
 800a4ee:	46c0      	nop			; (mov r8, r8)
 800a4f0:	0800afd7 	.word	0x0800afd7
 800a4f4:	0800afe8 	.word	0x0800afe8

0800a4f8 <__swbuf_r>:
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fa:	0005      	movs	r5, r0
 800a4fc:	000e      	movs	r6, r1
 800a4fe:	0014      	movs	r4, r2
 800a500:	2800      	cmp	r0, #0
 800a502:	d004      	beq.n	800a50e <__swbuf_r+0x16>
 800a504:	6983      	ldr	r3, [r0, #24]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <__swbuf_r+0x16>
 800a50a:	f000 f9f9 	bl	800a900 <__sinit>
 800a50e:	4b22      	ldr	r3, [pc, #136]	; (800a598 <__swbuf_r+0xa0>)
 800a510:	429c      	cmp	r4, r3
 800a512:	d12e      	bne.n	800a572 <__swbuf_r+0x7a>
 800a514:	686c      	ldr	r4, [r5, #4]
 800a516:	69a3      	ldr	r3, [r4, #24]
 800a518:	60a3      	str	r3, [r4, #8]
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	071b      	lsls	r3, r3, #28
 800a51e:	d532      	bpl.n	800a586 <__swbuf_r+0x8e>
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d02f      	beq.n	800a586 <__swbuf_r+0x8e>
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	6922      	ldr	r2, [r4, #16]
 800a52a:	b2f7      	uxtb	r7, r6
 800a52c:	1a98      	subs	r0, r3, r2
 800a52e:	6963      	ldr	r3, [r4, #20]
 800a530:	b2f6      	uxtb	r6, r6
 800a532:	4283      	cmp	r3, r0
 800a534:	dc05      	bgt.n	800a542 <__swbuf_r+0x4a>
 800a536:	0021      	movs	r1, r4
 800a538:	0028      	movs	r0, r5
 800a53a:	f000 f93f 	bl	800a7bc <_fflush_r>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d127      	bne.n	800a592 <__swbuf_r+0x9a>
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	3001      	adds	r0, #1
 800a546:	3b01      	subs	r3, #1
 800a548:	60a3      	str	r3, [r4, #8]
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	6022      	str	r2, [r4, #0]
 800a550:	701f      	strb	r7, [r3, #0]
 800a552:	6963      	ldr	r3, [r4, #20]
 800a554:	4283      	cmp	r3, r0
 800a556:	d004      	beq.n	800a562 <__swbuf_r+0x6a>
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	07db      	lsls	r3, r3, #31
 800a55c:	d507      	bpl.n	800a56e <__swbuf_r+0x76>
 800a55e:	2e0a      	cmp	r6, #10
 800a560:	d105      	bne.n	800a56e <__swbuf_r+0x76>
 800a562:	0021      	movs	r1, r4
 800a564:	0028      	movs	r0, r5
 800a566:	f000 f929 	bl	800a7bc <_fflush_r>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d111      	bne.n	800a592 <__swbuf_r+0x9a>
 800a56e:	0030      	movs	r0, r6
 800a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a572:	4b0a      	ldr	r3, [pc, #40]	; (800a59c <__swbuf_r+0xa4>)
 800a574:	429c      	cmp	r4, r3
 800a576:	d101      	bne.n	800a57c <__swbuf_r+0x84>
 800a578:	68ac      	ldr	r4, [r5, #8]
 800a57a:	e7cc      	b.n	800a516 <__swbuf_r+0x1e>
 800a57c:	4b08      	ldr	r3, [pc, #32]	; (800a5a0 <__swbuf_r+0xa8>)
 800a57e:	429c      	cmp	r4, r3
 800a580:	d1c9      	bne.n	800a516 <__swbuf_r+0x1e>
 800a582:	68ec      	ldr	r4, [r5, #12]
 800a584:	e7c7      	b.n	800a516 <__swbuf_r+0x1e>
 800a586:	0021      	movs	r1, r4
 800a588:	0028      	movs	r0, r5
 800a58a:	f000 f80b 	bl	800a5a4 <__swsetup_r>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d0c9      	beq.n	800a526 <__swbuf_r+0x2e>
 800a592:	2601      	movs	r6, #1
 800a594:	4276      	negs	r6, r6
 800a596:	e7ea      	b.n	800a56e <__swbuf_r+0x76>
 800a598:	0800b01c 	.word	0x0800b01c
 800a59c:	0800b03c 	.word	0x0800b03c
 800a5a0:	0800affc 	.word	0x0800affc

0800a5a4 <__swsetup_r>:
 800a5a4:	4b37      	ldr	r3, [pc, #220]	; (800a684 <__swsetup_r+0xe0>)
 800a5a6:	b570      	push	{r4, r5, r6, lr}
 800a5a8:	681d      	ldr	r5, [r3, #0]
 800a5aa:	0006      	movs	r6, r0
 800a5ac:	000c      	movs	r4, r1
 800a5ae:	2d00      	cmp	r5, #0
 800a5b0:	d005      	beq.n	800a5be <__swsetup_r+0x1a>
 800a5b2:	69ab      	ldr	r3, [r5, #24]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d102      	bne.n	800a5be <__swsetup_r+0x1a>
 800a5b8:	0028      	movs	r0, r5
 800a5ba:	f000 f9a1 	bl	800a900 <__sinit>
 800a5be:	4b32      	ldr	r3, [pc, #200]	; (800a688 <__swsetup_r+0xe4>)
 800a5c0:	429c      	cmp	r4, r3
 800a5c2:	d10f      	bne.n	800a5e4 <__swsetup_r+0x40>
 800a5c4:	686c      	ldr	r4, [r5, #4]
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	5ee2      	ldrsh	r2, [r4, r3]
 800a5ca:	b293      	uxth	r3, r2
 800a5cc:	0711      	lsls	r1, r2, #28
 800a5ce:	d42d      	bmi.n	800a62c <__swsetup_r+0x88>
 800a5d0:	06d9      	lsls	r1, r3, #27
 800a5d2:	d411      	bmi.n	800a5f8 <__swsetup_r+0x54>
 800a5d4:	2309      	movs	r3, #9
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	6033      	str	r3, [r6, #0]
 800a5da:	3337      	adds	r3, #55	; 0x37
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	4240      	negs	r0, r0
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
 800a5e4:	4b29      	ldr	r3, [pc, #164]	; (800a68c <__swsetup_r+0xe8>)
 800a5e6:	429c      	cmp	r4, r3
 800a5e8:	d101      	bne.n	800a5ee <__swsetup_r+0x4a>
 800a5ea:	68ac      	ldr	r4, [r5, #8]
 800a5ec:	e7eb      	b.n	800a5c6 <__swsetup_r+0x22>
 800a5ee:	4b28      	ldr	r3, [pc, #160]	; (800a690 <__swsetup_r+0xec>)
 800a5f0:	429c      	cmp	r4, r3
 800a5f2:	d1e8      	bne.n	800a5c6 <__swsetup_r+0x22>
 800a5f4:	68ec      	ldr	r4, [r5, #12]
 800a5f6:	e7e6      	b.n	800a5c6 <__swsetup_r+0x22>
 800a5f8:	075b      	lsls	r3, r3, #29
 800a5fa:	d513      	bpl.n	800a624 <__swsetup_r+0x80>
 800a5fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5fe:	2900      	cmp	r1, #0
 800a600:	d008      	beq.n	800a614 <__swsetup_r+0x70>
 800a602:	0023      	movs	r3, r4
 800a604:	3344      	adds	r3, #68	; 0x44
 800a606:	4299      	cmp	r1, r3
 800a608:	d002      	beq.n	800a610 <__swsetup_r+0x6c>
 800a60a:	0030      	movs	r0, r6
 800a60c:	f7ff fb5a 	bl	8009cc4 <_free_r>
 800a610:	2300      	movs	r3, #0
 800a612:	6363      	str	r3, [r4, #52]	; 0x34
 800a614:	2224      	movs	r2, #36	; 0x24
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	4393      	bics	r3, r2
 800a61a:	81a3      	strh	r3, [r4, #12]
 800a61c:	2300      	movs	r3, #0
 800a61e:	6063      	str	r3, [r4, #4]
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	6023      	str	r3, [r4, #0]
 800a624:	2308      	movs	r3, #8
 800a626:	89a2      	ldrh	r2, [r4, #12]
 800a628:	4313      	orrs	r3, r2
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10b      	bne.n	800a64a <__swsetup_r+0xa6>
 800a632:	21a0      	movs	r1, #160	; 0xa0
 800a634:	2280      	movs	r2, #128	; 0x80
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	0089      	lsls	r1, r1, #2
 800a63a:	0092      	lsls	r2, r2, #2
 800a63c:	400b      	ands	r3, r1
 800a63e:	4293      	cmp	r3, r2
 800a640:	d003      	beq.n	800a64a <__swsetup_r+0xa6>
 800a642:	0021      	movs	r1, r4
 800a644:	0030      	movs	r0, r6
 800a646:	f000 fa27 	bl	800aa98 <__smakebuf_r>
 800a64a:	220c      	movs	r2, #12
 800a64c:	5ea3      	ldrsh	r3, [r4, r2]
 800a64e:	2001      	movs	r0, #1
 800a650:	001a      	movs	r2, r3
 800a652:	b299      	uxth	r1, r3
 800a654:	4002      	ands	r2, r0
 800a656:	4203      	tst	r3, r0
 800a658:	d00f      	beq.n	800a67a <__swsetup_r+0xd6>
 800a65a:	2200      	movs	r2, #0
 800a65c:	60a2      	str	r2, [r4, #8]
 800a65e:	6962      	ldr	r2, [r4, #20]
 800a660:	4252      	negs	r2, r2
 800a662:	61a2      	str	r2, [r4, #24]
 800a664:	2000      	movs	r0, #0
 800a666:	6922      	ldr	r2, [r4, #16]
 800a668:	4282      	cmp	r2, r0
 800a66a:	d1ba      	bne.n	800a5e2 <__swsetup_r+0x3e>
 800a66c:	060a      	lsls	r2, r1, #24
 800a66e:	d5b8      	bpl.n	800a5e2 <__swsetup_r+0x3e>
 800a670:	2240      	movs	r2, #64	; 0x40
 800a672:	4313      	orrs	r3, r2
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	3801      	subs	r0, #1
 800a678:	e7b3      	b.n	800a5e2 <__swsetup_r+0x3e>
 800a67a:	0788      	lsls	r0, r1, #30
 800a67c:	d400      	bmi.n	800a680 <__swsetup_r+0xdc>
 800a67e:	6962      	ldr	r2, [r4, #20]
 800a680:	60a2      	str	r2, [r4, #8]
 800a682:	e7ef      	b.n	800a664 <__swsetup_r+0xc0>
 800a684:	200000f4 	.word	0x200000f4
 800a688:	0800b01c 	.word	0x0800b01c
 800a68c:	0800b03c 	.word	0x0800b03c
 800a690:	0800affc 	.word	0x0800affc

0800a694 <abort>:
 800a694:	2006      	movs	r0, #6
 800a696:	b510      	push	{r4, lr}
 800a698:	f000 fa78 	bl	800ab8c <raise>
 800a69c:	2001      	movs	r0, #1
 800a69e:	f7f6 fa65 	bl	8000b6c <_exit>
	...

0800a6a4 <__sflush_r>:
 800a6a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6a6:	898b      	ldrh	r3, [r1, #12]
 800a6a8:	0005      	movs	r5, r0
 800a6aa:	000c      	movs	r4, r1
 800a6ac:	071a      	lsls	r2, r3, #28
 800a6ae:	d45f      	bmi.n	800a770 <__sflush_r+0xcc>
 800a6b0:	684a      	ldr	r2, [r1, #4]
 800a6b2:	2a00      	cmp	r2, #0
 800a6b4:	dc04      	bgt.n	800a6c0 <__sflush_r+0x1c>
 800a6b6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a6b8:	2a00      	cmp	r2, #0
 800a6ba:	dc01      	bgt.n	800a6c0 <__sflush_r+0x1c>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a6c2:	2f00      	cmp	r7, #0
 800a6c4:	d0fa      	beq.n	800a6bc <__sflush_r+0x18>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	2180      	movs	r1, #128	; 0x80
 800a6ca:	682e      	ldr	r6, [r5, #0]
 800a6cc:	602a      	str	r2, [r5, #0]
 800a6ce:	001a      	movs	r2, r3
 800a6d0:	0149      	lsls	r1, r1, #5
 800a6d2:	400a      	ands	r2, r1
 800a6d4:	420b      	tst	r3, r1
 800a6d6:	d034      	beq.n	800a742 <__sflush_r+0x9e>
 800a6d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	075b      	lsls	r3, r3, #29
 800a6de:	d506      	bpl.n	800a6ee <__sflush_r+0x4a>
 800a6e0:	6863      	ldr	r3, [r4, #4]
 800a6e2:	1ac0      	subs	r0, r0, r3
 800a6e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <__sflush_r+0x4a>
 800a6ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6ec:	1ac0      	subs	r0, r0, r3
 800a6ee:	0002      	movs	r2, r0
 800a6f0:	6a21      	ldr	r1, [r4, #32]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	0028      	movs	r0, r5
 800a6f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a6f8:	47b8      	blx	r7
 800a6fa:	89a1      	ldrh	r1, [r4, #12]
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d106      	bne.n	800a70e <__sflush_r+0x6a>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	2b1d      	cmp	r3, #29
 800a704:	d831      	bhi.n	800a76a <__sflush_r+0xc6>
 800a706:	4a2c      	ldr	r2, [pc, #176]	; (800a7b8 <__sflush_r+0x114>)
 800a708:	40da      	lsrs	r2, r3
 800a70a:	07d3      	lsls	r3, r2, #31
 800a70c:	d52d      	bpl.n	800a76a <__sflush_r+0xc6>
 800a70e:	2300      	movs	r3, #0
 800a710:	6063      	str	r3, [r4, #4]
 800a712:	6923      	ldr	r3, [r4, #16]
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	04cb      	lsls	r3, r1, #19
 800a718:	d505      	bpl.n	800a726 <__sflush_r+0x82>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d102      	bne.n	800a724 <__sflush_r+0x80>
 800a71e:	682b      	ldr	r3, [r5, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d100      	bne.n	800a726 <__sflush_r+0x82>
 800a724:	6560      	str	r0, [r4, #84]	; 0x54
 800a726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a728:	602e      	str	r6, [r5, #0]
 800a72a:	2900      	cmp	r1, #0
 800a72c:	d0c6      	beq.n	800a6bc <__sflush_r+0x18>
 800a72e:	0023      	movs	r3, r4
 800a730:	3344      	adds	r3, #68	; 0x44
 800a732:	4299      	cmp	r1, r3
 800a734:	d002      	beq.n	800a73c <__sflush_r+0x98>
 800a736:	0028      	movs	r0, r5
 800a738:	f7ff fac4 	bl	8009cc4 <_free_r>
 800a73c:	2000      	movs	r0, #0
 800a73e:	6360      	str	r0, [r4, #52]	; 0x34
 800a740:	e7bd      	b.n	800a6be <__sflush_r+0x1a>
 800a742:	2301      	movs	r3, #1
 800a744:	0028      	movs	r0, r5
 800a746:	6a21      	ldr	r1, [r4, #32]
 800a748:	47b8      	blx	r7
 800a74a:	1c43      	adds	r3, r0, #1
 800a74c:	d1c5      	bne.n	800a6da <__sflush_r+0x36>
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d0c2      	beq.n	800a6da <__sflush_r+0x36>
 800a754:	2b1d      	cmp	r3, #29
 800a756:	d001      	beq.n	800a75c <__sflush_r+0xb8>
 800a758:	2b16      	cmp	r3, #22
 800a75a:	d101      	bne.n	800a760 <__sflush_r+0xbc>
 800a75c:	602e      	str	r6, [r5, #0]
 800a75e:	e7ad      	b.n	800a6bc <__sflush_r+0x18>
 800a760:	2340      	movs	r3, #64	; 0x40
 800a762:	89a2      	ldrh	r2, [r4, #12]
 800a764:	4313      	orrs	r3, r2
 800a766:	81a3      	strh	r3, [r4, #12]
 800a768:	e7a9      	b.n	800a6be <__sflush_r+0x1a>
 800a76a:	2340      	movs	r3, #64	; 0x40
 800a76c:	430b      	orrs	r3, r1
 800a76e:	e7fa      	b.n	800a766 <__sflush_r+0xc2>
 800a770:	690f      	ldr	r7, [r1, #16]
 800a772:	2f00      	cmp	r7, #0
 800a774:	d0a2      	beq.n	800a6bc <__sflush_r+0x18>
 800a776:	680a      	ldr	r2, [r1, #0]
 800a778:	600f      	str	r7, [r1, #0]
 800a77a:	1bd2      	subs	r2, r2, r7
 800a77c:	9201      	str	r2, [sp, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	079b      	lsls	r3, r3, #30
 800a782:	d100      	bne.n	800a786 <__sflush_r+0xe2>
 800a784:	694a      	ldr	r2, [r1, #20]
 800a786:	60a2      	str	r2, [r4, #8]
 800a788:	9b01      	ldr	r3, [sp, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dc00      	bgt.n	800a790 <__sflush_r+0xec>
 800a78e:	e795      	b.n	800a6bc <__sflush_r+0x18>
 800a790:	003a      	movs	r2, r7
 800a792:	0028      	movs	r0, r5
 800a794:	9b01      	ldr	r3, [sp, #4]
 800a796:	6a21      	ldr	r1, [r4, #32]
 800a798:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a79a:	47b0      	blx	r6
 800a79c:	2800      	cmp	r0, #0
 800a79e:	dc06      	bgt.n	800a7ae <__sflush_r+0x10a>
 800a7a0:	2340      	movs	r3, #64	; 0x40
 800a7a2:	2001      	movs	r0, #1
 800a7a4:	89a2      	ldrh	r2, [r4, #12]
 800a7a6:	4240      	negs	r0, r0
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	81a3      	strh	r3, [r4, #12]
 800a7ac:	e787      	b.n	800a6be <__sflush_r+0x1a>
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	183f      	adds	r7, r7, r0
 800a7b2:	1a1b      	subs	r3, r3, r0
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	e7e7      	b.n	800a788 <__sflush_r+0xe4>
 800a7b8:	20400001 	.word	0x20400001

0800a7bc <_fflush_r>:
 800a7bc:	690b      	ldr	r3, [r1, #16]
 800a7be:	b570      	push	{r4, r5, r6, lr}
 800a7c0:	0005      	movs	r5, r0
 800a7c2:	000c      	movs	r4, r1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d102      	bne.n	800a7ce <_fflush_r+0x12>
 800a7c8:	2500      	movs	r5, #0
 800a7ca:	0028      	movs	r0, r5
 800a7cc:	bd70      	pop	{r4, r5, r6, pc}
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d004      	beq.n	800a7dc <_fflush_r+0x20>
 800a7d2:	6983      	ldr	r3, [r0, #24]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <_fflush_r+0x20>
 800a7d8:	f000 f892 	bl	800a900 <__sinit>
 800a7dc:	4b14      	ldr	r3, [pc, #80]	; (800a830 <_fflush_r+0x74>)
 800a7de:	429c      	cmp	r4, r3
 800a7e0:	d11b      	bne.n	800a81a <_fflush_r+0x5e>
 800a7e2:	686c      	ldr	r4, [r5, #4]
 800a7e4:	220c      	movs	r2, #12
 800a7e6:	5ea3      	ldrsh	r3, [r4, r2]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d0ed      	beq.n	800a7c8 <_fflush_r+0xc>
 800a7ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7ee:	07d2      	lsls	r2, r2, #31
 800a7f0:	d404      	bmi.n	800a7fc <_fflush_r+0x40>
 800a7f2:	059b      	lsls	r3, r3, #22
 800a7f4:	d402      	bmi.n	800a7fc <_fflush_r+0x40>
 800a7f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7f8:	f000 f923 	bl	800aa42 <__retarget_lock_acquire_recursive>
 800a7fc:	0028      	movs	r0, r5
 800a7fe:	0021      	movs	r1, r4
 800a800:	f7ff ff50 	bl	800a6a4 <__sflush_r>
 800a804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a806:	0005      	movs	r5, r0
 800a808:	07db      	lsls	r3, r3, #31
 800a80a:	d4de      	bmi.n	800a7ca <_fflush_r+0xe>
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	059b      	lsls	r3, r3, #22
 800a810:	d4db      	bmi.n	800a7ca <_fflush_r+0xe>
 800a812:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a814:	f000 f916 	bl	800aa44 <__retarget_lock_release_recursive>
 800a818:	e7d7      	b.n	800a7ca <_fflush_r+0xe>
 800a81a:	4b06      	ldr	r3, [pc, #24]	; (800a834 <_fflush_r+0x78>)
 800a81c:	429c      	cmp	r4, r3
 800a81e:	d101      	bne.n	800a824 <_fflush_r+0x68>
 800a820:	68ac      	ldr	r4, [r5, #8]
 800a822:	e7df      	b.n	800a7e4 <_fflush_r+0x28>
 800a824:	4b04      	ldr	r3, [pc, #16]	; (800a838 <_fflush_r+0x7c>)
 800a826:	429c      	cmp	r4, r3
 800a828:	d1dc      	bne.n	800a7e4 <_fflush_r+0x28>
 800a82a:	68ec      	ldr	r4, [r5, #12]
 800a82c:	e7da      	b.n	800a7e4 <_fflush_r+0x28>
 800a82e:	46c0      	nop			; (mov r8, r8)
 800a830:	0800b01c 	.word	0x0800b01c
 800a834:	0800b03c 	.word	0x0800b03c
 800a838:	0800affc 	.word	0x0800affc

0800a83c <std>:
 800a83c:	2300      	movs	r3, #0
 800a83e:	b510      	push	{r4, lr}
 800a840:	0004      	movs	r4, r0
 800a842:	6003      	str	r3, [r0, #0]
 800a844:	6043      	str	r3, [r0, #4]
 800a846:	6083      	str	r3, [r0, #8]
 800a848:	8181      	strh	r1, [r0, #12]
 800a84a:	6643      	str	r3, [r0, #100]	; 0x64
 800a84c:	0019      	movs	r1, r3
 800a84e:	81c2      	strh	r2, [r0, #14]
 800a850:	6103      	str	r3, [r0, #16]
 800a852:	6143      	str	r3, [r0, #20]
 800a854:	6183      	str	r3, [r0, #24]
 800a856:	2208      	movs	r2, #8
 800a858:	305c      	adds	r0, #92	; 0x5c
 800a85a:	f7ff fa1c 	bl	8009c96 <memset>
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <std+0x38>)
 800a860:	6263      	str	r3, [r4, #36]	; 0x24
 800a862:	4b05      	ldr	r3, [pc, #20]	; (800a878 <std+0x3c>)
 800a864:	6224      	str	r4, [r4, #32]
 800a866:	62a3      	str	r3, [r4, #40]	; 0x28
 800a868:	4b04      	ldr	r3, [pc, #16]	; (800a87c <std+0x40>)
 800a86a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a86c:	4b04      	ldr	r3, [pc, #16]	; (800a880 <std+0x44>)
 800a86e:	6323      	str	r3, [r4, #48]	; 0x30
 800a870:	bd10      	pop	{r4, pc}
 800a872:	46c0      	nop			; (mov r8, r8)
 800a874:	0800abcd 	.word	0x0800abcd
 800a878:	0800abf5 	.word	0x0800abf5
 800a87c:	0800ac2d 	.word	0x0800ac2d
 800a880:	0800ac59 	.word	0x0800ac59

0800a884 <_cleanup_r>:
 800a884:	b510      	push	{r4, lr}
 800a886:	4902      	ldr	r1, [pc, #8]	; (800a890 <_cleanup_r+0xc>)
 800a888:	f000 f8ba 	bl	800aa00 <_fwalk_reent>
 800a88c:	bd10      	pop	{r4, pc}
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	0800a7bd 	.word	0x0800a7bd

0800a894 <__sfmoreglue>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	2568      	movs	r5, #104	; 0x68
 800a898:	1e4a      	subs	r2, r1, #1
 800a89a:	4355      	muls	r5, r2
 800a89c:	000e      	movs	r6, r1
 800a89e:	0029      	movs	r1, r5
 800a8a0:	3174      	adds	r1, #116	; 0x74
 800a8a2:	f7ff fa59 	bl	8009d58 <_malloc_r>
 800a8a6:	1e04      	subs	r4, r0, #0
 800a8a8:	d008      	beq.n	800a8bc <__sfmoreglue+0x28>
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	002a      	movs	r2, r5
 800a8ae:	6001      	str	r1, [r0, #0]
 800a8b0:	6046      	str	r6, [r0, #4]
 800a8b2:	300c      	adds	r0, #12
 800a8b4:	60a0      	str	r0, [r4, #8]
 800a8b6:	3268      	adds	r2, #104	; 0x68
 800a8b8:	f7ff f9ed 	bl	8009c96 <memset>
 800a8bc:	0020      	movs	r0, r4
 800a8be:	bd70      	pop	{r4, r5, r6, pc}

0800a8c0 <__sfp_lock_acquire>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	4802      	ldr	r0, [pc, #8]	; (800a8cc <__sfp_lock_acquire+0xc>)
 800a8c4:	f000 f8bd 	bl	800aa42 <__retarget_lock_acquire_recursive>
 800a8c8:	bd10      	pop	{r4, pc}
 800a8ca:	46c0      	nop			; (mov r8, r8)
 800a8cc:	20000774 	.word	0x20000774

0800a8d0 <__sfp_lock_release>:
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	4802      	ldr	r0, [pc, #8]	; (800a8dc <__sfp_lock_release+0xc>)
 800a8d4:	f000 f8b6 	bl	800aa44 <__retarget_lock_release_recursive>
 800a8d8:	bd10      	pop	{r4, pc}
 800a8da:	46c0      	nop			; (mov r8, r8)
 800a8dc:	20000774 	.word	0x20000774

0800a8e0 <__sinit_lock_acquire>:
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	4802      	ldr	r0, [pc, #8]	; (800a8ec <__sinit_lock_acquire+0xc>)
 800a8e4:	f000 f8ad 	bl	800aa42 <__retarget_lock_acquire_recursive>
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	46c0      	nop			; (mov r8, r8)
 800a8ec:	2000076f 	.word	0x2000076f

0800a8f0 <__sinit_lock_release>:
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	4802      	ldr	r0, [pc, #8]	; (800a8fc <__sinit_lock_release+0xc>)
 800a8f4:	f000 f8a6 	bl	800aa44 <__retarget_lock_release_recursive>
 800a8f8:	bd10      	pop	{r4, pc}
 800a8fa:	46c0      	nop			; (mov r8, r8)
 800a8fc:	2000076f 	.word	0x2000076f

0800a900 <__sinit>:
 800a900:	b513      	push	{r0, r1, r4, lr}
 800a902:	0004      	movs	r4, r0
 800a904:	f7ff ffec 	bl	800a8e0 <__sinit_lock_acquire>
 800a908:	69a3      	ldr	r3, [r4, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <__sinit+0x14>
 800a90e:	f7ff ffef 	bl	800a8f0 <__sinit_lock_release>
 800a912:	bd13      	pop	{r0, r1, r4, pc}
 800a914:	64a3      	str	r3, [r4, #72]	; 0x48
 800a916:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a918:	6523      	str	r3, [r4, #80]	; 0x50
 800a91a:	4b13      	ldr	r3, [pc, #76]	; (800a968 <__sinit+0x68>)
 800a91c:	4a13      	ldr	r2, [pc, #76]	; (800a96c <__sinit+0x6c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	62a2      	str	r2, [r4, #40]	; 0x28
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	42a3      	cmp	r3, r4
 800a926:	d101      	bne.n	800a92c <__sinit+0x2c>
 800a928:	2301      	movs	r3, #1
 800a92a:	61a3      	str	r3, [r4, #24]
 800a92c:	0020      	movs	r0, r4
 800a92e:	f000 f81f 	bl	800a970 <__sfp>
 800a932:	6060      	str	r0, [r4, #4]
 800a934:	0020      	movs	r0, r4
 800a936:	f000 f81b 	bl	800a970 <__sfp>
 800a93a:	60a0      	str	r0, [r4, #8]
 800a93c:	0020      	movs	r0, r4
 800a93e:	f000 f817 	bl	800a970 <__sfp>
 800a942:	2200      	movs	r2, #0
 800a944:	2104      	movs	r1, #4
 800a946:	60e0      	str	r0, [r4, #12]
 800a948:	6860      	ldr	r0, [r4, #4]
 800a94a:	f7ff ff77 	bl	800a83c <std>
 800a94e:	2201      	movs	r2, #1
 800a950:	2109      	movs	r1, #9
 800a952:	68a0      	ldr	r0, [r4, #8]
 800a954:	f7ff ff72 	bl	800a83c <std>
 800a958:	2202      	movs	r2, #2
 800a95a:	2112      	movs	r1, #18
 800a95c:	68e0      	ldr	r0, [r4, #12]
 800a95e:	f7ff ff6d 	bl	800a83c <std>
 800a962:	2301      	movs	r3, #1
 800a964:	61a3      	str	r3, [r4, #24]
 800a966:	e7d2      	b.n	800a90e <__sinit+0xe>
 800a968:	0800af10 	.word	0x0800af10
 800a96c:	0800a885 	.word	0x0800a885

0800a970 <__sfp>:
 800a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a972:	0007      	movs	r7, r0
 800a974:	f7ff ffa4 	bl	800a8c0 <__sfp_lock_acquire>
 800a978:	4b1f      	ldr	r3, [pc, #124]	; (800a9f8 <__sfp+0x88>)
 800a97a:	681e      	ldr	r6, [r3, #0]
 800a97c:	69b3      	ldr	r3, [r6, #24]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <__sfp+0x18>
 800a982:	0030      	movs	r0, r6
 800a984:	f7ff ffbc 	bl	800a900 <__sinit>
 800a988:	3648      	adds	r6, #72	; 0x48
 800a98a:	68b4      	ldr	r4, [r6, #8]
 800a98c:	6873      	ldr	r3, [r6, #4]
 800a98e:	3b01      	subs	r3, #1
 800a990:	d504      	bpl.n	800a99c <__sfp+0x2c>
 800a992:	6833      	ldr	r3, [r6, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d022      	beq.n	800a9de <__sfp+0x6e>
 800a998:	6836      	ldr	r6, [r6, #0]
 800a99a:	e7f6      	b.n	800a98a <__sfp+0x1a>
 800a99c:	220c      	movs	r2, #12
 800a99e:	5ea5      	ldrsh	r5, [r4, r2]
 800a9a0:	2d00      	cmp	r5, #0
 800a9a2:	d11a      	bne.n	800a9da <__sfp+0x6a>
 800a9a4:	0020      	movs	r0, r4
 800a9a6:	4b15      	ldr	r3, [pc, #84]	; (800a9fc <__sfp+0x8c>)
 800a9a8:	3058      	adds	r0, #88	; 0x58
 800a9aa:	60e3      	str	r3, [r4, #12]
 800a9ac:	6665      	str	r5, [r4, #100]	; 0x64
 800a9ae:	f000 f847 	bl	800aa40 <__retarget_lock_init_recursive>
 800a9b2:	f7ff ff8d 	bl	800a8d0 <__sfp_lock_release>
 800a9b6:	0020      	movs	r0, r4
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	0029      	movs	r1, r5
 800a9bc:	6025      	str	r5, [r4, #0]
 800a9be:	60a5      	str	r5, [r4, #8]
 800a9c0:	6065      	str	r5, [r4, #4]
 800a9c2:	6125      	str	r5, [r4, #16]
 800a9c4:	6165      	str	r5, [r4, #20]
 800a9c6:	61a5      	str	r5, [r4, #24]
 800a9c8:	305c      	adds	r0, #92	; 0x5c
 800a9ca:	f7ff f964 	bl	8009c96 <memset>
 800a9ce:	6365      	str	r5, [r4, #52]	; 0x34
 800a9d0:	63a5      	str	r5, [r4, #56]	; 0x38
 800a9d2:	64a5      	str	r5, [r4, #72]	; 0x48
 800a9d4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a9d6:	0020      	movs	r0, r4
 800a9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9da:	3468      	adds	r4, #104	; 0x68
 800a9dc:	e7d7      	b.n	800a98e <__sfp+0x1e>
 800a9de:	2104      	movs	r1, #4
 800a9e0:	0038      	movs	r0, r7
 800a9e2:	f7ff ff57 	bl	800a894 <__sfmoreglue>
 800a9e6:	1e04      	subs	r4, r0, #0
 800a9e8:	6030      	str	r0, [r6, #0]
 800a9ea:	d1d5      	bne.n	800a998 <__sfp+0x28>
 800a9ec:	f7ff ff70 	bl	800a8d0 <__sfp_lock_release>
 800a9f0:	230c      	movs	r3, #12
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	e7ef      	b.n	800a9d6 <__sfp+0x66>
 800a9f6:	46c0      	nop			; (mov r8, r8)
 800a9f8:	0800af10 	.word	0x0800af10
 800a9fc:	ffff0001 	.word	0xffff0001

0800aa00 <_fwalk_reent>:
 800aa00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa02:	0004      	movs	r4, r0
 800aa04:	0006      	movs	r6, r0
 800aa06:	2700      	movs	r7, #0
 800aa08:	9101      	str	r1, [sp, #4]
 800aa0a:	3448      	adds	r4, #72	; 0x48
 800aa0c:	6863      	ldr	r3, [r4, #4]
 800aa0e:	68a5      	ldr	r5, [r4, #8]
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	9b00      	ldr	r3, [sp, #0]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	d504      	bpl.n	800aa24 <_fwalk_reent+0x24>
 800aa1a:	6824      	ldr	r4, [r4, #0]
 800aa1c:	2c00      	cmp	r4, #0
 800aa1e:	d1f5      	bne.n	800aa0c <_fwalk_reent+0xc>
 800aa20:	0038      	movs	r0, r7
 800aa22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa24:	89ab      	ldrh	r3, [r5, #12]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d908      	bls.n	800aa3c <_fwalk_reent+0x3c>
 800aa2a:	220e      	movs	r2, #14
 800aa2c:	5eab      	ldrsh	r3, [r5, r2]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	d004      	beq.n	800aa3c <_fwalk_reent+0x3c>
 800aa32:	0029      	movs	r1, r5
 800aa34:	0030      	movs	r0, r6
 800aa36:	9b01      	ldr	r3, [sp, #4]
 800aa38:	4798      	blx	r3
 800aa3a:	4307      	orrs	r7, r0
 800aa3c:	3568      	adds	r5, #104	; 0x68
 800aa3e:	e7e8      	b.n	800aa12 <_fwalk_reent+0x12>

0800aa40 <__retarget_lock_init_recursive>:
 800aa40:	4770      	bx	lr

0800aa42 <__retarget_lock_acquire_recursive>:
 800aa42:	4770      	bx	lr

0800aa44 <__retarget_lock_release_recursive>:
 800aa44:	4770      	bx	lr
	...

0800aa48 <__swhatbuf_r>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	000e      	movs	r6, r1
 800aa4c:	001d      	movs	r5, r3
 800aa4e:	230e      	movs	r3, #14
 800aa50:	5ec9      	ldrsh	r1, [r1, r3]
 800aa52:	0014      	movs	r4, r2
 800aa54:	b096      	sub	sp, #88	; 0x58
 800aa56:	2900      	cmp	r1, #0
 800aa58:	da07      	bge.n	800aa6a <__swhatbuf_r+0x22>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	602b      	str	r3, [r5, #0]
 800aa5e:	89b3      	ldrh	r3, [r6, #12]
 800aa60:	061b      	lsls	r3, r3, #24
 800aa62:	d411      	bmi.n	800aa88 <__swhatbuf_r+0x40>
 800aa64:	2380      	movs	r3, #128	; 0x80
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	e00f      	b.n	800aa8a <__swhatbuf_r+0x42>
 800aa6a:	466a      	mov	r2, sp
 800aa6c:	f000 f920 	bl	800acb0 <_fstat_r>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	dbf2      	blt.n	800aa5a <__swhatbuf_r+0x12>
 800aa74:	23f0      	movs	r3, #240	; 0xf0
 800aa76:	9901      	ldr	r1, [sp, #4]
 800aa78:	021b      	lsls	r3, r3, #8
 800aa7a:	4019      	ands	r1, r3
 800aa7c:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <__swhatbuf_r+0x4c>)
 800aa7e:	18c9      	adds	r1, r1, r3
 800aa80:	424b      	negs	r3, r1
 800aa82:	4159      	adcs	r1, r3
 800aa84:	6029      	str	r1, [r5, #0]
 800aa86:	e7ed      	b.n	800aa64 <__swhatbuf_r+0x1c>
 800aa88:	2340      	movs	r3, #64	; 0x40
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	b016      	add	sp, #88	; 0x58
 800aa90:	bd70      	pop	{r4, r5, r6, pc}
 800aa92:	46c0      	nop			; (mov r8, r8)
 800aa94:	ffffe000 	.word	0xffffe000

0800aa98 <__smakebuf_r>:
 800aa98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa9a:	2602      	movs	r6, #2
 800aa9c:	898b      	ldrh	r3, [r1, #12]
 800aa9e:	0005      	movs	r5, r0
 800aaa0:	000c      	movs	r4, r1
 800aaa2:	4233      	tst	r3, r6
 800aaa4:	d006      	beq.n	800aab4 <__smakebuf_r+0x1c>
 800aaa6:	0023      	movs	r3, r4
 800aaa8:	3347      	adds	r3, #71	; 0x47
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	6123      	str	r3, [r4, #16]
 800aaae:	2301      	movs	r3, #1
 800aab0:	6163      	str	r3, [r4, #20]
 800aab2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800aab4:	466a      	mov	r2, sp
 800aab6:	ab01      	add	r3, sp, #4
 800aab8:	f7ff ffc6 	bl	800aa48 <__swhatbuf_r>
 800aabc:	9900      	ldr	r1, [sp, #0]
 800aabe:	0007      	movs	r7, r0
 800aac0:	0028      	movs	r0, r5
 800aac2:	f7ff f949 	bl	8009d58 <_malloc_r>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d108      	bne.n	800aadc <__smakebuf_r+0x44>
 800aaca:	220c      	movs	r2, #12
 800aacc:	5ea3      	ldrsh	r3, [r4, r2]
 800aace:	059a      	lsls	r2, r3, #22
 800aad0:	d4ef      	bmi.n	800aab2 <__smakebuf_r+0x1a>
 800aad2:	2203      	movs	r2, #3
 800aad4:	4393      	bics	r3, r2
 800aad6:	431e      	orrs	r6, r3
 800aad8:	81a6      	strh	r6, [r4, #12]
 800aada:	e7e4      	b.n	800aaa6 <__smakebuf_r+0xe>
 800aadc:	4b0f      	ldr	r3, [pc, #60]	; (800ab1c <__smakebuf_r+0x84>)
 800aade:	62ab      	str	r3, [r5, #40]	; 0x28
 800aae0:	2380      	movs	r3, #128	; 0x80
 800aae2:	89a2      	ldrh	r2, [r4, #12]
 800aae4:	6020      	str	r0, [r4, #0]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	81a3      	strh	r3, [r4, #12]
 800aaea:	9b00      	ldr	r3, [sp, #0]
 800aaec:	6120      	str	r0, [r4, #16]
 800aaee:	6163      	str	r3, [r4, #20]
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00d      	beq.n	800ab12 <__smakebuf_r+0x7a>
 800aaf6:	0028      	movs	r0, r5
 800aaf8:	230e      	movs	r3, #14
 800aafa:	5ee1      	ldrsh	r1, [r4, r3]
 800aafc:	f000 f8ea 	bl	800acd4 <_isatty_r>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d006      	beq.n	800ab12 <__smakebuf_r+0x7a>
 800ab04:	2203      	movs	r2, #3
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	4393      	bics	r3, r2
 800ab0a:	001a      	movs	r2, r3
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	89a0      	ldrh	r0, [r4, #12]
 800ab14:	4307      	orrs	r7, r0
 800ab16:	81a7      	strh	r7, [r4, #12]
 800ab18:	e7cb      	b.n	800aab2 <__smakebuf_r+0x1a>
 800ab1a:	46c0      	nop			; (mov r8, r8)
 800ab1c:	0800a885 	.word	0x0800a885

0800ab20 <memchr>:
 800ab20:	b2c9      	uxtb	r1, r1
 800ab22:	1882      	adds	r2, r0, r2
 800ab24:	4290      	cmp	r0, r2
 800ab26:	d101      	bne.n	800ab2c <memchr+0xc>
 800ab28:	2000      	movs	r0, #0
 800ab2a:	4770      	bx	lr
 800ab2c:	7803      	ldrb	r3, [r0, #0]
 800ab2e:	428b      	cmp	r3, r1
 800ab30:	d0fb      	beq.n	800ab2a <memchr+0xa>
 800ab32:	3001      	adds	r0, #1
 800ab34:	e7f6      	b.n	800ab24 <memchr+0x4>

0800ab36 <_raise_r>:
 800ab36:	b570      	push	{r4, r5, r6, lr}
 800ab38:	0004      	movs	r4, r0
 800ab3a:	000d      	movs	r5, r1
 800ab3c:	291f      	cmp	r1, #31
 800ab3e:	d904      	bls.n	800ab4a <_raise_r+0x14>
 800ab40:	2316      	movs	r3, #22
 800ab42:	6003      	str	r3, [r0, #0]
 800ab44:	2001      	movs	r0, #1
 800ab46:	4240      	negs	r0, r0
 800ab48:	bd70      	pop	{r4, r5, r6, pc}
 800ab4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d004      	beq.n	800ab5a <_raise_r+0x24>
 800ab50:	008a      	lsls	r2, r1, #2
 800ab52:	189b      	adds	r3, r3, r2
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	2a00      	cmp	r2, #0
 800ab58:	d108      	bne.n	800ab6c <_raise_r+0x36>
 800ab5a:	0020      	movs	r0, r4
 800ab5c:	f000 f832 	bl	800abc4 <_getpid_r>
 800ab60:	002a      	movs	r2, r5
 800ab62:	0001      	movs	r1, r0
 800ab64:	0020      	movs	r0, r4
 800ab66:	f000 f81b 	bl	800aba0 <_kill_r>
 800ab6a:	e7ed      	b.n	800ab48 <_raise_r+0x12>
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	2a01      	cmp	r2, #1
 800ab70:	d0ea      	beq.n	800ab48 <_raise_r+0x12>
 800ab72:	1c51      	adds	r1, r2, #1
 800ab74:	d103      	bne.n	800ab7e <_raise_r+0x48>
 800ab76:	2316      	movs	r3, #22
 800ab78:	3001      	adds	r0, #1
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	e7e4      	b.n	800ab48 <_raise_r+0x12>
 800ab7e:	2400      	movs	r4, #0
 800ab80:	0028      	movs	r0, r5
 800ab82:	601c      	str	r4, [r3, #0]
 800ab84:	4790      	blx	r2
 800ab86:	0020      	movs	r0, r4
 800ab88:	e7de      	b.n	800ab48 <_raise_r+0x12>
	...

0800ab8c <raise>:
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	4b03      	ldr	r3, [pc, #12]	; (800ab9c <raise+0x10>)
 800ab90:	0001      	movs	r1, r0
 800ab92:	6818      	ldr	r0, [r3, #0]
 800ab94:	f7ff ffcf 	bl	800ab36 <_raise_r>
 800ab98:	bd10      	pop	{r4, pc}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	200000f4 	.word	0x200000f4

0800aba0 <_kill_r>:
 800aba0:	2300      	movs	r3, #0
 800aba2:	b570      	push	{r4, r5, r6, lr}
 800aba4:	4d06      	ldr	r5, [pc, #24]	; (800abc0 <_kill_r+0x20>)
 800aba6:	0004      	movs	r4, r0
 800aba8:	0008      	movs	r0, r1
 800abaa:	0011      	movs	r1, r2
 800abac:	602b      	str	r3, [r5, #0]
 800abae:	f7f5 ffcd 	bl	8000b4c <_kill>
 800abb2:	1c43      	adds	r3, r0, #1
 800abb4:	d103      	bne.n	800abbe <_kill_r+0x1e>
 800abb6:	682b      	ldr	r3, [r5, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d000      	beq.n	800abbe <_kill_r+0x1e>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	20000768 	.word	0x20000768

0800abc4 <_getpid_r>:
 800abc4:	b510      	push	{r4, lr}
 800abc6:	f7f5 ffbb 	bl	8000b40 <_getpid>
 800abca:	bd10      	pop	{r4, pc}

0800abcc <__sread>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	000c      	movs	r4, r1
 800abd0:	250e      	movs	r5, #14
 800abd2:	5f49      	ldrsh	r1, [r1, r5]
 800abd4:	f000 f8a4 	bl	800ad20 <_read_r>
 800abd8:	2800      	cmp	r0, #0
 800abda:	db03      	blt.n	800abe4 <__sread+0x18>
 800abdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800abde:	181b      	adds	r3, r3, r0
 800abe0:	6563      	str	r3, [r4, #84]	; 0x54
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	4a02      	ldr	r2, [pc, #8]	; (800abf0 <__sread+0x24>)
 800abe8:	4013      	ands	r3, r2
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	e7f9      	b.n	800abe2 <__sread+0x16>
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	ffffefff 	.word	0xffffefff

0800abf4 <__swrite>:
 800abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf6:	001f      	movs	r7, r3
 800abf8:	898b      	ldrh	r3, [r1, #12]
 800abfa:	0005      	movs	r5, r0
 800abfc:	000c      	movs	r4, r1
 800abfe:	0016      	movs	r6, r2
 800ac00:	05db      	lsls	r3, r3, #23
 800ac02:	d505      	bpl.n	800ac10 <__swrite+0x1c>
 800ac04:	230e      	movs	r3, #14
 800ac06:	5ec9      	ldrsh	r1, [r1, r3]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	f000 f874 	bl	800acf8 <_lseek_r>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	4a05      	ldr	r2, [pc, #20]	; (800ac28 <__swrite+0x34>)
 800ac14:	0028      	movs	r0, r5
 800ac16:	4013      	ands	r3, r2
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	0032      	movs	r2, r6
 800ac1c:	230e      	movs	r3, #14
 800ac1e:	5ee1      	ldrsh	r1, [r4, r3]
 800ac20:	003b      	movs	r3, r7
 800ac22:	f000 f81f 	bl	800ac64 <_write_r>
 800ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac28:	ffffefff 	.word	0xffffefff

0800ac2c <__sseek>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	000c      	movs	r4, r1
 800ac30:	250e      	movs	r5, #14
 800ac32:	5f49      	ldrsh	r1, [r1, r5]
 800ac34:	f000 f860 	bl	800acf8 <_lseek_r>
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	1c42      	adds	r2, r0, #1
 800ac3c:	d103      	bne.n	800ac46 <__sseek+0x1a>
 800ac3e:	4a05      	ldr	r2, [pc, #20]	; (800ac54 <__sseek+0x28>)
 800ac40:	4013      	ands	r3, r2
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
 800ac46:	2280      	movs	r2, #128	; 0x80
 800ac48:	0152      	lsls	r2, r2, #5
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	81a3      	strh	r3, [r4, #12]
 800ac4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac50:	e7f8      	b.n	800ac44 <__sseek+0x18>
 800ac52:	46c0      	nop			; (mov r8, r8)
 800ac54:	ffffefff 	.word	0xffffefff

0800ac58 <__sclose>:
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	230e      	movs	r3, #14
 800ac5c:	5ec9      	ldrsh	r1, [r1, r3]
 800ac5e:	f000 f815 	bl	800ac8c <_close_r>
 800ac62:	bd10      	pop	{r4, pc}

0800ac64 <_write_r>:
 800ac64:	b570      	push	{r4, r5, r6, lr}
 800ac66:	0004      	movs	r4, r0
 800ac68:	0008      	movs	r0, r1
 800ac6a:	0011      	movs	r1, r2
 800ac6c:	001a      	movs	r2, r3
 800ac6e:	2300      	movs	r3, #0
 800ac70:	4d05      	ldr	r5, [pc, #20]	; (800ac88 <_write_r+0x24>)
 800ac72:	602b      	str	r3, [r5, #0]
 800ac74:	f7f5 ffa3 	bl	8000bbe <_write>
 800ac78:	1c43      	adds	r3, r0, #1
 800ac7a:	d103      	bne.n	800ac84 <_write_r+0x20>
 800ac7c:	682b      	ldr	r3, [r5, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d000      	beq.n	800ac84 <_write_r+0x20>
 800ac82:	6023      	str	r3, [r4, #0]
 800ac84:	bd70      	pop	{r4, r5, r6, pc}
 800ac86:	46c0      	nop			; (mov r8, r8)
 800ac88:	20000768 	.word	0x20000768

0800ac8c <_close_r>:
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	b570      	push	{r4, r5, r6, lr}
 800ac90:	4d06      	ldr	r5, [pc, #24]	; (800acac <_close_r+0x20>)
 800ac92:	0004      	movs	r4, r0
 800ac94:	0008      	movs	r0, r1
 800ac96:	602b      	str	r3, [r5, #0]
 800ac98:	f7f5 ffad 	bl	8000bf6 <_close>
 800ac9c:	1c43      	adds	r3, r0, #1
 800ac9e:	d103      	bne.n	800aca8 <_close_r+0x1c>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d000      	beq.n	800aca8 <_close_r+0x1c>
 800aca6:	6023      	str	r3, [r4, #0]
 800aca8:	bd70      	pop	{r4, r5, r6, pc}
 800acaa:	46c0      	nop			; (mov r8, r8)
 800acac:	20000768 	.word	0x20000768

0800acb0 <_fstat_r>:
 800acb0:	2300      	movs	r3, #0
 800acb2:	b570      	push	{r4, r5, r6, lr}
 800acb4:	4d06      	ldr	r5, [pc, #24]	; (800acd0 <_fstat_r+0x20>)
 800acb6:	0004      	movs	r4, r0
 800acb8:	0008      	movs	r0, r1
 800acba:	0011      	movs	r1, r2
 800acbc:	602b      	str	r3, [r5, #0]
 800acbe:	f7f5 ffa4 	bl	8000c0a <_fstat>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	d103      	bne.n	800acce <_fstat_r+0x1e>
 800acc6:	682b      	ldr	r3, [r5, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d000      	beq.n	800acce <_fstat_r+0x1e>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	20000768 	.word	0x20000768

0800acd4 <_isatty_r>:
 800acd4:	2300      	movs	r3, #0
 800acd6:	b570      	push	{r4, r5, r6, lr}
 800acd8:	4d06      	ldr	r5, [pc, #24]	; (800acf4 <_isatty_r+0x20>)
 800acda:	0004      	movs	r4, r0
 800acdc:	0008      	movs	r0, r1
 800acde:	602b      	str	r3, [r5, #0]
 800ace0:	f7f5 ffa1 	bl	8000c26 <_isatty>
 800ace4:	1c43      	adds	r3, r0, #1
 800ace6:	d103      	bne.n	800acf0 <_isatty_r+0x1c>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d000      	beq.n	800acf0 <_isatty_r+0x1c>
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
 800acf2:	46c0      	nop			; (mov r8, r8)
 800acf4:	20000768 	.word	0x20000768

0800acf8 <_lseek_r>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	0004      	movs	r4, r0
 800acfc:	0008      	movs	r0, r1
 800acfe:	0011      	movs	r1, r2
 800ad00:	001a      	movs	r2, r3
 800ad02:	2300      	movs	r3, #0
 800ad04:	4d05      	ldr	r5, [pc, #20]	; (800ad1c <_lseek_r+0x24>)
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	f7f5 ff96 	bl	8000c38 <_lseek>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d103      	bne.n	800ad18 <_lseek_r+0x20>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d000      	beq.n	800ad18 <_lseek_r+0x20>
 800ad16:	6023      	str	r3, [r4, #0]
 800ad18:	bd70      	pop	{r4, r5, r6, pc}
 800ad1a:	46c0      	nop			; (mov r8, r8)
 800ad1c:	20000768 	.word	0x20000768

0800ad20 <_read_r>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	0004      	movs	r4, r0
 800ad24:	0008      	movs	r0, r1
 800ad26:	0011      	movs	r1, r2
 800ad28:	001a      	movs	r2, r3
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	4d05      	ldr	r5, [pc, #20]	; (800ad44 <_read_r+0x24>)
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	f7f5 ff28 	bl	8000b84 <_read>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d103      	bne.n	800ad40 <_read_r+0x20>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d000      	beq.n	800ad40 <_read_r+0x20>
 800ad3e:	6023      	str	r3, [r4, #0]
 800ad40:	bd70      	pop	{r4, r5, r6, pc}
 800ad42:	46c0      	nop			; (mov r8, r8)
 800ad44:	20000768 	.word	0x20000768

0800ad48 <_init>:
 800ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4a:	46c0      	nop			; (mov r8, r8)
 800ad4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad4e:	bc08      	pop	{r3}
 800ad50:	469e      	mov	lr, r3
 800ad52:	4770      	bx	lr

0800ad54 <_fini>:
 800ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad56:	46c0      	nop			; (mov r8, r8)
 800ad58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5a:	bc08      	pop	{r3}
 800ad5c:	469e      	mov	lr, r3
 800ad5e:	4770      	bx	lr
